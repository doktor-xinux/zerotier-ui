{"code":"(this.webpackJsonpfrontend=this.webpackJsonpfrontend||[]).push([[41],{311:function(e,t,n){!function(e){\"use strict\";var t=function(e){return new RegExp(\"^(?:\"+e.join(\"|\")+\")$\",\"i\")};e.defineMode(\"cypher\",(function(n){var r,i=function(e){r=null;var t=e.next();if('\"'===t)return e.match(/^[^\"]*\"/),\"string\";if(\"'\"===t)return e.match(/^[^']*'/),\"string\";if(/[{}\\(\\),\\.;\\[\\]]/.test(t))return r=t,\"node\";if(\"/\"===t&&e.eat(\"/\"))return e.skipToEnd(),\"comment\";if(u.test(t))return e.eatWhile(u),null;if(e.eatWhile(/[_\\w\\d]/),e.eat(\":\"))return e.eatWhile(/[\\w\\d_\\-]/),\"atom\";var n=e.current();return c.test(n)?\"builtin\":l.test(n)?\"def\":d.test(n)||p.test(n)?\"keyword\":\"variable\"},o=function(e,t,n){return e.context={prev:e.context,indent:e.indent,col:n,type:t}},a=function(e){return e.indent=e.context.indent,e.context=e.context.prev},s=n.indentUnit,c=t([\"abs\",\"acos\",\"allShortestPaths\",\"asin\",\"atan\",\"atan2\",\"avg\",\"ceil\",\"coalesce\",\"collect\",\"cos\",\"cot\",\"count\",\"degrees\",\"e\",\"endnode\",\"exp\",\"extract\",\"filter\",\"floor\",\"haversin\",\"head\",\"id\",\"keys\",\"labels\",\"last\",\"left\",\"length\",\"log\",\"log10\",\"lower\",\"ltrim\",\"max\",\"min\",\"node\",\"nodes\",\"percentileCont\",\"percentileDisc\",\"pi\",\"radians\",\"rand\",\"range\",\"reduce\",\"rel\",\"relationship\",\"relationships\",\"replace\",\"reverse\",\"right\",\"round\",\"rtrim\",\"shortestPath\",\"sign\",\"sin\",\"size\",\"split\",\"sqrt\",\"startnode\",\"stdev\",\"stdevp\",\"str\",\"substring\",\"sum\",\"tail\",\"tan\",\"timestamp\",\"toFloat\",\"toInt\",\"toString\",\"trim\",\"type\",\"upper\"]),l=t([\"all\",\"and\",\"any\",\"contains\",\"exists\",\"has\",\"in\",\"none\",\"not\",\"or\",\"single\",\"xor\"]),d=t([\"as\",\"asc\",\"ascending\",\"assert\",\"by\",\"case\",\"commit\",\"constraint\",\"create\",\"csv\",\"cypher\",\"delete\",\"desc\",\"descending\",\"detach\",\"distinct\",\"drop\",\"else\",\"end\",\"ends\",\"explain\",\"false\",\"fieldterminator\",\"foreach\",\"from\",\"headers\",\"in\",\"index\",\"is\",\"join\",\"limit\",\"load\",\"match\",\"merge\",\"null\",\"on\",\"optional\",\"order\",\"periodic\",\"profile\",\"remove\",\"return\",\"scan\",\"set\",\"skip\",\"start\",\"starts\",\"then\",\"true\",\"union\",\"unique\",\"unwind\",\"using\",\"when\",\"where\",\"with\",\"call\",\"yield\"]),p=t([\"access\",\"active\",\"assign\",\"all\",\"alter\",\"as\",\"catalog\",\"change\",\"copy\",\"create\",\"constraint\",\"constraints\",\"current\",\"database\",\"databases\",\"dbms\",\"default\",\"deny\",\"drop\",\"element\",\"elements\",\"exists\",\"from\",\"grant\",\"graph\",\"graphs\",\"if\",\"index\",\"indexes\",\"label\",\"labels\",\"management\",\"match\",\"name\",\"names\",\"new\",\"node\",\"nodes\",\"not\",\"of\",\"on\",\"or\",\"password\",\"populated\",\"privileges\",\"property\",\"read\",\"relationship\",\"relationships\",\"remove\",\"replace\",\"required\",\"revoke\",\"role\",\"roles\",\"set\",\"show\",\"start\",\"status\",\"stop\",\"suspended\",\"to\",\"traverse\",\"type\",\"types\",\"user\",\"users\",\"with\",\"write\"]),u=/[*+\\-<>=&|~%^]/;return{startState:function(){return{tokenize:i,context:null,indent:0,col:0}},token:function(e,t){if(e.sol()&&(t.context&&null==t.context.align&&(t.context.align=!1),t.indent=e.indentation()),e.eatSpace())return null;var n=t.tokenize(e,t);if(\"comment\"!==n&&t.context&&null==t.context.align&&\"pattern\"!==t.context.type&&(t.context.align=!0),\"(\"===r)o(t,\")\",e.column());else if(\"[\"===r)o(t,\"]\",e.column());else if(\"{\"===r)o(t,\"}\",e.column());else if(/[\\]\\}\\)]/.test(r)){for(;t.context&&\"pattern\"===t.context.type;)a(t);t.context&&r===t.context.type&&a(t)}else\".\"===r&&t.context&&\"pattern\"===t.context.type?a(t):/atom|string|variable/.test(n)&&t.context&&(/[\\}\\]]/.test(t.context.type)?o(t,\"pattern\",e.column()):\"pattern\"!==t.context.type||t.context.align||(t.context.align=!0,t.context.col=e.column()));return n},indent:function(t,n){var r=n&&n.charAt(0),i=t.context;if(/[\\]\\}]/.test(r))for(;i&&\"pattern\"===i.type;)i=i.prev;var o=i&&r===i.type;return i?\"keywords\"===i.type?e.commands.newlineAndIndent:i.align?i.col+(o?0:1):i.indent+(o?0:s):0}}})),e.modeExtensions.cypher={autoFormatLineBreaks:function(e){for(var t=e.split(\"\\n\"),n=/\\s+\\b(return|where|order by|match|with|skip|limit|create|delete|set)\\b\\s/g,r=0;r<t.length;r++)t[r]=t[r].replace(n,\" \\n$1 \").trim();return t.join(\"\\n\")}},e.defineMIME(\"application/x-cypher-query\",\"cypher\")}(n(108))}}]);","name":"static/js/41.7d5a55dd.chunk.js","map":{"version":3,"sources":["static/js/41.7d5a55dd.chunk.js"],"names":["this","push","module","exports","__webpack_require__","CodeMirror","wordRegexp","words","RegExp","join","defineMode","config","curPunc","tokenBase","stream","ch","next","match","test","eat","skipToEnd","operatorChars","eatWhile","word","current","funcs","preds","keywords","systemKeywords","pushContext","state","type","col","context","prev","indent","popContext","indentUnit","startState","tokenize","token","sol","align","indentation","eatSpace","style","column","textAfter","firstChar","charAt","closing","commands","newlineAndIndent","modeExtensions","autoFormatLineBreaks","text","lines","split","reProcessedPortion","i","length","replace","trim","defineMIME","mod"],"mappings":"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"},"input":"(this[\"webpackJsonpfrontend\"] = this[\"webpackJsonpfrontend\"] || []).push([[41],{\n\n/***/ 311:\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// By the Neo4j Team and contributors.\n// https://github.com/neo4j-contrib/CodeMirror\n(function (mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(108));else {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var wordRegexp = function wordRegexp(words) {\n    return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n  };\n\n  CodeMirror.defineMode(\"cypher\", function (config) {\n    var tokenBase = function tokenBase(stream\n    /*, state*/\n    ) {\n      curPunc = null;\n      var ch = stream.next();\n\n      if (ch === '\"') {\n        stream.match(/^[^\"]*\"/);\n        return \"string\";\n      }\n\n      if (ch === \"'\") {\n        stream.match(/^[^']*'/);\n        return \"string\";\n      }\n\n      if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n        curPunc = ch;\n        return \"node\";\n      } else if (ch === \"/\" && stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (operatorChars.test(ch)) {\n        stream.eatWhile(operatorChars);\n        return null;\n      } else {\n        stream.eatWhile(/[_\\w\\d]/);\n\n        if (stream.eat(\":\")) {\n          stream.eatWhile(/[\\w\\d_\\-]/);\n          return \"atom\";\n        }\n\n        var word = stream.current();\n        if (funcs.test(word)) return \"builtin\";\n        if (preds.test(word)) return \"def\";\n        if (keywords.test(word) || systemKeywords.test(word)) return \"keyword\";\n        return \"variable\";\n      }\n    };\n\n    var pushContext = function pushContext(state, type, col) {\n      return state.context = {\n        prev: state.context,\n        indent: state.indent,\n        col: col,\n        type: type\n      };\n    };\n\n    var popContext = function popContext(state) {\n      state.indent = state.context.indent;\n      return state.context = state.context.prev;\n    };\n\n    var indentUnit = config.indentUnit;\n    var curPunc;\n    var funcs = wordRegexp([\"abs\", \"acos\", \"allShortestPaths\", \"asin\", \"atan\", \"atan2\", \"avg\", \"ceil\", \"coalesce\", \"collect\", \"cos\", \"cot\", \"count\", \"degrees\", \"e\", \"endnode\", \"exp\", \"extract\", \"filter\", \"floor\", \"haversin\", \"head\", \"id\", \"keys\", \"labels\", \"last\", \"left\", \"length\", \"log\", \"log10\", \"lower\", \"ltrim\", \"max\", \"min\", \"node\", \"nodes\", \"percentileCont\", \"percentileDisc\", \"pi\", \"radians\", \"rand\", \"range\", \"reduce\", \"rel\", \"relationship\", \"relationships\", \"replace\", \"reverse\", \"right\", \"round\", \"rtrim\", \"shortestPath\", \"sign\", \"sin\", \"size\", \"split\", \"sqrt\", \"startnode\", \"stdev\", \"stdevp\", \"str\", \"substring\", \"sum\", \"tail\", \"tan\", \"timestamp\", \"toFloat\", \"toInt\", \"toString\", \"trim\", \"type\", \"upper\"]);\n    var preds = wordRegexp([\"all\", \"and\", \"any\", \"contains\", \"exists\", \"has\", \"in\", \"none\", \"not\", \"or\", \"single\", \"xor\"]);\n    var keywords = wordRegexp([\"as\", \"asc\", \"ascending\", \"assert\", \"by\", \"case\", \"commit\", \"constraint\", \"create\", \"csv\", \"cypher\", \"delete\", \"desc\", \"descending\", \"detach\", \"distinct\", \"drop\", \"else\", \"end\", \"ends\", \"explain\", \"false\", \"fieldterminator\", \"foreach\", \"from\", \"headers\", \"in\", \"index\", \"is\", \"join\", \"limit\", \"load\", \"match\", \"merge\", \"null\", \"on\", \"optional\", \"order\", \"periodic\", \"profile\", \"remove\", \"return\", \"scan\", \"set\", \"skip\", \"start\", \"starts\", \"then\", \"true\", \"union\", \"unique\", \"unwind\", \"using\", \"when\", \"where\", \"with\", \"call\", \"yield\"]);\n    var systemKeywords = wordRegexp([\"access\", \"active\", \"assign\", \"all\", \"alter\", \"as\", \"catalog\", \"change\", \"copy\", \"create\", \"constraint\", \"constraints\", \"current\", \"database\", \"databases\", \"dbms\", \"default\", \"deny\", \"drop\", \"element\", \"elements\", \"exists\", \"from\", \"grant\", \"graph\", \"graphs\", \"if\", \"index\", \"indexes\", \"label\", \"labels\", \"management\", \"match\", \"name\", \"names\", \"new\", \"node\", \"nodes\", \"not\", \"of\", \"on\", \"or\", \"password\", \"populated\", \"privileges\", \"property\", \"read\", \"relationship\", \"relationships\", \"remove\", \"replace\", \"required\", \"revoke\", \"role\", \"roles\", \"set\", \"show\", \"start\", \"status\", \"stop\", \"suspended\", \"to\", \"traverse\", \"type\", \"types\", \"user\", \"users\", \"with\", \"write\"]);\n    var operatorChars = /[*+\\-<>=&|~%^]/;\n    return {\n      startState: function\n        /*base*/\n      startState() {\n        return {\n          tokenize: tokenBase,\n          context: null,\n          indent: 0,\n          col: 0\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          if (state.context && state.context.align == null) {\n            state.context.align = false;\n          }\n\n          state.indent = stream.indentation();\n        }\n\n        if (stream.eatSpace()) {\n          return null;\n        }\n\n        var style = state.tokenize(stream, state);\n\n        if (style !== \"comment\" && state.context && state.context.align == null && state.context.type !== \"pattern\") {\n          state.context.align = true;\n        }\n\n        if (curPunc === \"(\") {\n          pushContext(state, \")\", stream.column());\n        } else if (curPunc === \"[\") {\n          pushContext(state, \"]\", stream.column());\n        } else if (curPunc === \"{\") {\n          pushContext(state, \"}\", stream.column());\n        } else if (/[\\]\\}\\)]/.test(curPunc)) {\n          while (state.context && state.context.type === \"pattern\") {\n            popContext(state);\n          }\n\n          if (state.context && curPunc === state.context.type) {\n            popContext(state);\n          }\n        } else if (curPunc === \".\" && state.context && state.context.type === \"pattern\") {\n          popContext(state);\n        } else if (/atom|string|variable/.test(style) && state.context) {\n          if (/[\\}\\]]/.test(state.context.type)) {\n            pushContext(state, \"pattern\", stream.column());\n          } else if (state.context.type === \"pattern\" && !state.context.align) {\n            state.context.align = true;\n            state.context.col = stream.column();\n          }\n        }\n\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        var firstChar = textAfter && textAfter.charAt(0);\n        var context = state.context;\n\n        if (/[\\]\\}]/.test(firstChar)) {\n          while (context && context.type === \"pattern\") {\n            context = context.prev;\n          }\n        }\n\n        var closing = context && firstChar === context.type;\n        if (!context) return 0;\n        if (context.type === \"keywords\") return CodeMirror.commands.newlineAndIndent;\n        if (context.align) return context.col + (closing ? 0 : 1);\n        return context.indent + (closing ? 0 : indentUnit);\n      }\n    };\n  });\n  CodeMirror.modeExtensions[\"cypher\"] = {\n    autoFormatLineBreaks: function autoFormatLineBreaks(text) {\n      var i, lines, reProcessedPortion;\n      var lines = text.split(\"\\n\");\n      var reProcessedPortion = /\\s+\\b(return|where|order by|match|with|skip|limit|create|delete|set)\\b\\s/g;\n\n      for (var i = 0; i < lines.length; i++) {\n        lines[i] = lines[i].replace(reProcessedPortion, \" \\n$1 \").trim();\n      }\n\n      return lines.join(\"\\n\");\n    }\n  };\n  CodeMirror.defineMIME(\"application/x-cypher-query\", \"cypher\");\n});\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/mnt/Datengrab/python/Zero-tier/frontend/node_modules/codemirror/mode/cypher/cypher.js"],"names":["mod","require","CodeMirror","wordRegexp","words","RegExp","join","defineMode","config","tokenBase","stream","curPunc","ch","next","match","test","eat","skipToEnd","operatorChars","eatWhile","word","current","funcs","preds","keywords","systemKeywords","pushContext","state","type","col","context","prev","indent","popContext","indentUnit","startState","tokenize","token","sol","align","indentation","eatSpace","style","column","textAfter","firstChar","charAt","closing","commands","newlineAndIndent","modeExtensions","autoFormatLineBreaks","text","i","lines","reProcessedPortion","split","length","replace","trim","defineMIME"],"mappings":"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","file":"x","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// By the Neo4j Team and contributors.\n// https://github.com/neo4j-contrib/CodeMirror\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var wordRegexp = function(words) {\n    return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n  };\n\n  CodeMirror.defineMode(\"cypher\", function(config) {\n    var tokenBase = function(stream/*, state*/) {\n      curPunc = null\n      var ch = stream.next();\n      if (ch ==='\"') {\n        stream.match(/^[^\"]*\"/);\n        return \"string\";\n      }\n      if (ch === \"'\") {\n        stream.match(/^[^']*'/);\n        return \"string\";\n      }\n      if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n        curPunc = ch;\n        return \"node\";\n      } else if (ch === \"/\" && stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (operatorChars.test(ch)) {\n        stream.eatWhile(operatorChars);\n        return null;\n      } else {\n        stream.eatWhile(/[_\\w\\d]/);\n        if (stream.eat(\":\")) {\n          stream.eatWhile(/[\\w\\d_\\-]/);\n          return \"atom\";\n        }\n        var word = stream.current();\n        if (funcs.test(word)) return \"builtin\";\n        if (preds.test(word)) return \"def\";\n        if (keywords.test(word) || systemKeywords.test(word)) return \"keyword\";\n        return \"variable\";\n      }\n    };\n    var pushContext = function(state, type, col) {\n      return state.context = {\n        prev: state.context,\n        indent: state.indent,\n        col: col,\n        type: type\n      };\n    };\n    var popContext = function(state) {\n      state.indent = state.context.indent;\n      return state.context = state.context.prev;\n    };\n    var indentUnit = config.indentUnit;\n    var curPunc;\n    var funcs = wordRegexp([\"abs\", \"acos\", \"allShortestPaths\", \"asin\", \"atan\", \"atan2\", \"avg\", \"ceil\", \"coalesce\", \"collect\", \"cos\", \"cot\", \"count\", \"degrees\", \"e\", \"endnode\", \"exp\", \"extract\", \"filter\", \"floor\", \"haversin\", \"head\", \"id\", \"keys\", \"labels\", \"last\", \"left\", \"length\", \"log\", \"log10\", \"lower\", \"ltrim\", \"max\", \"min\", \"node\", \"nodes\", \"percentileCont\", \"percentileDisc\", \"pi\", \"radians\", \"rand\", \"range\", \"reduce\", \"rel\", \"relationship\", \"relationships\", \"replace\", \"reverse\", \"right\", \"round\", \"rtrim\", \"shortestPath\", \"sign\", \"sin\", \"size\", \"split\", \"sqrt\", \"startnode\", \"stdev\", \"stdevp\", \"str\", \"substring\", \"sum\", \"tail\", \"tan\", \"timestamp\", \"toFloat\", \"toInt\", \"toString\", \"trim\", \"type\", \"upper\"]);\n    var preds = wordRegexp([\"all\", \"and\", \"any\", \"contains\", \"exists\", \"has\", \"in\", \"none\", \"not\", \"or\", \"single\", \"xor\"]);\n    var keywords = wordRegexp([\"as\", \"asc\", \"ascending\", \"assert\", \"by\", \"case\", \"commit\", \"constraint\", \"create\", \"csv\", \"cypher\", \"delete\", \"desc\", \"descending\", \"detach\", \"distinct\", \"drop\", \"else\", \"end\", \"ends\", \"explain\", \"false\", \"fieldterminator\", \"foreach\", \"from\", \"headers\", \"in\", \"index\", \"is\", \"join\", \"limit\", \"load\", \"match\", \"merge\", \"null\", \"on\", \"optional\", \"order\", \"periodic\", \"profile\", \"remove\", \"return\", \"scan\", \"set\", \"skip\", \"start\", \"starts\", \"then\", \"true\", \"union\", \"unique\", \"unwind\", \"using\", \"when\", \"where\", \"with\", \"call\", \"yield\"]);\n    var systemKeywords = wordRegexp([\"access\", \"active\", \"assign\", \"all\", \"alter\", \"as\", \"catalog\", \"change\", \"copy\", \"create\", \"constraint\", \"constraints\", \"current\", \"database\", \"databases\", \"dbms\", \"default\", \"deny\", \"drop\", \"element\", \"elements\", \"exists\", \"from\", \"grant\", \"graph\", \"graphs\", \"if\", \"index\", \"indexes\", \"label\", \"labels\", \"management\", \"match\", \"name\", \"names\", \"new\", \"node\", \"nodes\", \"not\", \"of\", \"on\", \"or\", \"password\", \"populated\", \"privileges\", \"property\", \"read\", \"relationship\", \"relationships\", \"remove\", \"replace\", \"required\", \"revoke\", \"role\", \"roles\", \"set\", \"show\", \"start\", \"status\", \"stop\", \"suspended\", \"to\", \"traverse\", \"type\", \"types\", \"user\", \"users\", \"with\", \"write\"]);\n    var operatorChars = /[*+\\-<>=&|~%^]/;\n\n    return {\n      startState: function(/*base*/) {\n        return {\n          tokenize: tokenBase,\n          context: null,\n          indent: 0,\n          col: 0\n        };\n      },\n      token: function(stream, state) {\n        if (stream.sol()) {\n          if (state.context && (state.context.align == null)) {\n            state.context.align = false;\n          }\n          state.indent = stream.indentation();\n        }\n        if (stream.eatSpace()) {\n          return null;\n        }\n        var style = state.tokenize(stream, state);\n        if (style !== \"comment\" && state.context && (state.context.align == null) && state.context.type !== \"pattern\") {\n          state.context.align = true;\n        }\n        if (curPunc === \"(\") {\n          pushContext(state, \")\", stream.column());\n        } else if (curPunc === \"[\") {\n          pushContext(state, \"]\", stream.column());\n        } else if (curPunc === \"{\") {\n          pushContext(state, \"}\", stream.column());\n        } else if (/[\\]\\}\\)]/.test(curPunc)) {\n          while (state.context && state.context.type === \"pattern\") {\n            popContext(state);\n          }\n          if (state.context && curPunc === state.context.type) {\n            popContext(state);\n          }\n        } else if (curPunc === \".\" && state.context && state.context.type === \"pattern\") {\n          popContext(state);\n        } else if (/atom|string|variable/.test(style) && state.context) {\n          if (/[\\}\\]]/.test(state.context.type)) {\n            pushContext(state, \"pattern\", stream.column());\n          } else if (state.context.type === \"pattern\" && !state.context.align) {\n            state.context.align = true;\n            state.context.col = stream.column();\n          }\n        }\n        return style;\n      },\n      indent: function(state, textAfter) {\n        var firstChar = textAfter && textAfter.charAt(0);\n        var context = state.context;\n        if (/[\\]\\}]/.test(firstChar)) {\n          while (context && context.type === \"pattern\") {\n            context = context.prev;\n          }\n        }\n        var closing = context && firstChar === context.type;\n        if (!context) return 0;\n        if (context.type === \"keywords\") return CodeMirror.commands.newlineAndIndent;\n        if (context.align) return context.col + (closing ? 0 : 1);\n        return context.indent + (closing ? 0 : indentUnit);\n      }\n    };\n  });\n\n  CodeMirror.modeExtensions[\"cypher\"] = {\n    autoFormatLineBreaks: function(text) {\n      var i, lines, reProcessedPortion;\n      var lines = text.split(\"\\n\");\n      var reProcessedPortion = /\\s+\\b(return|where|order by|match|with|skip|limit|create|delete|set)\\b\\s/g;\n      for (var i = 0; i < lines.length; i++)\n        lines[i] = lines[i].replace(reProcessedPortion, \" \\n$1 \").trim();\n      return lines.join(\"\\n\");\n    }\n  };\n\n  CodeMirror.defineMIME(\"application/x-cypher-query\", \"cypher\");\n\n});\n"]}}