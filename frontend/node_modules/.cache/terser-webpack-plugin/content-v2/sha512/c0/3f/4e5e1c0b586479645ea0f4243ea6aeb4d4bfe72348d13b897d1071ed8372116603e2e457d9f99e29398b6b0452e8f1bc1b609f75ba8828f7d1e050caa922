{"code":"(this.webpackJsonpfrontend=this.webpackJsonpfrontend||[]).push([[31],{302:function(t,e,a){!function(t){\"use strict\";function e(t){var e=t.match(/^\\s*\\S/);return t.skipToEnd(),e?\"error\":null}t.defineMode(\"asciiarmor\",(function(){return{token:function(t,a){var n;if(\"top\"==a.state)return t.sol()&&(n=t.match(/^-----BEGIN (.*)?-----\\s*$/))?(a.state=\"headers\",a.type=n[1],\"tag\"):e(t);if(\"headers\"==a.state){if(t.sol()&&t.match(/^\\w+:/))return a.state=\"header\",\"atom\";var r=e(t);return r&&(a.state=\"body\"),r}return\"header\"==a.state?(t.skipToEnd(),a.state=\"headers\",\"string\"):\"body\"==a.state?t.sol()&&(n=t.match(/^-----END (.*)?-----\\s*$/))?n[1]!=a.type?\"error\":(a.state=\"end\",\"tag\"):t.eatWhile(/[A-Za-z0-9+\\/=]/)?null:(t.next(),\"error\"):\"end\"==a.state?e(t):void 0},blankLine:function(t){\"headers\"==t.state&&(t.state=\"body\")},startState:function(){return{state:\"top\",type:null}}}})),t.defineMIME(\"application/pgp\",\"asciiarmor\"),t.defineMIME(\"application/pgp-encrypted\",\"asciiarmor\"),t.defineMIME(\"application/pgp-keys\",\"asciiarmor\"),t.defineMIME(\"application/pgp-signature\",\"asciiarmor\")}(a(108))}}]);","name":"static/js/31.0e84623d.chunk.js","map":{"version":3,"sources":["static/js/31.0e84623d.chunk.js"],"names":["this","push","module","exports","__webpack_require__","CodeMirror","errorIfNotEmpty","stream","nonWS","match","skipToEnd","defineMode","token","state","m","sol","type","result","eatWhile","next","blankLine","startState","defineMIME","mod"],"mappings":"CAACA,KAA2B,qBAAIA,KAA2B,sBAAK,IAAIC,KAAK,CAAC,CAAC,IAAI,CAEzE,IACA,SAAUC,EAAQC,EAASC,IAO9B,SAAUC,GACX,aAEA,SAASC,EAAgBC,GACvB,IAAIC,EAAQD,EAAOE,MAAM,UAEzB,OADAF,EAAOG,YACAF,EAAQ,QAAU,KAG3BH,EAAWM,WAAW,cAAc,WAClC,MAAO,CACLC,MAAO,SAAeL,EAAQM,GAC5B,IAAIC,EAEJ,GAAmB,OAAfD,EAAMA,MACR,OAAIN,EAAOQ,QAAUD,EAAIP,EAAOE,MAAM,gCACpCI,EAAMA,MAAQ,UACdA,EAAMG,KAAOF,EAAE,GACR,OAGFR,EAAgBC,GAClB,GAAmB,WAAfM,EAAMA,MAAoB,CACnC,GAAIN,EAAOQ,OAASR,EAAOE,MAAM,SAE/B,OADAI,EAAMA,MAAQ,SACP,OAEP,IAAII,EAASX,EAAgBC,GAE7B,OADIU,IAAQJ,EAAMA,MAAQ,QACnBI,EAEJ,MAAmB,UAAfJ,EAAMA,OACfN,EAAOG,YACPG,EAAMA,MAAQ,UACP,UACiB,QAAfA,EAAMA,MACXN,EAAOQ,QAAUD,EAAIP,EAAOE,MAAM,6BAChCK,EAAE,IAAMD,EAAMG,KAAa,SAC/BH,EAAMA,MAAQ,MACP,OAEHN,EAAOW,SAAS,mBACX,MAEPX,EAAOY,OACA,SAGa,OAAfN,EAAMA,MACRP,EAAgBC,QADlB,GAITa,UAAW,SAAmBP,GACT,WAAfA,EAAMA,QAAoBA,EAAMA,MAAQ,SAE9CQ,WAAY,WACV,MAAO,CACLR,MAAO,MACPG,KAAM,WAKdX,EAAWiB,WAAW,kBAAmB,cACzCjB,EAAWiB,WAAW,4BAA6B,cACnDjB,EAAWiB,WAAW,uBAAwB,cAC9CjB,EAAWiB,WAAW,4BAA6B,cAnEjDC,CAAInB,EAAoB"},"input":"(this[\"webpackJsonpfrontend\"] = this[\"webpackJsonpfrontend\"] || []).push([[31],{\n\n/***/ 302:\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(108));else {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function errorIfNotEmpty(stream) {\n    var nonWS = stream.match(/^\\s*\\S/);\n    stream.skipToEnd();\n    return nonWS ? \"error\" : null;\n  }\n\n  CodeMirror.defineMode(\"asciiarmor\", function () {\n    return {\n      token: function token(stream, state) {\n        var m;\n\n        if (state.state == \"top\") {\n          if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\\s*$/))) {\n            state.state = \"headers\";\n            state.type = m[1];\n            return \"tag\";\n          }\n\n          return errorIfNotEmpty(stream);\n        } else if (state.state == \"headers\") {\n          if (stream.sol() && stream.match(/^\\w+:/)) {\n            state.state = \"header\";\n            return \"atom\";\n          } else {\n            var result = errorIfNotEmpty(stream);\n            if (result) state.state = \"body\";\n            return result;\n          }\n        } else if (state.state == \"header\") {\n          stream.skipToEnd();\n          state.state = \"headers\";\n          return \"string\";\n        } else if (state.state == \"body\") {\n          if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\\s*$/))) {\n            if (m[1] != state.type) return \"error\";\n            state.state = \"end\";\n            return \"tag\";\n          } else {\n            if (stream.eatWhile(/[A-Za-z0-9+\\/=]/)) {\n              return null;\n            } else {\n              stream.next();\n              return \"error\";\n            }\n          }\n        } else if (state.state == \"end\") {\n          return errorIfNotEmpty(stream);\n        }\n      },\n      blankLine: function blankLine(state) {\n        if (state.state == \"headers\") state.state = \"body\";\n      },\n      startState: function startState() {\n        return {\n          state: \"top\",\n          type: null\n        };\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"application/pgp\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-encrypted\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-keys\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-signature\", \"asciiarmor\");\n});\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/mnt/Datengrab/python/Zero-tier/frontend/node_modules/codemirror/mode/asciiarmor/asciiarmor.js"],"names":["mod","require","CodeMirror","errorIfNotEmpty","stream","nonWS","match","skipToEnd","defineMode","token","state","m","sol","type","result","eatWhile","next","blankLine","startState","defineMIME"],"mappings":"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","file":"x","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function errorIfNotEmpty(stream) {\n    var nonWS = stream.match(/^\\s*\\S/);\n    stream.skipToEnd();\n    return nonWS ? \"error\" : null;\n  }\n\n  CodeMirror.defineMode(\"asciiarmor\", function() {\n    return {\n      token: function(stream, state) {\n        var m;\n        if (state.state == \"top\") {\n          if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\\s*$/))) {\n            state.state = \"headers\";\n            state.type = m[1];\n            return \"tag\";\n          }\n          return errorIfNotEmpty(stream);\n        } else if (state.state == \"headers\") {\n          if (stream.sol() && stream.match(/^\\w+:/)) {\n            state.state = \"header\";\n            return \"atom\";\n          } else {\n            var result = errorIfNotEmpty(stream);\n            if (result) state.state = \"body\";\n            return result;\n          }\n        } else if (state.state == \"header\") {\n          stream.skipToEnd();\n          state.state = \"headers\";\n          return \"string\";\n        } else if (state.state == \"body\") {\n          if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\\s*$/))) {\n            if (m[1] != state.type) return \"error\";\n            state.state = \"end\";\n            return \"tag\";\n          } else {\n            if (stream.eatWhile(/[A-Za-z0-9+\\/=]/)) {\n              return null;\n            } else {\n              stream.next();\n              return \"error\";\n            }\n          }\n        } else if (state.state == \"end\") {\n          return errorIfNotEmpty(stream);\n        }\n      },\n      blankLine: function(state) {\n        if (state.state == \"headers\") state.state = \"body\";\n      },\n      startState: function() {\n        return {state: \"top\", type: null};\n      }\n    };\n  });\n\n  CodeMirror.defineMIME(\"application/pgp\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-encrypted\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-keys\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-signature\", \"asciiarmor\");\n});\n"]}}