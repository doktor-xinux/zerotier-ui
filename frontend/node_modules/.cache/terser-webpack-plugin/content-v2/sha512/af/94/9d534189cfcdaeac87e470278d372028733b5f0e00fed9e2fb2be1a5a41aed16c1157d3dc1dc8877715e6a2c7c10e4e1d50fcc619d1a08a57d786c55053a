{"code":"(this.webpackJsonpfrontend=this.webpackJsonpfrontend||[]).push([[81],{360:function(O,T,E){!function(O){\"use strict\";O.defineMode(\"pig\",(function(O,T){var E=T.keywords,e=T.builtins,I=T.types,N=T.multiLineStrings,t=/[*+\\-%<>=&?:\\/!|]/;function A(O,T,E){return T.tokenize=E,E(O,T)}function R(O,T){for(var E,e=!1;E=O.next();){if(\"/\"==E&&e){T.tokenize=r;break}e=\"*\"==E}return\"comment\"}function S(O){return function(T,E){for(var e,I=!1,t=!1;null!=(e=T.next());){if(e==O&&!I){t=!0;break}I=!I&&\"\\\\\"==e}return(t||!I&&!N)&&(E.tokenize=r),\"error\"}}function r(O,T){var N=O.next();return'\"'==N||\"'\"==N?A(O,T,S(N)):/[\\[\\]{}\\(\\),;\\.]/.test(N)?null:/\\d/.test(N)?(O.eatWhile(/[\\w\\.]/),\"number\"):\"/\"==N?O.eat(\"*\")?A(O,T,R):(O.eatWhile(t),\"operator\"):\"-\"==N?O.eat(\"-\")?(O.skipToEnd(),\"comment\"):(O.eatWhile(t),\"operator\"):t.test(N)?(O.eatWhile(t),\"operator\"):(O.eatWhile(/[\\w\\$_]/),E&&E.propertyIsEnumerable(O.current().toUpperCase())&&!O.eat(\")\")&&!O.eat(\".\")?\"keyword\":e&&e.propertyIsEnumerable(O.current().toUpperCase())?\"variable-2\":I&&I.propertyIsEnumerable(O.current().toUpperCase())?\"variable-3\":\"variable\")}return{startState:function(){return{tokenize:r,startOfLine:!0}},token:function(O,T){return O.eatSpace()?null:T.tokenize(O,T)}}})),function(){function T(O){for(var T={},E=O.split(\" \"),e=0;e<E.length;++e)T[E[e]]=!0;return T}var E=\"ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER \",e=\"VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE NEQ MATCHES TRUE FALSE DUMP\",I=\"BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP \";O.defineMIME(\"text/x-pig\",{name:\"pig\",builtins:T(E),keywords:T(e),types:T(I)}),O.registerHelper(\"hintWords\",\"pig\",(E+I+e).split(\" \"))}()}(E(108))}}]);","name":"static/js/81.21d488f3.chunk.js","map":{"version":3,"sources":["static/js/81.21d488f3.chunk.js"],"names":["this","push","module","exports","__webpack_require__","CodeMirror","defineMode","_config","parserConfig","keywords","builtins","types","multiLineStrings","isOperatorChar","chain","stream","state","f","tokenize","tokenComment","ch","isEnd","next","tokenBase","tokenString","quote","escaped","end","test","eatWhile","eat","skipToEnd","propertyIsEnumerable","current","toUpperCase","startState","startOfLine","token","eatSpace","str","obj","words","split","i","length","pBuiltins","pKeywords","pTypes","defineMIME","name","registerHelper","mod"],"mappings":"CAACA,KAA2B,qBAAIA,KAA2B,sBAAK,IAAIC,KAAK,CAAC,CAAC,IAAI,CAEzE,IACA,SAAUC,EAAQC,EAASC,IAc9B,SAAUC,GACX,aAEAA,EAAWC,WAAW,OAAO,SAAUC,EAASC,GAC9C,IAAIC,EAAWD,EAAaC,SACxBC,EAAWF,EAAaE,SACxBC,EAAQH,EAAaG,MACrBC,EAAmBJ,EAAaI,iBAChCC,EAAiB,oBAErB,SAASC,EAAMC,EAAQC,EAAOC,GAE5B,OADAD,EAAME,SAAWD,EACVA,EAAEF,EAAQC,GAGnB,SAASG,EAAaJ,EAAQC,GAI5B,IAHA,IACII,EADAC,GAAQ,EAGLD,EAAKL,EAAOO,QAAQ,CACzB,GAAU,KAANF,GAAaC,EAAO,CACtBL,EAAME,SAAWK,EACjB,MAGFF,EAAc,KAAND,EAGV,MAAO,UAGT,SAASI,EAAYC,GACnB,OAAO,SAAUV,EAAQC,GAKvB,IAJA,IACIM,EADAI,GAAU,EAEVC,GAAM,EAEuB,OAAzBL,EAAOP,EAAOO,SAAiB,CACrC,GAAIA,GAAQG,IAAUC,EAAS,CAC7BC,GAAM,EACN,MAGFD,GAAWA,GAAmB,MAARJ,EAIxB,OADIK,IAASD,IAAWd,KAAmBI,EAAME,SAAWK,GACrD,SAIX,SAASA,EAAUR,EAAQC,GACzB,IAAII,EAAKL,EAAOO,OAEhB,MAAU,KAANF,GAAmB,KAANA,EAAkBN,EAAMC,EAAQC,EAAOQ,EAAYJ,IAC3D,mBAAmBQ,KAAKR,GAAY,KACpC,KAAKQ,KAAKR,IACjBL,EAAOc,SAAS,UACT,UAEM,KAANT,EACHL,EAAOe,IAAI,KACNhB,EAAMC,EAAQC,EAAOG,IAE5BJ,EAAOc,SAAShB,GACT,YAGI,KAANO,EACHL,EAAOe,IAAI,MACbf,EAAOgB,YACA,YAEPhB,EAAOc,SAAShB,GACT,YAGFA,EAAee,KAAKR,IAC3BL,EAAOc,SAAShB,GACT,aAGPE,EAAOc,SAAS,WAEZpB,GAAYA,EAASuB,qBAAqBjB,EAAOkB,UAAUC,iBAExDnB,EAAOe,IAAI,OAASf,EAAOe,IAAI,KAAa,UAI/CpB,GAAYA,EAASsB,qBAAqBjB,EAAOkB,UAAUC,eAAuB,aAElFvB,GAASA,EAAMqB,qBAAqBjB,EAAOkB,UAAUC,eAAuB,aAEzE,YAKX,MAAO,CACLC,WAAY,WACV,MAAO,CACLjB,SAAUK,EACVa,aAAa,IAGjBC,MAAO,SAAetB,EAAQC,GAC5B,OAAID,EAAOuB,WAAmB,KAClBtB,EAAME,SAASH,EAAQC,QAMzC,WACE,SAASP,EAAS8B,GAIhB,IAHA,IAAIC,EAAM,GACNC,EAAQF,EAAIG,MAAM,KAEbC,EAAI,EAAGA,EAAIF,EAAMG,SAAUD,EAClCH,EAAIC,EAAME,KAAM,EAGlB,OAAOH,EAIT,IAAIK,EAAY,w3BAEZC,EAAY,mXAEZC,EAAS,mEACb1C,EAAW2C,WAAW,aAAc,CAClCC,KAAM,MACNvC,SAAUD,EAASoC,GACnBpC,SAAUA,EAASqC,GACnBnC,MAAOF,EAASsC,KAElB1C,EAAW6C,eAAe,YAAa,OAAQL,EAAYE,EAASD,GAAWJ,MAAM,MAxBvF,GAnHES,CAAI/C,EAAoB"},"input":"(this[\"webpackJsonpfrontend\"] = this[\"webpackJsonpfrontend\"] || []).push([[81],{\n\n/***/ 360:\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*\n *      Pig Latin Mode for CodeMirror 2\n *      @author Prasanth Jayachandran\n *      @link   https://github.com/prasanthj/pig-codemirror-2\n *  This implementation is adapted from PL/SQL mode in CodeMirror 2.\n */\n(function (mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(108));else {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"pig\", function (_config, parserConfig) {\n    var keywords = parserConfig.keywords,\n        builtins = parserConfig.builtins,\n        types = parserConfig.types,\n        multiLineStrings = parserConfig.multiLineStrings;\n    var isOperatorChar = /[*+\\-%<>=&?:\\/!|]/;\n\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n\n    function tokenComment(stream, state) {\n      var isEnd = false;\n      var ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && isEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        isEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !(escaped || multiLineStrings)) state.tokenize = tokenBase;\n        return \"error\";\n      };\n    }\n\n    function tokenBase(stream, state) {\n      var ch = stream.next(); // is a start of string?\n\n      if (ch == '\"' || ch == \"'\") return chain(stream, state, tokenString(ch)); // is it one of the special chars\n      else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) return null; // is it a number?\n      else if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      } // multi line comment or operator\n      else if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          return chain(stream, state, tokenComment);\n        } else {\n          stream.eatWhile(isOperatorChar);\n          return \"operator\";\n        }\n      } // single line comment or operator\n      else if (ch == \"-\") {\n        if (stream.eat(\"-\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        } else {\n          stream.eatWhile(isOperatorChar);\n          return \"operator\";\n        }\n      } // is it an operator\n      else if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      } else {\n        // get the while word\n        stream.eatWhile(/[\\w\\$_]/); // is it one of the listed keywords?\n\n        if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {\n          //keywords can be used as variables like flatten(group), group.$0 etc..\n          if (!stream.eat(\")\") && !stream.eat(\".\")) return \"keyword\";\n        } // is it one of the builtin functions?\n\n\n        if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase())) return \"variable-2\"; // is it one of the listed types?\n\n        if (types && types.propertyIsEnumerable(stream.current().toUpperCase())) return \"variable-3\"; // default is a 'variable'\n\n        return \"variable\";\n      }\n    } // Interface\n\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          startOfLine: true\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        return style;\n      }\n    };\n  });\n\n  (function () {\n    function keywords(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    } // builtin funcs taken from trunk revision 1303237\n\n\n    var pBuiltins = \"ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL \" + \"CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS \" + \"DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG \" + \"FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN \" + \"INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER \" + \"ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS \" + \"LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  \" + \"PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE \" + \"SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG \" + \"TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER \"; // taken from QueryLexer.g\n\n    var pKeywords = \"VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP \" + \"JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL \" + \"PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE \" + \"SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE \" + \"NEQ MATCHES TRUE FALSE DUMP\"; // data types\n\n    var pTypes = \"BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP \";\n    CodeMirror.defineMIME(\"text/x-pig\", {\n      name: \"pig\",\n      builtins: keywords(pBuiltins),\n      keywords: keywords(pKeywords),\n      types: keywords(pTypes)\n    });\n    CodeMirror.registerHelper(\"hintWords\", \"pig\", (pBuiltins + pTypes + pKeywords).split(\" \"));\n  })();\n});\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/mnt/Datengrab/python/Zero-tier/frontend/node_modules/codemirror/mode/pig/pig.js"],"names":["mod","require","CodeMirror","defineMode","_config","parserConfig","keywords","builtins","types","multiLineStrings","isOperatorChar","chain","stream","state","f","tokenize","tokenComment","isEnd","ch","next","tokenBase","tokenString","quote","escaped","end","test","eatWhile","eat","skipToEnd","propertyIsEnumerable","current","toUpperCase","startState","startOfLine","token","eatSpace","style","str","obj","words","split","i","length","pBuiltins","pKeywords","pTypes","defineMIME","name","registerHelper"],"mappings":"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","file":"x","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*\n *      Pig Latin Mode for CodeMirror 2\n *      @author Prasanth Jayachandran\n *      @link   https://github.com/prasanthj/pig-codemirror-2\n *  This implementation is adapted from PL/SQL mode in CodeMirror 2.\n */\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"pig\", function(_config, parserConfig) {\n  var keywords = parserConfig.keywords,\n  builtins = parserConfig.builtins,\n  types = parserConfig.types,\n  multiLineStrings = parserConfig.multiLineStrings;\n\n  var isOperatorChar = /[*+\\-%<>=&?:\\/!|]/;\n\n  function chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n  }\n\n  function tokenComment(stream, state) {\n    var isEnd = false;\n    var ch;\n    while(ch = stream.next()) {\n      if(ch == \"/\" && isEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      isEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          end = true; break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = tokenBase;\n      return \"error\";\n    };\n  }\n\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    // is a start of string?\n    if (ch == '\"' || ch == \"'\")\n      return chain(stream, state, tokenString(ch));\n    // is it one of the special chars\n    else if(/[\\[\\]{}\\(\\),;\\.]/.test(ch))\n      return null;\n    // is it a number?\n    else if(/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    // multi line comment or operator\n    else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        return chain(stream, state, tokenComment);\n      }\n      else {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n    }\n    // single line comment or operator\n    else if (ch==\"-\") {\n      if(stream.eat(\"-\")){\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      else {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n    }\n    // is it an operator\n    else if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    else {\n      // get the while word\n      stream.eatWhile(/[\\w\\$_]/);\n      // is it one of the listed keywords?\n      if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {\n        //keywords can be used as variables like flatten(group), group.$0 etc..\n        if (!stream.eat(\")\") && !stream.eat(\".\"))\n          return \"keyword\";\n      }\n      // is it one of the builtin functions?\n      if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase()))\n        return \"variable-2\";\n      // is it one of the listed types?\n      if (types && types.propertyIsEnumerable(stream.current().toUpperCase()))\n        return \"variable-3\";\n      // default is a 'variable'\n      return \"variable\";\n    }\n  }\n\n  // Interface\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      if(stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      return style;\n    }\n  };\n});\n\n(function() {\n  function keywords(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  // builtin funcs taken from trunk revision 1303237\n  var pBuiltins = \"ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL \"\n    + \"CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS \"\n    + \"DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG \"\n    + \"FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN \"\n    + \"INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER \"\n    + \"ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS \"\n    + \"LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  \"\n    + \"PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE \"\n    + \"SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG \"\n    + \"TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER \";\n\n  // taken from QueryLexer.g\n  var pKeywords = \"VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP \"\n    + \"JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL \"\n    + \"PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE \"\n    + \"SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE \"\n    + \"NEQ MATCHES TRUE FALSE DUMP\";\n\n  // data types\n  var pTypes = \"BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP \";\n\n  CodeMirror.defineMIME(\"text/x-pig\", {\n    name: \"pig\",\n    builtins: keywords(pBuiltins),\n    keywords: keywords(pKeywords),\n    types: keywords(pTypes)\n  });\n\n  CodeMirror.registerHelper(\"hintWords\", \"pig\", (pBuiltins + pTypes + pKeywords).split(\" \"));\n}());\n\n});\n"]}}