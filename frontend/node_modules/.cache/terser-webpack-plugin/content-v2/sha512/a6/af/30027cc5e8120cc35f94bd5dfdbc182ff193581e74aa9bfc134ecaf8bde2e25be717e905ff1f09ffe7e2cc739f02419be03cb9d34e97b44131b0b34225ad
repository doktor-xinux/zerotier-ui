{"code":"(this.webpackJsonpfrontend=this.webpackJsonpfrontend||[]).push([[86],{294:function(e,t,n){!function(e){\"use strict\";function t(e){return new RegExp(\"^((\"+e.join(\")|(\")+\"))\\\\b\")}var n=t([\"and\",\"or\",\"not\",\"is\"]),r=[\"as\",\"assert\",\"break\",\"class\",\"continue\",\"def\",\"del\",\"elif\",\"else\",\"except\",\"finally\",\"for\",\"from\",\"global\",\"if\",\"import\",\"lambda\",\"pass\",\"raise\",\"return\",\"try\",\"while\",\"with\",\"yield\",\"in\"],i=[\"abs\",\"all\",\"any\",\"bin\",\"bool\",\"bytearray\",\"callable\",\"chr\",\"classmethod\",\"compile\",\"complex\",\"delattr\",\"dict\",\"dir\",\"divmod\",\"enumerate\",\"eval\",\"filter\",\"float\",\"format\",\"frozenset\",\"getattr\",\"globals\",\"hasattr\",\"hash\",\"help\",\"hex\",\"id\",\"input\",\"int\",\"isinstance\",\"issubclass\",\"iter\",\"len\",\"list\",\"locals\",\"map\",\"max\",\"memoryview\",\"min\",\"next\",\"object\",\"oct\",\"open\",\"ord\",\"pow\",\"property\",\"range\",\"repr\",\"reversed\",\"round\",\"set\",\"setattr\",\"slice\",\"sorted\",\"staticmethod\",\"str\",\"sum\",\"super\",\"tuple\",\"type\",\"vars\",\"zip\",\"__import__\",\"NotImplemented\",\"Ellipsis\",\"__debug__\"];function o(e){return e.scopes[e.scopes.length-1]}e.registerHelper(\"hintWords\",\"python\",r.concat(i)),e.defineMode(\"python\",(function(a,s){for(var l=\"error\",c=s.delimiters||s.singleDelimiters||/^[\\(\\)\\[\\]\\{\\}@,:`=;\\.\\\\]/,u=[s.singleOperators,s.doubleOperators,s.doubleDelimiters,s.tripleDelimiters,s.operators||/^([-+*/%\\/&|^]=?|[<>=]+|\\/\\/=?|\\*\\*=?|!=|[~!@]|\\.\\.\\.)/],f=0;f<u.length;f++)u[f]||u.splice(f--,1);var p=s.hangingIndent||a.indentUnit,d=r,m=i;void 0!=s.extra_keywords&&(d=d.concat(s.extra_keywords)),void 0!=s.extra_builtins&&(m=m.concat(s.extra_builtins));var h=!(s.version&&Number(s.version)<3);if(h){var b=s.identifiers||/^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;d=d.concat([\"nonlocal\",\"False\",\"True\",\"None\",\"async\",\"await\"]),m=m.concat([\"ascii\",\"bytes\",\"exec\",\"print\"]);var y=new RegExp(\"^(([rbuf]|(br)|(rb)|(fr)|(rf))?('{3}|\\\"{3}|['\\\"]))\",\"i\")}else b=s.identifiers||/^[_A-Za-z][_A-Za-z0-9]*/,d=d.concat([\"exec\",\"print\"]),m=m.concat([\"apply\",\"basestring\",\"buffer\",\"cmp\",\"coerce\",\"execfile\",\"file\",\"intern\",\"long\",\"raw_input\",\"reduce\",\"reload\",\"unichr\",\"unicode\",\"xrange\",\"False\",\"True\",\"None\"]),y=new RegExp(\"^(([rubf]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\",\"i\");var g=t(d),k=t(m);function v(e,t){var n=e.sol()&&\"\\\\\"!=t.lastToken;if(n&&(t.indent=e.indentation()),n&&\"py\"==o(t).type){var r=o(t).offset;if(e.eatSpace()){var i=e.indentation();return i>r?w(t):i<r&&E(e,t)&&\"#\"!=e.peek()&&(t.errorToken=!0),null}var a=x(e,t);return r>0&&E(e,t)&&(a+=\" \"+l),a}return x(e,t)}function x(e,t,r){if(e.eatSpace())return null;if(!r&&e.match(/^#.*/))return\"comment\";if(e.match(/^[0-9\\.]/,!1)){var i=!1;if(e.match(/^[\\d_]*\\.\\d+(e[\\+\\-]?\\d+)?/i)&&(i=!0),e.match(/^[\\d_]+\\.\\d*/)&&(i=!0),e.match(/^\\.\\d+/)&&(i=!0),i)return e.eat(/J/i),\"number\";var o=!1;if(e.match(/^0x[0-9a-f_]+/i)&&(o=!0),e.match(/^0b[01_]+/i)&&(o=!0),e.match(/^0o[0-7_]+/i)&&(o=!0),e.match(/^[1-9][\\d_]*(e[\\+\\-]?[\\d_]+)?/)&&(e.eat(/J/i),o=!0),e.match(/^0(?![\\dx])/i)&&(o=!0),o)return e.eat(/L/i),\"number\"}if(e.match(y))return-1!==e.current().toLowerCase().indexOf(\"f\")?(t.tokenize=_(e.current(),t.tokenize),t.tokenize(e,t)):(t.tokenize=z(e.current(),t.tokenize),t.tokenize(e,t));for(var a=0;a<u.length;a++)if(e.match(u[a]))return\"operator\";return e.match(c)?\"punctuation\":\".\"==t.lastToken&&e.match(b)?\"property\":e.match(g)||e.match(n)?\"keyword\":e.match(k)?\"builtin\":e.match(/^(self|cls)\\b/)?\"variable-2\":e.match(b)?\"def\"==t.lastToken||\"class\"==t.lastToken?\"def\":\"variable\":(e.next(),r?null:l)}function _(e,t){for(;\"rubf\".indexOf(e.charAt(0).toLowerCase())>=0;)e=e.substr(1);var n=1==e.length,r=\"string\";function i(e){return function(t,n){var r=x(t,n,!0);return\"punctuation\"==r&&(\"{\"==t.current()?n.tokenize=i(e+1):\"}\"==t.current()&&(n.tokenize=e>1?i(e-1):o)),r}}function o(o,a){for(;!o.eol();)if(o.eatWhile(/[^'\"\\{\\}\\\\]/),o.eat(\"\\\\\")){if(o.next(),n&&o.eol())return r}else{if(o.match(e))return a.tokenize=t,r;if(o.match(\"{{\"))return r;if(o.match(\"{\",!1))return a.tokenize=i(0),o.current()?r:a.tokenize(o,a);if(o.match(\"}}\"))return r;if(o.match(\"}\"))return l;o.eat(/['\"]/)}if(n){if(s.singleLineStringErrors)return l;a.tokenize=t}return r}return o.isString=!0,o}function z(e,t){for(;\"rubf\".indexOf(e.charAt(0).toLowerCase())>=0;)e=e.substr(1);var n=1==e.length,r=\"string\";function i(i,o){for(;!i.eol();)if(i.eatWhile(/[^'\"\\\\]/),i.eat(\"\\\\\")){if(i.next(),n&&i.eol())return r}else{if(i.match(e))return o.tokenize=t,r;i.eat(/['\"]/)}if(n){if(s.singleLineStringErrors)return l;o.tokenize=t}return r}return i.isString=!0,i}function w(e){for(;\"py\"!=o(e).type;)e.scopes.pop();e.scopes.push({offset:o(e).offset+a.indentUnit,type:\"py\",align:null})}function F(e,t,n){var r=e.match(/^[\\s\\[\\{\\(]*(?:#|$)/,!1)?null:e.column()+1;t.scopes.push({offset:t.indent+p,type:n,align:r})}function E(e,t){for(var n=e.indentation();t.scopes.length>1&&o(t).offset>n;){if(\"py\"!=o(t).type)return!0;t.scopes.pop()}return o(t).offset!=n}function T(e,t){e.sol()&&(t.beginningOfLine=!0,t.dedent=!1);var n=t.tokenize(e,t),r=e.current();if(t.beginningOfLine&&\"@\"==r)return e.match(b,!1)?\"meta\":h?\"operator\":l;if(/\\S/.test(r)&&(t.beginningOfLine=!1),\"variable\"!=n&&\"builtin\"!=n||\"meta\"!=t.lastToken||(n=\"meta\"),\"pass\"!=r&&\"return\"!=r||(t.dedent=!0),\"lambda\"==r&&(t.lambda=!0),\":\"==r&&!t.lambda&&\"py\"==o(t).type&&e.match(/^\\s*(?:#|$)/,!1)&&w(t),1==r.length&&!/string|comment/.test(n)){var i=\"[({\".indexOf(r);if(-1!=i&&F(e,t,\"])}\".slice(i,i+1)),-1!=(i=\"])}\".indexOf(r))){if(o(t).type!=r)return l;t.indent=t.scopes.pop().offset-p}}return t.dedent&&e.eol()&&\"py\"==o(t).type&&t.scopes.length>1&&t.scopes.pop(),n}return{startState:function(e){return{tokenize:v,scopes:[{offset:e||0,type:\"py\",align:null}],indent:e||0,lastToken:null,lambda:!1,dedent:0}},token:function(e,t){var n=t.errorToken;n&&(t.errorToken=!1);var r=T(e,t);return r&&\"comment\"!=r&&(t.lastToken=\"keyword\"==r||\"punctuation\"==r?e.current():r),\"punctuation\"==r&&(r=null),e.eol()&&t.lambda&&(t.lambda=!1),n?r+\" \"+l:r},indent:function(t,n){if(t.tokenize!=v)return t.tokenize.isString?e.Pass:0;var r=o(t),i=r.type==n.charAt(0)||\"py\"==r.type&&!t.dedent&&/^(else:|elif |except |finally:)/.test(n);return null!=r.align?r.align-(i?1:0):r.offset-(i?p:0)},electricInput:/^\\s*([\\}\\]\\)]|else:|elif |except |finally:)$/,closeBrackets:{triples:\"'\\\"\"},lineComment:\"#\",fold:\"indent\"}})),e.defineMIME(\"text/x-python\",\"python\");var a=function(e){return e.split(\" \")};e.defineMIME(\"text/x-cython\",{name:\"python\",extra_keywords:a(\"by cdef cimport cpdef ctypedef enum except extern gil include nogil property public readonly struct union DEF IF ELIF ELSE\")})}(n(108))}}]);","name":"static/js/86.ae78aaed.chunk.js","map":{"version":3,"sources":["static/js/86.ae78aaed.chunk.js"],"names":["this","push","module","exports","__webpack_require__","CodeMirror","wordRegexp","words","RegExp","join","wordOperators","commonKeywords","commonBuiltins","top","state","scopes","length","registerHelper","concat","defineMode","conf","parserConf","ERRORCLASS","delimiters","singleDelimiters","operators","singleOperators","doubleOperators","doubleDelimiters","tripleDelimiters","i","splice","hangingIndent","indentUnit","myKeywords","myBuiltins","undefined","extra_keywords","extra_builtins","py3","version","Number","identifiers","stringPrefixes","keywords","builtins","tokenBase","stream","sol","lastToken","indent","indentation","type","scopeOffset","offset","eatSpace","lineOffset","pushPyScope","dedent","peek","errorToken","style","tokenBaseInner","inFormat","match","floatLiteral","eat","intLiteral","current","toLowerCase","indexOf","tokenize","formatStringFactory","tokenStringFactory","next","delimiter","tokenOuter","charAt","substr","singleline","OUTCLASS","tokenNestedExpr","depth","inner","tokenString","eol","eatWhile","singleLineStringErrors","isString","pop","align","pushBracketScope","column","indented","tokenLexer","beginningOfLine","test","lambda","delimiter_index","slice","startState","basecolumn","token","addErr","textAfter","Pass","scope","closing","electricInput","closeBrackets","triples","lineComment","fold","defineMIME","str","split","name","mod"],"mappings":"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"},"input":"(this[\"webpackJsonpfrontend\"] = this[\"webpackJsonpfrontend\"] || []).push([[86],{\n\n/***/ 294:\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(108));else {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\"]);\n  var commonKeywords = [\"as\", \"assert\", \"break\", \"class\", \"continue\", \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\", \"for\", \"from\", \"global\", \"if\", \"import\", \"lambda\", \"pass\", \"raise\", \"return\", \"try\", \"while\", \"with\", \"yield\", \"in\"];\n  var commonBuiltins = [\"abs\", \"all\", \"any\", \"bin\", \"bool\", \"bytearray\", \"callable\", \"chr\", \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\", \"enumerate\", \"eval\", \"filter\", \"float\", \"format\", \"frozenset\", \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\", \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\", \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\", \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"property\", \"range\", \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\", \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\", \"type\", \"vars\", \"zip\", \"__import__\", \"NotImplemented\", \"Ellipsis\", \"__debug__\"];\n  CodeMirror.registerHelper(\"hintWords\", \"python\", commonKeywords.concat(commonBuiltins));\n\n  function top(state) {\n    return state.scopes[state.scopes.length - 1];\n  }\n\n  CodeMirror.defineMode(\"python\", function (conf, parserConf) {\n    var ERRORCLASS = \"error\";\n    var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\\(\\)\\[\\]\\{\\}@,:`=;\\.\\\\]/; //               (Backwards-compatibility with old, cumbersome config system)\n\n    var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters, parserConf.operators || /^([-+*/%\\/&|^]=?|[<>=]+|\\/\\/=?|\\*\\*=?|!=|[~!@]|\\.\\.\\.)/];\n\n    for (var i = 0; i < operators.length; i++) {\n      if (!operators[i]) operators.splice(i--, 1);\n    }\n\n    var hangingIndent = parserConf.hangingIndent || conf.indentUnit;\n    var myKeywords = commonKeywords,\n        myBuiltins = commonBuiltins;\n    if (parserConf.extra_keywords != undefined) myKeywords = myKeywords.concat(parserConf.extra_keywords);\n    if (parserConf.extra_builtins != undefined) myBuiltins = myBuiltins.concat(parserConf.extra_builtins);\n    var py3 = !(parserConf.version && Number(parserConf.version) < 3);\n\n    if (py3) {\n      // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator\n      var identifiers = parserConf.identifiers || /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;\n      myKeywords = myKeywords.concat([\"nonlocal\", \"False\", \"True\", \"None\", \"async\", \"await\"]);\n      myBuiltins = myBuiltins.concat([\"ascii\", \"bytes\", \"exec\", \"print\"]);\n      var stringPrefixes = new RegExp(\"^(([rbuf]|(br)|(rb)|(fr)|(rf))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    } else {\n      var identifiers = parserConf.identifiers || /^[_A-Za-z][_A-Za-z0-9]*/;\n      myKeywords = myKeywords.concat([\"exec\", \"print\"]);\n      myBuiltins = myBuiltins.concat([\"apply\", \"basestring\", \"buffer\", \"cmp\", \"coerce\", \"execfile\", \"file\", \"intern\", \"long\", \"raw_input\", \"reduce\", \"reload\", \"unichr\", \"unicode\", \"xrange\", \"False\", \"True\", \"None\"]);\n      var stringPrefixes = new RegExp(\"^(([rubf]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    }\n\n    var keywords = wordRegexp(myKeywords);\n    var builtins = wordRegexp(myBuiltins); // tokenizers\n\n    function tokenBase(stream, state) {\n      var sol = stream.sol() && state.lastToken != \"\\\\\";\n      if (sol) state.indent = stream.indentation(); // Handle scope changes\n\n      if (sol && top(state).type == \"py\") {\n        var scopeOffset = top(state).offset;\n\n        if (stream.eatSpace()) {\n          var lineOffset = stream.indentation();\n          if (lineOffset > scopeOffset) pushPyScope(state);else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != \"#\") state.errorToken = true;\n          return null;\n        } else {\n          var style = tokenBaseInner(stream, state);\n          if (scopeOffset > 0 && dedent(stream, state)) style += \" \" + ERRORCLASS;\n          return style;\n        }\n      }\n\n      return tokenBaseInner(stream, state);\n    }\n\n    function tokenBaseInner(stream, state, inFormat) {\n      if (stream.eatSpace()) return null; // Handle Comments\n\n      if (!inFormat && stream.match(/^#.*/)) return \"comment\"; // Handle Number Literals\n\n      if (stream.match(/^[0-9\\.]/, false)) {\n        var floatLiteral = false; // Floats\n\n        if (stream.match(/^[\\d_]*\\.\\d+(e[\\+\\-]?\\d+)?/i)) {\n          floatLiteral = true;\n        }\n\n        if (stream.match(/^[\\d_]+\\.\\d*/)) {\n          floatLiteral = true;\n        }\n\n        if (stream.match(/^\\.\\d+/)) {\n          floatLiteral = true;\n        }\n\n        if (floatLiteral) {\n          // Float literals may be \"imaginary\"\n          stream.eat(/J/i);\n          return \"number\";\n        } // Integers\n\n\n        var intLiteral = false; // Hex\n\n        if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true; // Binary\n\n        if (stream.match(/^0b[01_]+/i)) intLiteral = true; // Octal\n\n        if (stream.match(/^0o[0-7_]+/i)) intLiteral = true; // Decimal\n\n        if (stream.match(/^[1-9][\\d_]*(e[\\+\\-]?[\\d_]+)?/)) {\n          // Decimal literals may be \"imaginary\"\n          stream.eat(/J/i); // TODO - Can you have imaginary longs?\n\n          intLiteral = true;\n        } // Zero by itself with no other piece of number.\n\n\n        if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n\n        if (intLiteral) {\n          // Integer literals may be \"long\"\n          stream.eat(/L/i);\n          return \"number\";\n        }\n      } // Handle Strings\n\n\n      if (stream.match(stringPrefixes)) {\n        var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;\n\n        if (!isFmtString) {\n          state.tokenize = tokenStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        } else {\n          state.tokenize = formatStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        }\n      }\n\n      for (var i = 0; i < operators.length; i++) {\n        if (stream.match(operators[i])) return \"operator\";\n      }\n\n      if (stream.match(delimiters)) return \"punctuation\";\n      if (state.lastToken == \".\" && stream.match(identifiers)) return \"property\";\n      if (stream.match(keywords) || stream.match(wordOperators)) return \"keyword\";\n      if (stream.match(builtins)) return \"builtin\";\n      if (stream.match(/^(self|cls)\\b/)) return \"variable-2\";\n\n      if (stream.match(identifiers)) {\n        if (state.lastToken == \"def\" || state.lastToken == \"class\") return \"def\";\n        return \"variable\";\n      } // Handle non-detected items\n\n\n      stream.next();\n      return inFormat ? null : ERRORCLASS;\n    }\n\n    function formatStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0) {\n        delimiter = delimiter.substr(1);\n      }\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenNestedExpr(depth) {\n        return function (stream, state) {\n          var inner = tokenBaseInner(stream, state, true);\n\n          if (inner == \"punctuation\") {\n            if (stream.current() == \"{\") {\n              state.tokenize = tokenNestedExpr(depth + 1);\n            } else if (stream.current() == \"}\") {\n              if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1);else state.tokenize = tokenString;\n            }\n          }\n\n          return inner;\n        };\n      }\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\{\\}\\\\]/);\n\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol()) return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else if (stream.match('{{')) {\n            // ignore {{ in f-str\n            return OUTCLASS;\n          } else if (stream.match('{', false)) {\n            // switch to nested mode\n            state.tokenize = tokenNestedExpr(0);\n            if (stream.current()) return OUTCLASS;else return state.tokenize(stream, state);\n          } else if (stream.match('}}')) {\n            return OUTCLASS;\n          } else if (stream.match('}')) {\n            // single } in f-string is an error\n            return ERRORCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n\n        if (singleline) {\n          if (parserConf.singleLineStringErrors) return ERRORCLASS;else state.tokenize = tokenOuter;\n        }\n\n        return OUTCLASS;\n      }\n\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function tokenStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0) {\n        delimiter = delimiter.substr(1);\n      }\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\\\]/);\n\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol()) return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n\n        if (singleline) {\n          if (parserConf.singleLineStringErrors) return ERRORCLASS;else state.tokenize = tokenOuter;\n        }\n\n        return OUTCLASS;\n      }\n\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function pushPyScope(state) {\n      while (top(state).type != \"py\") {\n        state.scopes.pop();\n      }\n\n      state.scopes.push({\n        offset: top(state).offset + conf.indentUnit,\n        type: \"py\",\n        align: null\n      });\n    }\n\n    function pushBracketScope(stream, state, type) {\n      var align = stream.match(/^[\\s\\[\\{\\(]*(?:#|$)/, false) ? null : stream.column() + 1;\n      state.scopes.push({\n        offset: state.indent + hangingIndent,\n        type: type,\n        align: align\n      });\n    }\n\n    function dedent(stream, state) {\n      var indented = stream.indentation();\n\n      while (state.scopes.length > 1 && top(state).offset > indented) {\n        if (top(state).type != \"py\") return true;\n        state.scopes.pop();\n      }\n\n      return top(state).offset != indented;\n    }\n\n    function tokenLexer(stream, state) {\n      if (stream.sol()) {\n        state.beginningOfLine = true;\n        state.dedent = false;\n      }\n\n      var style = state.tokenize(stream, state);\n      var current = stream.current(); // Handle decorators\n\n      if (state.beginningOfLine && current == \"@\") return stream.match(identifiers, false) ? \"meta\" : py3 ? \"operator\" : ERRORCLASS;\n      if (/\\S/.test(current)) state.beginningOfLine = false;\n      if ((style == \"variable\" || style == \"builtin\") && state.lastToken == \"meta\") style = \"meta\"; // Handle scope changes.\n\n      if (current == \"pass\" || current == \"return\") state.dedent = true;\n      if (current == \"lambda\") state.lambda = true;\n      if (current == \":\" && !state.lambda && top(state).type == \"py\" && stream.match(/^\\s*(?:#|$)/, false)) pushPyScope(state);\n\n      if (current.length == 1 && !/string|comment/.test(style)) {\n        var delimiter_index = \"[({\".indexOf(current);\n        if (delimiter_index != -1) pushBracketScope(stream, state, \"])}\".slice(delimiter_index, delimiter_index + 1));\n        delimiter_index = \"])}\".indexOf(current);\n\n        if (delimiter_index != -1) {\n          if (top(state).type == current) state.indent = state.scopes.pop().offset - hangingIndent;else return ERRORCLASS;\n        }\n      }\n\n      if (state.dedent && stream.eol() && top(state).type == \"py\" && state.scopes.length > 1) state.scopes.pop();\n      return style;\n    }\n\n    var external = {\n      startState: function startState(basecolumn) {\n        return {\n          tokenize: tokenBase,\n          scopes: [{\n            offset: basecolumn || 0,\n            type: \"py\",\n            align: null\n          }],\n          indent: basecolumn || 0,\n          lastToken: null,\n          lambda: false,\n          dedent: 0\n        };\n      },\n      token: function token(stream, state) {\n        var addErr = state.errorToken;\n        if (addErr) state.errorToken = false;\n        var style = tokenLexer(stream, state);\n        if (style && style != \"comment\") state.lastToken = style == \"keyword\" || style == \"punctuation\" ? stream.current() : style;\n        if (style == \"punctuation\") style = null;\n        if (stream.eol() && state.lambda) state.lambda = false;\n        return addErr ? style + \" \" + ERRORCLASS : style;\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize != tokenBase) return state.tokenize.isString ? CodeMirror.Pass : 0;\n        var scope = top(state);\n        var closing = scope.type == textAfter.charAt(0) || scope.type == \"py\" && !state.dedent && /^(else:|elif |except |finally:)/.test(textAfter);\n        if (scope.align != null) return scope.align - (closing ? 1 : 0);else return scope.offset - (closing ? hangingIndent : 0);\n      },\n      electricInput: /^\\s*([\\}\\]\\)]|else:|elif |except |finally:)$/,\n      closeBrackets: {\n        triples: \"'\\\"\"\n      },\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n    return external;\n  });\n  CodeMirror.defineMIME(\"text/x-python\", \"python\");\n\n  var words = function words(str) {\n    return str.split(\" \");\n  };\n\n  CodeMirror.defineMIME(\"text/x-cython\", {\n    name: \"python\",\n    extra_keywords: words(\"by cdef cimport cpdef ctypedef enum except \" + \"extern gil include nogil property public \" + \"readonly struct union DEF IF ELIF ELSE\")\n  });\n});\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/mnt/Datengrab/python/Zero-tier/frontend/node_modules/codemirror/mode/python/python.js"],"names":["mod","require","CodeMirror","wordRegexp","words","RegExp","join","wordOperators","commonKeywords","commonBuiltins","registerHelper","concat","top","state","scopes","length","defineMode","conf","parserConf","ERRORCLASS","delimiters","singleDelimiters","operators","singleOperators","doubleOperators","doubleDelimiters","tripleDelimiters","i","splice","hangingIndent","indentUnit","myKeywords","myBuiltins","extra_keywords","undefined","extra_builtins","py3","version","Number","identifiers","stringPrefixes","keywords","builtins","tokenBase","stream","sol","lastToken","indent","indentation","type","scopeOffset","offset","eatSpace","lineOffset","pushPyScope","dedent","peek","errorToken","style","tokenBaseInner","inFormat","match","floatLiteral","eat","intLiteral","isFmtString","current","toLowerCase","indexOf","tokenize","tokenStringFactory","formatStringFactory","next","delimiter","tokenOuter","charAt","substr","singleline","OUTCLASS","tokenNestedExpr","depth","inner","tokenString","eol","eatWhile","singleLineStringErrors","isString","pop","push","align","pushBracketScope","column","indented","tokenLexer","beginningOfLine","test","lambda","delimiter_index","slice","external","startState","basecolumn","token","addErr","textAfter","Pass","scope","closing","electricInput","closeBrackets","triples","lineComment","fold","defineMIME","str","split","name"],"mappings":"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","file":"x","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\"]);\n  var commonKeywords = [\"as\", \"assert\", \"break\", \"class\", \"continue\",\n                        \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\",\n                        \"for\", \"from\", \"global\", \"if\", \"import\",\n                        \"lambda\", \"pass\", \"raise\", \"return\",\n                        \"try\", \"while\", \"with\", \"yield\", \"in\"];\n  var commonBuiltins = [\"abs\", \"all\", \"any\", \"bin\", \"bool\", \"bytearray\", \"callable\", \"chr\",\n                        \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\",\n                        \"enumerate\", \"eval\", \"filter\", \"float\", \"format\", \"frozenset\",\n                        \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\",\n                        \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\",\n                        \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\",\n                        \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"property\", \"range\",\n                        \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\",\n                        \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\",\n                        \"type\", \"vars\", \"zip\", \"__import__\", \"NotImplemented\",\n                        \"Ellipsis\", \"__debug__\"];\n  CodeMirror.registerHelper(\"hintWords\", \"python\", commonKeywords.concat(commonBuiltins));\n\n  function top(state) {\n    return state.scopes[state.scopes.length - 1];\n  }\n\n  CodeMirror.defineMode(\"python\", function(conf, parserConf) {\n    var ERRORCLASS = \"error\";\n\n    var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\\(\\)\\[\\]\\{\\}@,:`=;\\.\\\\]/;\n    //               (Backwards-compatibility with old, cumbersome config system)\n    var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters,\n                     parserConf.operators || /^([-+*/%\\/&|^]=?|[<>=]+|\\/\\/=?|\\*\\*=?|!=|[~!@]|\\.\\.\\.)/]\n    for (var i = 0; i < operators.length; i++) if (!operators[i]) operators.splice(i--, 1)\n\n    var hangingIndent = parserConf.hangingIndent || conf.indentUnit;\n\n    var myKeywords = commonKeywords, myBuiltins = commonBuiltins;\n    if (parserConf.extra_keywords != undefined)\n      myKeywords = myKeywords.concat(parserConf.extra_keywords);\n\n    if (parserConf.extra_builtins != undefined)\n      myBuiltins = myBuiltins.concat(parserConf.extra_builtins);\n\n    var py3 = !(parserConf.version && Number(parserConf.version) < 3)\n    if (py3) {\n      // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator\n      var identifiers = parserConf.identifiers|| /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;\n      myKeywords = myKeywords.concat([\"nonlocal\", \"False\", \"True\", \"None\", \"async\", \"await\"]);\n      myBuiltins = myBuiltins.concat([\"ascii\", \"bytes\", \"exec\", \"print\"]);\n      var stringPrefixes = new RegExp(\"^(([rbuf]|(br)|(rb)|(fr)|(rf))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    } else {\n      var identifiers = parserConf.identifiers|| /^[_A-Za-z][_A-Za-z0-9]*/;\n      myKeywords = myKeywords.concat([\"exec\", \"print\"]);\n      myBuiltins = myBuiltins.concat([\"apply\", \"basestring\", \"buffer\", \"cmp\", \"coerce\", \"execfile\",\n                                      \"file\", \"intern\", \"long\", \"raw_input\", \"reduce\", \"reload\",\n                                      \"unichr\", \"unicode\", \"xrange\", \"False\", \"True\", \"None\"]);\n      var stringPrefixes = new RegExp(\"^(([rubf]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    }\n    var keywords = wordRegexp(myKeywords);\n    var builtins = wordRegexp(myBuiltins);\n\n    // tokenizers\n    function tokenBase(stream, state) {\n      var sol = stream.sol() && state.lastToken != \"\\\\\"\n      if (sol) state.indent = stream.indentation()\n      // Handle scope changes\n      if (sol && top(state).type == \"py\") {\n        var scopeOffset = top(state).offset;\n        if (stream.eatSpace()) {\n          var lineOffset = stream.indentation();\n          if (lineOffset > scopeOffset)\n            pushPyScope(state);\n          else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != \"#\")\n            state.errorToken = true;\n          return null;\n        } else {\n          var style = tokenBaseInner(stream, state);\n          if (scopeOffset > 0 && dedent(stream, state))\n            style += \" \" + ERRORCLASS;\n          return style;\n        }\n      }\n      return tokenBaseInner(stream, state);\n    }\n\n    function tokenBaseInner(stream, state, inFormat) {\n      if (stream.eatSpace()) return null;\n\n      // Handle Comments\n      if (!inFormat && stream.match(/^#.*/)) return \"comment\";\n\n      // Handle Number Literals\n      if (stream.match(/^[0-9\\.]/, false)) {\n        var floatLiteral = false;\n        // Floats\n        if (stream.match(/^[\\d_]*\\.\\d+(e[\\+\\-]?\\d+)?/i)) { floatLiteral = true; }\n        if (stream.match(/^[\\d_]+\\.\\d*/)) { floatLiteral = true; }\n        if (stream.match(/^\\.\\d+/)) { floatLiteral = true; }\n        if (floatLiteral) {\n          // Float literals may be \"imaginary\"\n          stream.eat(/J/i);\n          return \"number\";\n        }\n        // Integers\n        var intLiteral = false;\n        // Hex\n        if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true;\n        // Binary\n        if (stream.match(/^0b[01_]+/i)) intLiteral = true;\n        // Octal\n        if (stream.match(/^0o[0-7_]+/i)) intLiteral = true;\n        // Decimal\n        if (stream.match(/^[1-9][\\d_]*(e[\\+\\-]?[\\d_]+)?/)) {\n          // Decimal literals may be \"imaginary\"\n          stream.eat(/J/i);\n          // TODO - Can you have imaginary longs?\n          intLiteral = true;\n        }\n        // Zero by itself with no other piece of number.\n        if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n        if (intLiteral) {\n          // Integer literals may be \"long\"\n          stream.eat(/L/i);\n          return \"number\";\n        }\n      }\n\n      // Handle Strings\n      if (stream.match(stringPrefixes)) {\n        var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;\n        if (!isFmtString) {\n          state.tokenize = tokenStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        } else {\n          state.tokenize = formatStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        }\n      }\n\n      for (var i = 0; i < operators.length; i++)\n        if (stream.match(operators[i])) return \"operator\"\n\n      if (stream.match(delimiters)) return \"punctuation\";\n\n      if (state.lastToken == \".\" && stream.match(identifiers))\n        return \"property\";\n\n      if (stream.match(keywords) || stream.match(wordOperators))\n        return \"keyword\";\n\n      if (stream.match(builtins))\n        return \"builtin\";\n\n      if (stream.match(/^(self|cls)\\b/))\n        return \"variable-2\";\n\n      if (stream.match(identifiers)) {\n        if (state.lastToken == \"def\" || state.lastToken == \"class\")\n          return \"def\";\n        return \"variable\";\n      }\n\n      // Handle non-detected items\n      stream.next();\n      return inFormat ? null :ERRORCLASS;\n    }\n\n    function formatStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n        delimiter = delimiter.substr(1);\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenNestedExpr(depth) {\n        return function(stream, state) {\n          var inner = tokenBaseInner(stream, state, true)\n          if (inner == \"punctuation\") {\n            if (stream.current() == \"{\") {\n              state.tokenize = tokenNestedExpr(depth + 1)\n            } else if (stream.current() == \"}\") {\n              if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1)\n              else state.tokenize = tokenString\n            }\n          }\n          return inner\n        }\n      }\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\{\\}\\\\]/);\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol())\n              return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else if (stream.match('{{')) {\n            // ignore {{ in f-str\n            return OUTCLASS;\n          } else if (stream.match('{', false)) {\n            // switch to nested mode\n            state.tokenize = tokenNestedExpr(0)\n            if (stream.current()) return OUTCLASS;\n            else return state.tokenize(stream, state)\n          } else if (stream.match('}}')) {\n            return OUTCLASS;\n          } else if (stream.match('}')) {\n            // single } in f-string is an error\n            return ERRORCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n        if (singleline) {\n          if (parserConf.singleLineStringErrors)\n            return ERRORCLASS;\n          else\n            state.tokenize = tokenOuter;\n        }\n        return OUTCLASS;\n      }\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function tokenStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n        delimiter = delimiter.substr(1);\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\\\]/);\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol())\n              return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n        if (singleline) {\n          if (parserConf.singleLineStringErrors)\n            return ERRORCLASS;\n          else\n            state.tokenize = tokenOuter;\n        }\n        return OUTCLASS;\n      }\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function pushPyScope(state) {\n      while (top(state).type != \"py\") state.scopes.pop()\n      state.scopes.push({offset: top(state).offset + conf.indentUnit,\n                         type: \"py\",\n                         align: null})\n    }\n\n    function pushBracketScope(stream, state, type) {\n      var align = stream.match(/^[\\s\\[\\{\\(]*(?:#|$)/, false) ? null : stream.column() + 1\n      state.scopes.push({offset: state.indent + hangingIndent,\n                         type: type,\n                         align: align})\n    }\n\n    function dedent(stream, state) {\n      var indented = stream.indentation();\n      while (state.scopes.length > 1 && top(state).offset > indented) {\n        if (top(state).type != \"py\") return true;\n        state.scopes.pop();\n      }\n      return top(state).offset != indented;\n    }\n\n    function tokenLexer(stream, state) {\n      if (stream.sol()) {\n        state.beginningOfLine = true;\n        state.dedent = false;\n      }\n\n      var style = state.tokenize(stream, state);\n      var current = stream.current();\n\n      // Handle decorators\n      if (state.beginningOfLine && current == \"@\")\n        return stream.match(identifiers, false) ? \"meta\" : py3 ? \"operator\" : ERRORCLASS;\n\n      if (/\\S/.test(current)) state.beginningOfLine = false;\n\n      if ((style == \"variable\" || style == \"builtin\")\n          && state.lastToken == \"meta\")\n        style = \"meta\";\n\n      // Handle scope changes.\n      if (current == \"pass\" || current == \"return\")\n        state.dedent = true;\n\n      if (current == \"lambda\") state.lambda = true;\n      if (current == \":\" && !state.lambda && top(state).type == \"py\" && stream.match(/^\\s*(?:#|$)/, false))\n        pushPyScope(state);\n\n      if (current.length == 1 && !/string|comment/.test(style)) {\n        var delimiter_index = \"[({\".indexOf(current);\n        if (delimiter_index != -1)\n          pushBracketScope(stream, state, \"])}\".slice(delimiter_index, delimiter_index+1));\n\n        delimiter_index = \"])}\".indexOf(current);\n        if (delimiter_index != -1) {\n          if (top(state).type == current) state.indent = state.scopes.pop().offset - hangingIndent\n          else return ERRORCLASS;\n        }\n      }\n      if (state.dedent && stream.eol() && top(state).type == \"py\" && state.scopes.length > 1)\n        state.scopes.pop();\n\n      return style;\n    }\n\n    var external = {\n      startState: function(basecolumn) {\n        return {\n          tokenize: tokenBase,\n          scopes: [{offset: basecolumn || 0, type: \"py\", align: null}],\n          indent: basecolumn || 0,\n          lastToken: null,\n          lambda: false,\n          dedent: 0\n        };\n      },\n\n      token: function(stream, state) {\n        var addErr = state.errorToken;\n        if (addErr) state.errorToken = false;\n        var style = tokenLexer(stream, state);\n\n        if (style && style != \"comment\")\n          state.lastToken = (style == \"keyword\" || style == \"punctuation\") ? stream.current() : style;\n        if (style == \"punctuation\") style = null;\n\n        if (stream.eol() && state.lambda)\n          state.lambda = false;\n        return addErr ? style + \" \" + ERRORCLASS : style;\n      },\n\n      indent: function(state, textAfter) {\n        if (state.tokenize != tokenBase)\n          return state.tokenize.isString ? CodeMirror.Pass : 0;\n\n        var scope = top(state)\n        var closing = scope.type == textAfter.charAt(0) ||\n            scope.type == \"py\" && !state.dedent && /^(else:|elif |except |finally:)/.test(textAfter)\n        if (scope.align != null)\n          return scope.align - (closing ? 1 : 0)\n        else\n          return scope.offset - (closing ? hangingIndent : 0)\n      },\n\n      electricInput: /^\\s*([\\}\\]\\)]|else:|elif |except |finally:)$/,\n      closeBrackets: {triples: \"'\\\"\"},\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n    return external;\n  });\n\n  CodeMirror.defineMIME(\"text/x-python\", \"python\");\n\n  var words = function(str) { return str.split(\" \"); };\n\n  CodeMirror.defineMIME(\"text/x-cython\", {\n    name: \"python\",\n    extra_keywords: words(\"by cdef cimport cpdef ctypedef enum except \"+\n                          \"extern gil include nogil property public \"+\n                          \"readonly struct union DEF IF ELIF ELSE\")\n  });\n\n});\n"]}}