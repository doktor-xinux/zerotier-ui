{"code":"(this.webpackJsonpfrontend=this.webpackJsonpfrontend||[]).push([[44],{314:function(n,e,t){!function(n){\"use strict\";n.defineMode(\"diff\",(function(){var n={\"+\":\"positive\",\"-\":\"negative\",\"@\":\"meta\"};return{token:function(e){var t=e.string.search(/[\\t ]+?$/);if(!e.sol()||0===t)return e.skipToEnd(),(\"error \"+(n[e.string.charAt(0)]||\"\")).replace(/ $/,\"\");var i=n[e.peek()]||e.skipToEnd();return-1===t?e.skipToEnd():e.pos=t,i}}})),n.defineMIME(\"text/x-diff\",\"diff\")}(t(108))}}]);","name":"static/js/44.2af648cc.chunk.js","map":{"version":3,"sources":["static/js/44.2af648cc.chunk.js"],"names":["this","push","module","exports","__webpack_require__","CodeMirror","defineMode","TOKEN_NAMES","token","stream","tw_pos","string","search","sol","skipToEnd","charAt","replace","token_name","peek","pos","defineMIME","mod"],"mappings":"CAACA,KAA2B,qBAAIA,KAA2B,sBAAK,IAAIC,KAAK,CAAC,CAAC,IAAI,CAEzE,IACA,SAAUC,EAAQC,EAASC,IAO9B,SAAUC,GACX,aAEAA,EAAWC,WAAW,QAAQ,WAC5B,IAAIC,EAAc,CAChB,IAAK,WACL,IAAK,WACL,IAAK,QAEP,MAAO,CACLC,MAAO,SAAeC,GACpB,IAAIC,EAASD,EAAOE,OAAOC,OAAO,YAElC,IAAKH,EAAOI,OAAoB,IAAXH,EAEnB,OADAD,EAAOK,aACC,UAAYP,EAAYE,EAAOE,OAAOI,OAAO,KAAO,KAAKC,QAAQ,KAAM,IAGjF,IAAIC,EAAaV,EAAYE,EAAOS,SAAWT,EAAOK,YAQtD,OANgB,IAAZJ,EACFD,EAAOK,YAEPL,EAAOU,IAAMT,EAGRO,OAIbZ,EAAWe,WAAW,cAAe,QA/BnCC,CAAIjB,EAAoB"},"input":"(this[\"webpackJsonpfrontend\"] = this[\"webpackJsonpfrontend\"] || []).push([[44],{\n\n/***/ 314:\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(108));else {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"diff\", function () {\n    var TOKEN_NAMES = {\n      '+': 'positive',\n      '-': 'negative',\n      '@': 'meta'\n    };\n    return {\n      token: function token(stream) {\n        var tw_pos = stream.string.search(/[\\t ]+?$/);\n\n        if (!stream.sol() || tw_pos === 0) {\n          stream.skipToEnd();\n          return (\"error \" + (TOKEN_NAMES[stream.string.charAt(0)] || '')).replace(/ $/, '');\n        }\n\n        var token_name = TOKEN_NAMES[stream.peek()] || stream.skipToEnd();\n\n        if (tw_pos === -1) {\n          stream.skipToEnd();\n        } else {\n          stream.pos = tw_pos;\n        }\n\n        return token_name;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-diff\", \"diff\");\n});\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/mnt/Datengrab/python/Zero-tier/frontend/node_modules/codemirror/mode/diff/diff.js"],"names":["mod","require","CodeMirror","defineMode","TOKEN_NAMES","token","stream","tw_pos","string","search","sol","skipToEnd","charAt","replace","token_name","peek","pos","defineMIME"],"mappings":";;;;;AAAA;AACA;AAEA,CAAC,UAASA,GAAT,EAAc;EACb,IAAI,IAAJ,EAA6D;IAC3DA,GAAG,CAACC,mBAAO,CAAC,GAAD,CAAR,CAAH,CADF,KAEK,EAGH;AACH,CAPD,EAOG,UAASC,UAAT,EAAqB;EACxB;;EAEAA,UAAU,CAACC,UAAX,CAAsB,MAAtB,EAA8B,YAAW;IAEvC,IAAIC,WAAW,GAAG;MAChB,KAAK,UADW;MAEhB,KAAK,UAFW;MAGhB,KAAK;IAHW,CAAlB;IAMA,OAAO;MACLC,KAAK,EAAE,eAASC,MAAT,EAAiB;QACtB,IAAIC,MAAM,GAAGD,MAAM,CAACE,MAAP,CAAcC,MAAd,CAAqB,UAArB,CAAb;;QAEA,IAAI,CAACH,MAAM,CAACI,GAAP,EAAD,IAAiBH,MAAM,KAAK,CAAhC,EAAmC;UACjCD,MAAM,CAACK,SAAP;UACA,OAAO,CAAC,YACNP,WAAW,CAACE,MAAM,CAACE,MAAP,CAAcI,MAAd,CAAqB,CAArB,CAAD,CAAX,IAAwC,EADlC,CAAD,EACwCC,OADxC,CACgD,IADhD,EACsD,EADtD,CAAP;QAED;;QAED,IAAIC,UAAU,GAAGV,WAAW,CAACE,MAAM,CAACS,IAAP,EAAD,CAAX,IAA8BT,MAAM,CAACK,SAAP,EAA/C;;QAEA,IAAIJ,MAAM,KAAK,CAAC,CAAhB,EAAmB;UACjBD,MAAM,CAACK,SAAP;QACD,CAFD,MAEO;UACLL,MAAM,CAACU,GAAP,GAAaT,MAAb;QACD;;QAED,OAAOO,UAAP;MACD;IAnBI,CAAP;EAqBD,CA7BD;EA+BAZ,UAAU,CAACe,UAAX,CAAsB,aAAtB,EAAqC,MAArC;AAEC,CA3CD,E","file":"x","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"diff\", function() {\n\n  var TOKEN_NAMES = {\n    '+': 'positive',\n    '-': 'negative',\n    '@': 'meta'\n  };\n\n  return {\n    token: function(stream) {\n      var tw_pos = stream.string.search(/[\\t ]+?$/);\n\n      if (!stream.sol() || tw_pos === 0) {\n        stream.skipToEnd();\n        return (\"error \" + (\n          TOKEN_NAMES[stream.string.charAt(0)] || '')).replace(/ $/, '');\n      }\n\n      var token_name = TOKEN_NAMES[stream.peek()] || stream.skipToEnd();\n\n      if (tw_pos === -1) {\n        stream.skipToEnd();\n      } else {\n        stream.pos = tw_pos;\n      }\n\n      return token_name;\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-diff\", \"diff\");\n\n});\n"]}}