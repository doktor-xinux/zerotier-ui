{"code":"(this.webpackJsonpfrontend=this.webpackJsonpfrontend||[]).push([[113],{394:function(e,t,n){!function(e){\"use strict\";e.defineMode(\"vb\",(function(t,n){var r=\"error\";function i(e){return new RegExp(\"^((\"+e.join(\")|(\")+\"))\\\\b\",\"i\")}var a=new RegExp(\"^[\\\\+\\\\-\\\\*/%&\\\\\\\\|\\\\^~<>!]\"),o=new RegExp(\"^[\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}@,:`=;\\\\.]\"),c=new RegExp(\"^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\\\*\\\\*))\"),s=new RegExp(\"^((\\\\+=)|(\\\\-=)|(\\\\*=)|(%=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\"),u=new RegExp(\"^((//=)|(>>=)|(<<=)|(\\\\*\\\\*=))\"),d=new RegExp(\"^[_A-Za-z][_A-Za-z0-9]*\"),l=[\"class\",\"module\",\"sub\",\"enum\",\"select\",\"while\",\"if\",\"function\",\"get\",\"set\",\"property\",\"try\",\"structure\",\"synclock\",\"using\",\"with\"],h=[\"else\",\"elseif\",\"case\",\"catch\",\"finally\"],m=[\"next\",\"loop\"],f=[\"and\",\"andalso\",\"or\",\"orelse\",\"xor\",\"in\",\"not\",\"is\",\"isnot\",\"like\"],p=i(f),b=[\"#const\",\"#else\",\"#elseif\",\"#end\",\"#if\",\"#region\",\"addhandler\",\"addressof\",\"alias\",\"as\",\"byref\",\"byval\",\"cbool\",\"cbyte\",\"cchar\",\"cdate\",\"cdbl\",\"cdec\",\"cint\",\"clng\",\"cobj\",\"compare\",\"const\",\"continue\",\"csbyte\",\"cshort\",\"csng\",\"cstr\",\"cuint\",\"culng\",\"cushort\",\"declare\",\"default\",\"delegate\",\"dim\",\"directcast\",\"each\",\"erase\",\"error\",\"event\",\"exit\",\"explicit\",\"false\",\"for\",\"friend\",\"gettype\",\"goto\",\"handles\",\"implements\",\"imports\",\"infer\",\"inherits\",\"interface\",\"isfalse\",\"istrue\",\"lib\",\"me\",\"mod\",\"mustinherit\",\"mustoverride\",\"my\",\"mybase\",\"myclass\",\"namespace\",\"narrowing\",\"new\",\"nothing\",\"notinheritable\",\"notoverridable\",\"of\",\"off\",\"on\",\"operator\",\"option\",\"optional\",\"out\",\"overloads\",\"overridable\",\"overrides\",\"paramarray\",\"partial\",\"private\",\"protected\",\"public\",\"raiseevent\",\"readonly\",\"redim\",\"removehandler\",\"resume\",\"return\",\"shadows\",\"shared\",\"static\",\"step\",\"stop\",\"strict\",\"then\",\"throw\",\"to\",\"true\",\"trycast\",\"typeof\",\"until\",\"until\",\"when\",\"widening\",\"withevents\",\"writeonly\"],g=[\"object\",\"boolean\",\"char\",\"string\",\"byte\",\"sbyte\",\"short\",\"ushort\",\"int16\",\"uint16\",\"integer\",\"uinteger\",\"int32\",\"uint32\",\"long\",\"ulong\",\"int64\",\"uint64\",\"decimal\",\"single\",\"double\",\"float\",\"date\",\"datetime\",\"intptr\",\"uintptr\"],v=i(b),y=i(g),w='\"',k=i(l),x=i(h),I=i(m),E=i([\"end\"]),L=i([\"do\"]),z=null;function C(e,t){t.currentIndent++}function R(e,t){t.currentIndent--}function F(e,t){if(e.eatSpace())return null;if(\"'\"===e.peek())return e.skipToEnd(),\"comment\";if(e.match(/^((&H)|(&O))?[0-9\\.a-f]/i,!1)){var n=!1;if((e.match(/^\\d*\\.\\d+F?/i)||e.match(/^\\d+\\.\\d*F?/)||e.match(/^\\.\\d+F?/))&&(n=!0),n)return e.eat(/J/i),\"number\";var i=!1;if(e.match(/^&H[0-9a-f]+/i)||e.match(/^&O[0-7]+/i)?i=!0:e.match(/^[1-9]\\d*F?/)?(e.eat(/J/i),i=!0):e.match(/^0(?![\\dx])/i)&&(i=!0),i)return e.eat(/L/i),\"number\"}return e.match(w)?(t.tokenize=J(e.current()),t.tokenize(e,t)):e.match(u)||e.match(s)?null:e.match(c)||e.match(a)||e.match(p)?\"operator\":e.match(o)?null:e.match(L)?(C(e,t),t.doInCurrentLine=!0,\"keyword\"):e.match(k)?(t.doInCurrentLine?t.doInCurrentLine=!1:C(e,t),\"keyword\"):e.match(x)?\"keyword\":e.match(E)?(R(e,t),R(e,t),\"keyword\"):e.match(I)?(R(e,t),\"keyword\"):e.match(y)||e.match(v)?\"keyword\":e.match(d)?\"variable\":(e.next(),r)}function J(e){var t=1==e.length,i=\"string\";return function(a,o){for(;!a.eol();){if(a.eatWhile(/[^'\"]/),a.match(e))return o.tokenize=F,i;a.eat(/['\"]/)}if(t){if(n.singleLineStringErrors)return r;o.tokenize=F}return i}}function O(e,t){var n=t.tokenize(e,t),i=e.current();if(\".\"===i)return\"variable\"===(n=t.tokenize(e,t))?\"variable\":r;var a=\"[({\".indexOf(i);return-1!==a&&C(e,t),\"dedent\"===z&&R(e,t)||-1!==(a=\"])}\".indexOf(i))&&R(e,t)?r:n}return e.registerHelper(\"hintWords\",\"vb\",l.concat(h).concat(m).concat(f).concat(b).concat(g)),{electricChars:\"dDpPtTfFeE \",startState:function(){return{tokenize:F,lastToken:null,currentIndent:0,nextLineIndent:0,doInCurrentLine:!1}},token:function(e,t){e.sol()&&(t.currentIndent+=t.nextLineIndent,t.nextLineIndent=0,t.doInCurrentLine=0);var n=O(e,t);return t.lastToken={style:n,content:e.current()},n},indent:function(e,n){var r=n.replace(/^\\s+|\\s+$/g,\"\");return r.match(I)||r.match(E)||r.match(x)?t.indentUnit*(e.currentIndent-1):e.currentIndent<0?0:e.currentIndent*t.indentUnit},lineComment:\"'\"}})),e.defineMIME(\"text/x-vb\",\"vb\")}(n(108))}}]);","name":"static/js/113.190fb5ff.chunk.js","map":{"version":3,"sources":["static/js/113.190fb5ff.chunk.js"],"names":["this","push","module","exports","__webpack_require__","CodeMirror","defineMode","conf","parserConf","ERRORCLASS","wordRegexp","words","RegExp","join","singleOperators","singleDelimiters","doubleOperators","doubleDelimiters","tripleDelimiters","identifiers","openingKeywords","middleKeywords","endKeywords","operatorKeywords","wordOperators","commonKeywords","commontypes","keywords","types","stringPrefixes","opening","middle","closing","doubleClosing","doOpening","indentInfo","indent","_stream","state","currentIndent","dedent","tokenBase","stream","eatSpace","peek","skipToEnd","match","floatLiteral","eat","intLiteral","tokenize","tokenStringFactory","current","doInCurrentLine","next","delimiter","singleline","length","OUTCLASS","eol","eatWhile","singleLineStringErrors","tokenLexer","style","delimiter_index","indexOf","registerHelper","concat","electricChars","startState","lastToken","nextLineIndent","token","sol","content","textAfter","trueText","replace","indentUnit","lineComment","defineMIME","mod"],"mappings":"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"},"input":"(this[\"webpackJsonpfrontend\"] = this[\"webpackJsonpfrontend\"] || []).push([[113],{\n\n/***/ 394:\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(108));else {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"vb\", function (conf, parserConf) {\n    var ERRORCLASS = 'error';\n\n    function wordRegexp(words) {\n      return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n    }\n\n    var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/%&\\\\\\\\|\\\\^~<>!]\");\n    var singleDelimiters = new RegExp('^[\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}@,:`=;\\\\.]');\n    var doubleOperators = new RegExp(\"^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\\\*\\\\*))\");\n    var doubleDelimiters = new RegExp(\"^((\\\\+=)|(\\\\-=)|(\\\\*=)|(%=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\n    var tripleDelimiters = new RegExp(\"^((//=)|(>>=)|(<<=)|(\\\\*\\\\*=))\");\n    var identifiers = new RegExp(\"^[_A-Za-z][_A-Za-z0-9]*\");\n    var openingKeywords = ['class', 'module', 'sub', 'enum', 'select', 'while', 'if', 'function', 'get', 'set', 'property', 'try', 'structure', 'synclock', 'using', 'with'];\n    var middleKeywords = ['else', 'elseif', 'case', 'catch', 'finally'];\n    var endKeywords = ['next', 'loop'];\n    var operatorKeywords = ['and', \"andalso\", 'or', 'orelse', 'xor', 'in', 'not', 'is', 'isnot', 'like'];\n    var wordOperators = wordRegexp(operatorKeywords);\n    var commonKeywords = [\"#const\", \"#else\", \"#elseif\", \"#end\", \"#if\", \"#region\", \"addhandler\", \"addressof\", \"alias\", \"as\", \"byref\", \"byval\", \"cbool\", \"cbyte\", \"cchar\", \"cdate\", \"cdbl\", \"cdec\", \"cint\", \"clng\", \"cobj\", \"compare\", \"const\", \"continue\", \"csbyte\", \"cshort\", \"csng\", \"cstr\", \"cuint\", \"culng\", \"cushort\", \"declare\", \"default\", \"delegate\", \"dim\", \"directcast\", \"each\", \"erase\", \"error\", \"event\", \"exit\", \"explicit\", \"false\", \"for\", \"friend\", \"gettype\", \"goto\", \"handles\", \"implements\", \"imports\", \"infer\", \"inherits\", \"interface\", \"isfalse\", \"istrue\", \"lib\", \"me\", \"mod\", \"mustinherit\", \"mustoverride\", \"my\", \"mybase\", \"myclass\", \"namespace\", \"narrowing\", \"new\", \"nothing\", \"notinheritable\", \"notoverridable\", \"of\", \"off\", \"on\", \"operator\", \"option\", \"optional\", \"out\", \"overloads\", \"overridable\", \"overrides\", \"paramarray\", \"partial\", \"private\", \"protected\", \"public\", \"raiseevent\", \"readonly\", \"redim\", \"removehandler\", \"resume\", \"return\", \"shadows\", \"shared\", \"static\", \"step\", \"stop\", \"strict\", \"then\", \"throw\", \"to\", \"true\", \"trycast\", \"typeof\", \"until\", \"until\", \"when\", \"widening\", \"withevents\", \"writeonly\"];\n    var commontypes = ['object', 'boolean', 'char', 'string', 'byte', 'sbyte', 'short', 'ushort', 'int16', 'uint16', 'integer', 'uinteger', 'int32', 'uint32', 'long', 'ulong', 'int64', 'uint64', 'decimal', 'single', 'double', 'float', 'date', 'datetime', 'intptr', 'uintptr'];\n    var keywords = wordRegexp(commonKeywords);\n    var types = wordRegexp(commontypes);\n    var stringPrefixes = '\"';\n    var opening = wordRegexp(openingKeywords);\n    var middle = wordRegexp(middleKeywords);\n    var closing = wordRegexp(endKeywords);\n    var doubleClosing = wordRegexp(['end']);\n    var doOpening = wordRegexp(['do']);\n    var indentInfo = null;\n    CodeMirror.registerHelper(\"hintWords\", \"vb\", openingKeywords.concat(middleKeywords).concat(endKeywords).concat(operatorKeywords).concat(commonKeywords).concat(commontypes));\n\n    function indent(_stream, state) {\n      state.currentIndent++;\n    }\n\n    function dedent(_stream, state) {\n      state.currentIndent--;\n    } // tokenizers\n\n\n    function tokenBase(stream, state) {\n      if (stream.eatSpace()) {\n        return null;\n      }\n\n      var ch = stream.peek(); // Handle Comments\n\n      if (ch === \"'\") {\n        stream.skipToEnd();\n        return 'comment';\n      } // Handle Number Literals\n\n\n      if (stream.match(/^((&H)|(&O))?[0-9\\.a-f]/i, false)) {\n        var floatLiteral = false; // Floats\n\n        if (stream.match(/^\\d*\\.\\d+F?/i)) {\n          floatLiteral = true;\n        } else if (stream.match(/^\\d+\\.\\d*F?/)) {\n          floatLiteral = true;\n        } else if (stream.match(/^\\.\\d+F?/)) {\n          floatLiteral = true;\n        }\n\n        if (floatLiteral) {\n          // Float literals may be \"imaginary\"\n          stream.eat(/J/i);\n          return 'number';\n        } // Integers\n\n\n        var intLiteral = false; // Hex\n\n        if (stream.match(/^&H[0-9a-f]+/i)) {\n          intLiteral = true;\n        } // Octal\n        else if (stream.match(/^&O[0-7]+/i)) {\n          intLiteral = true;\n        } // Decimal\n        else if (stream.match(/^[1-9]\\d*F?/)) {\n          // Decimal literals may be \"imaginary\"\n          stream.eat(/J/i); // TODO - Can you have imaginary longs?\n\n          intLiteral = true;\n        } // Zero by itself with no other piece of number.\n        else if (stream.match(/^0(?![\\dx])/i)) {\n          intLiteral = true;\n        }\n\n        if (intLiteral) {\n          // Integer literals may be \"long\"\n          stream.eat(/L/i);\n          return 'number';\n        }\n      } // Handle Strings\n\n\n      if (stream.match(stringPrefixes)) {\n        state.tokenize = tokenStringFactory(stream.current());\n        return state.tokenize(stream, state);\n      } // Handle operators and Delimiters\n\n\n      if (stream.match(tripleDelimiters) || stream.match(doubleDelimiters)) {\n        return null;\n      }\n\n      if (stream.match(doubleOperators) || stream.match(singleOperators) || stream.match(wordOperators)) {\n        return 'operator';\n      }\n\n      if (stream.match(singleDelimiters)) {\n        return null;\n      }\n\n      if (stream.match(doOpening)) {\n        indent(stream, state);\n        state.doInCurrentLine = true;\n        return 'keyword';\n      }\n\n      if (stream.match(opening)) {\n        if (!state.doInCurrentLine) indent(stream, state);else state.doInCurrentLine = false;\n        return 'keyword';\n      }\n\n      if (stream.match(middle)) {\n        return 'keyword';\n      }\n\n      if (stream.match(doubleClosing)) {\n        dedent(stream, state);\n        dedent(stream, state);\n        return 'keyword';\n      }\n\n      if (stream.match(closing)) {\n        dedent(stream, state);\n        return 'keyword';\n      }\n\n      if (stream.match(types)) {\n        return 'keyword';\n      }\n\n      if (stream.match(keywords)) {\n        return 'keyword';\n      }\n\n      if (stream.match(identifiers)) {\n        return 'variable';\n      } // Handle non-detected items\n\n\n      stream.next();\n      return ERRORCLASS;\n    }\n\n    function tokenStringFactory(delimiter) {\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = 'string';\n      return function (stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"]/);\n\n          if (stream.match(delimiter)) {\n            state.tokenize = tokenBase;\n            return OUTCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n\n        if (singleline) {\n          if (parserConf.singleLineStringErrors) {\n            return ERRORCLASS;\n          } else {\n            state.tokenize = tokenBase;\n          }\n        }\n\n        return OUTCLASS;\n      };\n    }\n\n    function tokenLexer(stream, state) {\n      var style = state.tokenize(stream, state);\n      var current = stream.current(); // Handle '.' connected identifiers\n\n      if (current === '.') {\n        style = state.tokenize(stream, state);\n\n        if (style === 'variable') {\n          return 'variable';\n        } else {\n          return ERRORCLASS;\n        }\n      }\n\n      var delimiter_index = '[({'.indexOf(current);\n\n      if (delimiter_index !== -1) {\n        indent(stream, state);\n      }\n\n      if (indentInfo === 'dedent') {\n        if (dedent(stream, state)) {\n          return ERRORCLASS;\n        }\n      }\n\n      delimiter_index = '])}'.indexOf(current);\n\n      if (delimiter_index !== -1) {\n        if (dedent(stream, state)) {\n          return ERRORCLASS;\n        }\n      }\n\n      return style;\n    }\n\n    var external = {\n      electricChars: \"dDpPtTfFeE \",\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          lastToken: null,\n          currentIndent: 0,\n          nextLineIndent: 0,\n          doInCurrentLine: false\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          state.currentIndent += state.nextLineIndent;\n          state.nextLineIndent = 0;\n          state.doInCurrentLine = 0;\n        }\n\n        var style = tokenLexer(stream, state);\n        state.lastToken = {\n          style: style,\n          content: stream.current()\n        };\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        var trueText = textAfter.replace(/^\\s+|\\s+$/g, '');\n        if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return conf.indentUnit * (state.currentIndent - 1);\n        if (state.currentIndent < 0) return 0;\n        return state.currentIndent * conf.indentUnit;\n      },\n      lineComment: \"'\"\n    };\n    return external;\n  });\n  CodeMirror.defineMIME(\"text/x-vb\", \"vb\");\n});\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/mnt/Datengrab/python/Zero-tier/frontend/node_modules/codemirror/mode/vb/vb.js"],"names":["mod","require","CodeMirror","defineMode","conf","parserConf","ERRORCLASS","wordRegexp","words","RegExp","join","singleOperators","singleDelimiters","doubleOperators","doubleDelimiters","tripleDelimiters","identifiers","openingKeywords","middleKeywords","endKeywords","operatorKeywords","wordOperators","commonKeywords","commontypes","keywords","types","stringPrefixes","opening","middle","closing","doubleClosing","doOpening","indentInfo","registerHelper","concat","indent","_stream","state","currentIndent","dedent","tokenBase","stream","eatSpace","ch","peek","skipToEnd","match","floatLiteral","eat","intLiteral","tokenize","tokenStringFactory","current","doInCurrentLine","next","delimiter","singleline","length","OUTCLASS","eol","eatWhile","singleLineStringErrors","tokenLexer","style","delimiter_index","indexOf","external","electricChars","startState","lastToken","nextLineIndent","token","sol","content","textAfter","trueText","replace","indentUnit","lineComment","defineMIME"],"mappings":"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","file":"x","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"vb\", function(conf, parserConf) {\n    var ERRORCLASS = 'error';\n\n    function wordRegexp(words) {\n        return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n    }\n\n    var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/%&\\\\\\\\|\\\\^~<>!]\");\n    var singleDelimiters = new RegExp('^[\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}@,:`=;\\\\.]');\n    var doubleOperators = new RegExp(\"^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\\\*\\\\*))\");\n    var doubleDelimiters = new RegExp(\"^((\\\\+=)|(\\\\-=)|(\\\\*=)|(%=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\n    var tripleDelimiters = new RegExp(\"^((//=)|(>>=)|(<<=)|(\\\\*\\\\*=))\");\n    var identifiers = new RegExp(\"^[_A-Za-z][_A-Za-z0-9]*\");\n\n    var openingKeywords = ['class','module', 'sub','enum','select','while','if','function', 'get','set','property', 'try', 'structure', 'synclock', 'using', 'with'];\n    var middleKeywords = ['else','elseif','case', 'catch', 'finally'];\n    var endKeywords = ['next','loop'];\n\n    var operatorKeywords = ['and', \"andalso\", 'or', 'orelse', 'xor', 'in', 'not', 'is', 'isnot', 'like'];\n    var wordOperators = wordRegexp(operatorKeywords);\n\n    var commonKeywords = [\"#const\", \"#else\", \"#elseif\", \"#end\", \"#if\", \"#region\", \"addhandler\", \"addressof\", \"alias\", \"as\", \"byref\", \"byval\", \"cbool\", \"cbyte\", \"cchar\", \"cdate\", \"cdbl\", \"cdec\", \"cint\", \"clng\", \"cobj\", \"compare\", \"const\", \"continue\", \"csbyte\", \"cshort\", \"csng\", \"cstr\", \"cuint\", \"culng\", \"cushort\", \"declare\", \"default\", \"delegate\", \"dim\", \"directcast\", \"each\", \"erase\", \"error\", \"event\", \"exit\", \"explicit\", \"false\", \"for\", \"friend\", \"gettype\", \"goto\", \"handles\", \"implements\", \"imports\", \"infer\", \"inherits\", \"interface\", \"isfalse\", \"istrue\", \"lib\", \"me\", \"mod\", \"mustinherit\", \"mustoverride\", \"my\", \"mybase\", \"myclass\", \"namespace\", \"narrowing\", \"new\", \"nothing\", \"notinheritable\", \"notoverridable\", \"of\", \"off\", \"on\", \"operator\", \"option\", \"optional\", \"out\", \"overloads\", \"overridable\", \"overrides\", \"paramarray\", \"partial\", \"private\", \"protected\", \"public\", \"raiseevent\", \"readonly\", \"redim\", \"removehandler\", \"resume\", \"return\", \"shadows\", \"shared\", \"static\", \"step\", \"stop\", \"strict\", \"then\", \"throw\", \"to\", \"true\", \"trycast\", \"typeof\", \"until\", \"until\", \"when\", \"widening\", \"withevents\", \"writeonly\"];\n\n    var commontypes = ['object', 'boolean', 'char', 'string', 'byte', 'sbyte', 'short', 'ushort', 'int16', 'uint16', 'integer', 'uinteger', 'int32', 'uint32', 'long', 'ulong', 'int64', 'uint64', 'decimal', 'single', 'double', 'float', 'date', 'datetime', 'intptr', 'uintptr'];\n\n    var keywords = wordRegexp(commonKeywords);\n    var types = wordRegexp(commontypes);\n    var stringPrefixes = '\"';\n\n    var opening = wordRegexp(openingKeywords);\n    var middle = wordRegexp(middleKeywords);\n    var closing = wordRegexp(endKeywords);\n    var doubleClosing = wordRegexp(['end']);\n    var doOpening = wordRegexp(['do']);\n\n    var indentInfo = null;\n\n    CodeMirror.registerHelper(\"hintWords\", \"vb\", openingKeywords.concat(middleKeywords).concat(endKeywords)\n                                .concat(operatorKeywords).concat(commonKeywords).concat(commontypes));\n\n    function indent(_stream, state) {\n      state.currentIndent++;\n    }\n\n    function dedent(_stream, state) {\n      state.currentIndent--;\n    }\n    // tokenizers\n    function tokenBase(stream, state) {\n        if (stream.eatSpace()) {\n            return null;\n        }\n\n        var ch = stream.peek();\n\n        // Handle Comments\n        if (ch === \"'\") {\n            stream.skipToEnd();\n            return 'comment';\n        }\n\n\n        // Handle Number Literals\n        if (stream.match(/^((&H)|(&O))?[0-9\\.a-f]/i, false)) {\n            var floatLiteral = false;\n            // Floats\n            if (stream.match(/^\\d*\\.\\d+F?/i)) { floatLiteral = true; }\n            else if (stream.match(/^\\d+\\.\\d*F?/)) { floatLiteral = true; }\n            else if (stream.match(/^\\.\\d+F?/)) { floatLiteral = true; }\n\n            if (floatLiteral) {\n                // Float literals may be \"imaginary\"\n                stream.eat(/J/i);\n                return 'number';\n            }\n            // Integers\n            var intLiteral = false;\n            // Hex\n            if (stream.match(/^&H[0-9a-f]+/i)) { intLiteral = true; }\n            // Octal\n            else if (stream.match(/^&O[0-7]+/i)) { intLiteral = true; }\n            // Decimal\n            else if (stream.match(/^[1-9]\\d*F?/)) {\n                // Decimal literals may be \"imaginary\"\n                stream.eat(/J/i);\n                // TODO - Can you have imaginary longs?\n                intLiteral = true;\n            }\n            // Zero by itself with no other piece of number.\n            else if (stream.match(/^0(?![\\dx])/i)) { intLiteral = true; }\n            if (intLiteral) {\n                // Integer literals may be \"long\"\n                stream.eat(/L/i);\n                return 'number';\n            }\n        }\n\n        // Handle Strings\n        if (stream.match(stringPrefixes)) {\n            state.tokenize = tokenStringFactory(stream.current());\n            return state.tokenize(stream, state);\n        }\n\n        // Handle operators and Delimiters\n        if (stream.match(tripleDelimiters) || stream.match(doubleDelimiters)) {\n            return null;\n        }\n        if (stream.match(doubleOperators)\n            || stream.match(singleOperators)\n            || stream.match(wordOperators)) {\n            return 'operator';\n        }\n        if (stream.match(singleDelimiters)) {\n            return null;\n        }\n        if (stream.match(doOpening)) {\n            indent(stream,state);\n            state.doInCurrentLine = true;\n            return 'keyword';\n        }\n        if (stream.match(opening)) {\n            if (! state.doInCurrentLine)\n              indent(stream,state);\n            else\n              state.doInCurrentLine = false;\n            return 'keyword';\n        }\n        if (stream.match(middle)) {\n            return 'keyword';\n        }\n\n        if (stream.match(doubleClosing)) {\n            dedent(stream,state);\n            dedent(stream,state);\n            return 'keyword';\n        }\n        if (stream.match(closing)) {\n            dedent(stream,state);\n            return 'keyword';\n        }\n\n        if (stream.match(types)) {\n            return 'keyword';\n        }\n\n        if (stream.match(keywords)) {\n            return 'keyword';\n        }\n\n        if (stream.match(identifiers)) {\n            return 'variable';\n        }\n\n        // Handle non-detected items\n        stream.next();\n        return ERRORCLASS;\n    }\n\n    function tokenStringFactory(delimiter) {\n        var singleline = delimiter.length == 1;\n        var OUTCLASS = 'string';\n\n        return function(stream, state) {\n            while (!stream.eol()) {\n                stream.eatWhile(/[^'\"]/);\n                if (stream.match(delimiter)) {\n                    state.tokenize = tokenBase;\n                    return OUTCLASS;\n                } else {\n                    stream.eat(/['\"]/);\n                }\n            }\n            if (singleline) {\n                if (parserConf.singleLineStringErrors) {\n                    return ERRORCLASS;\n                } else {\n                    state.tokenize = tokenBase;\n                }\n            }\n            return OUTCLASS;\n        };\n    }\n\n\n    function tokenLexer(stream, state) {\n        var style = state.tokenize(stream, state);\n        var current = stream.current();\n\n        // Handle '.' connected identifiers\n        if (current === '.') {\n            style = state.tokenize(stream, state);\n            if (style === 'variable') {\n                return 'variable';\n            } else {\n                return ERRORCLASS;\n            }\n        }\n\n\n        var delimiter_index = '[({'.indexOf(current);\n        if (delimiter_index !== -1) {\n            indent(stream, state );\n        }\n        if (indentInfo === 'dedent') {\n            if (dedent(stream, state)) {\n                return ERRORCLASS;\n            }\n        }\n        delimiter_index = '])}'.indexOf(current);\n        if (delimiter_index !== -1) {\n            if (dedent(stream, state)) {\n                return ERRORCLASS;\n            }\n        }\n\n        return style;\n    }\n\n    var external = {\n        electricChars:\"dDpPtTfFeE \",\n        startState: function() {\n            return {\n              tokenize: tokenBase,\n              lastToken: null,\n              currentIndent: 0,\n              nextLineIndent: 0,\n              doInCurrentLine: false\n\n\n          };\n        },\n\n        token: function(stream, state) {\n            if (stream.sol()) {\n              state.currentIndent += state.nextLineIndent;\n              state.nextLineIndent = 0;\n              state.doInCurrentLine = 0;\n            }\n            var style = tokenLexer(stream, state);\n\n            state.lastToken = {style:style, content: stream.current()};\n\n\n\n            return style;\n        },\n\n        indent: function(state, textAfter) {\n            var trueText = textAfter.replace(/^\\s+|\\s+$/g, '') ;\n            if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return conf.indentUnit*(state.currentIndent-1);\n            if(state.currentIndent < 0) return 0;\n            return state.currentIndent * conf.indentUnit;\n        },\n\n        lineComment: \"'\"\n    };\n    return external;\n});\n\nCodeMirror.defineMIME(\"text/x-vb\", \"vb\");\n\n});\n"]}}