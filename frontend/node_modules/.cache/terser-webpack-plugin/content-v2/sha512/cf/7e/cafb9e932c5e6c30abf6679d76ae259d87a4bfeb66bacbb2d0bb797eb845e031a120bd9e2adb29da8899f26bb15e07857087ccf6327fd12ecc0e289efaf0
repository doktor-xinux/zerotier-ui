{"code":"(this.webpackJsonpfrontend=this.webpackJsonpfrontend||[]).push([[84],{363:function(e,t,n){!function(e){\"use strict\";function t(e){return new RegExp(\"^((\"+e.join(\")|(\")+\"))\\\\b\",\"i\")}var n=[\"package\",\"message\",\"import\",\"syntax\",\"required\",\"optional\",\"repeated\",\"reserved\",\"default\",\"extensions\",\"packed\",\"bool\",\"bytes\",\"double\",\"enum\",\"float\",\"string\",\"int32\",\"int64\",\"uint32\",\"uint64\",\"sint32\",\"sint64\",\"fixed32\",\"fixed64\",\"sfixed32\",\"sfixed64\",\"option\",\"service\",\"rpc\",\"returns\"],r=t(n);e.registerHelper(\"hintWords\",\"protobuf\",n);var i=new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");function o(e){if(e.eatSpace())return null;if(e.match(\"//\"))return e.skipToEnd(),\"comment\";if(e.match(/^[0-9\\.+-]/,!1)){if(e.match(/^[+-]?0x[0-9a-fA-F]+/))return\"number\";if(e.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?/))return\"number\";if(e.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?/))return\"number\"}return e.match(/^\"([^\"]|(\"\"))*\"/)||e.match(/^'([^']|(''))*'/)?\"string\":e.match(r)?\"keyword\":e.match(i)?\"variable\":(e.next(),null)}e.defineMode(\"protobuf\",(function(){return{token:o,fold:\"brace\"}})),e.defineMIME(\"text/x-protobuf\",\"protobuf\")}(n(108))}}]);","name":"static/js/84.e93a40eb.chunk.js","map":{"version":3,"sources":["static/js/84.e93a40eb.chunk.js"],"names":["this","push","module","exports","__webpack_require__","CodeMirror","wordRegexp","words","RegExp","join","keywordArray","keywords","registerHelper","identifiers","tokenBase","stream","eatSpace","match","skipToEnd","next","defineMode","token","fold","defineMIME","mod"],"mappings":"CAACA,KAA2B,qBAAIA,KAA2B,sBAAK,IAAIC,KAAK,CAAC,CAAC,IAAI,CAEzE,IACA,SAAUC,EAAQC,EAASC,IAO9B,SAAUC,GACX,aAEA,SAASC,EAAWC,GAClB,OAAO,IAAIC,OAAO,MAAQD,EAAME,KAAK,OAAS,QAAS,KAIzD,IAAIC,EAAe,CAAC,UAAW,UAAW,SAAU,SAAU,WAAY,WAAY,WAAY,WAAY,UAAW,aAAc,SAAU,OAAQ,QAAS,SAAU,OAAQ,QAAS,SAAU,QAAS,QAAS,SAAU,SAAU,SAAU,SAAU,UAAW,UAAW,WAAY,WAAY,SAAU,UAAW,MAAO,WACvUC,EAAWL,EAAWI,GAC1BL,EAAWO,eAAe,YAAa,WAAYF,GACnD,IAAIG,EAAc,IAAIL,OAAO,iDAE7B,SAASM,EAAUC,GAEjB,GAAIA,EAAOC,WAAY,OAAO,KAE9B,GAAID,EAAOE,MAAM,MAEf,OADAF,EAAOG,YACA,UAIT,GAAIH,EAAOE,MAAM,cAAc,GAAQ,CACrC,GAAIF,EAAOE,MAAM,wBAAyB,MAAO,SACjD,GAAIF,EAAOE,MAAM,mCAAoC,MAAO,SAC5D,GAAIF,EAAOE,MAAM,8BAA+B,MAAO,SAIzD,OAAIF,EAAOE,MAAM,oBAIbF,EAAOE,MAAM,mBAHR,SAQLF,EAAOE,MAAMN,GACR,UAGLI,EAAOE,MAAMJ,GACR,YAKTE,EAAOI,OACA,MAITd,EAAWe,WAAW,YAAY,WAChC,MAAO,CACLC,MAAOP,EACPQ,KAAM,YAGVjB,EAAWkB,WAAW,kBAAmB,YA7DvCC,CAAIpB,EAAoB"},"input":"(this[\"webpackJsonpfrontend\"] = this[\"webpackJsonpfrontend\"] || []).push([[84],{\n\n/***/ 363:\n/***/ (function(module, exports, __webpack_require__) {\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (true) // CommonJS\n    mod(__webpack_require__(108));else {}\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n  }\n\n  ;\n  var keywordArray = [\"package\", \"message\", \"import\", \"syntax\", \"required\", \"optional\", \"repeated\", \"reserved\", \"default\", \"extensions\", \"packed\", \"bool\", \"bytes\", \"double\", \"enum\", \"float\", \"string\", \"int32\", \"int64\", \"uint32\", \"uint64\", \"sint32\", \"sint64\", \"fixed32\", \"fixed64\", \"sfixed32\", \"sfixed64\", \"option\", \"service\", \"rpc\", \"returns\"];\n  var keywords = wordRegexp(keywordArray);\n  CodeMirror.registerHelper(\"hintWords\", \"protobuf\", keywordArray);\n  var identifiers = new RegExp(\"^[_A-Za-z\\xA1-\\uFFFF][_A-Za-z0-9\\xA1-\\uFFFF]*\");\n\n  function tokenBase(stream) {\n    // whitespaces\n    if (stream.eatSpace()) return null; // Handle one line Comments\n\n    if (stream.match(\"//\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    } // Handle Number Literals\n\n\n    if (stream.match(/^[0-9\\.+-]/, false)) {\n      if (stream.match(/^[+-]?0x[0-9a-fA-F]+/)) return \"number\";\n      if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?/)) return \"number\";\n      if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?/)) return \"number\";\n    } // Handle Strings\n\n\n    if (stream.match(/^\"([^\"]|(\"\"))*\"/)) {\n      return \"string\";\n    }\n\n    if (stream.match(/^'([^']|(''))*'/)) {\n      return \"string\";\n    } // Handle words\n\n\n    if (stream.match(keywords)) {\n      return \"keyword\";\n    }\n\n    if (stream.match(identifiers)) {\n      return \"variable\";\n    }\n\n    ; // Handle non-detected items\n\n    stream.next();\n    return null;\n  }\n\n  ;\n  CodeMirror.defineMode(\"protobuf\", function () {\n    return {\n      token: tokenBase,\n      fold: \"brace\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-protobuf\", \"protobuf\");\n});\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/mnt/Datengrab/python/Zero-tier/frontend/node_modules/codemirror/mode/protobuf/protobuf.js"],"names":["mod","require","CodeMirror","wordRegexp","words","RegExp","join","keywordArray","keywords","registerHelper","identifiers","tokenBase","stream","eatSpace","match","skipToEnd","next","defineMode","token","fold","defineMIME"],"mappings":";;;;;AAAA;AACA;AAEA,CAAC,UAASA,GAAT,EAAc;EACb,IAAI,IAAJ,EAA6D;IAC3DA,GAAG,CAACC,mBAAO,CAAC,GAAD,CAAR,CAAH,CADF,KAEK,EAGH;AACH,CAPD,EAOG,UAASC,UAAT,EAAqB;EACtB;;EAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;IACzB,OAAO,IAAIC,MAAJ,CAAW,QAAQD,KAAK,CAACE,IAAN,CAAW,KAAX,CAAR,GAA4B,OAAvC,EAAgD,GAAhD,CAAP;EACD;;EAAA;EAED,IAAIC,YAAY,GAAG,CACjB,SADiB,EACN,SADM,EACK,QADL,EACe,QADf,EAEjB,UAFiB,EAEL,UAFK,EAEO,UAFP,EAEmB,UAFnB,EAE+B,SAF/B,EAE0C,YAF1C,EAEwD,QAFxD,EAGjB,MAHiB,EAGT,OAHS,EAGA,QAHA,EAGU,MAHV,EAGkB,OAHlB,EAG2B,QAH3B,EAIjB,OAJiB,EAIR,OAJQ,EAIC,QAJD,EAIW,QAJX,EAIqB,QAJrB,EAI+B,QAJ/B,EAIyC,SAJzC,EAIoD,SAJpD,EAI+D,UAJ/D,EAI2E,UAJ3E,EAKjB,QALiB,EAKP,SALO,EAKI,KALJ,EAKW,SALX,CAAnB;EAOA,IAAIC,QAAQ,GAAGL,UAAU,CAACI,YAAD,CAAzB;EAEAL,UAAU,CAACO,cAAX,CAA0B,WAA1B,EAAuC,UAAvC,EAAmDF,YAAnD;EAEA,IAAIG,WAAW,GAAG,IAAIL,MAAJ,CAAW,+CAAX,CAAlB;;EAEA,SAASM,SAAT,CAAmBC,MAAnB,EAA2B;IACzB;IACA,IAAIA,MAAM,CAACC,QAAP,EAAJ,EAAuB,OAAO,IAAP,CAFE,CAIzB;;IACA,IAAID,MAAM,CAACE,KAAP,CAAa,IAAb,CAAJ,EAAwB;MACtBF,MAAM,CAACG,SAAP;MACA,OAAO,SAAP;IACD,CARwB,CAUzB;;;IACA,IAAIH,MAAM,CAACE,KAAP,CAAa,YAAb,EAA2B,KAA3B,CAAJ,EAAuC;MACrC,IAAIF,MAAM,CAACE,KAAP,CAAa,sBAAb,CAAJ,EACE,OAAO,QAAP;MACF,IAAIF,MAAM,CAACE,KAAP,CAAa,iCAAb,CAAJ,EACE,OAAO,QAAP;MACF,IAAIF,MAAM,CAACE,KAAP,CAAa,4BAAb,CAAJ,EACE,OAAO,QAAP;IACH,CAlBwB,CAoBzB;;;IACA,IAAIF,MAAM,CAACE,KAAP,CAAa,iBAAb,CAAJ,EAAqC;MAAE,OAAO,QAAP;IAAkB;;IACzD,IAAIF,MAAM,CAACE,KAAP,CAAa,iBAAb,CAAJ,EAAqC;MAAE,OAAO,QAAP;IAAkB,CAtBhC,CAwBzB;;;IACA,IAAIF,MAAM,CAACE,KAAP,CAAaN,QAAb,CAAJ,EAA4B;MAAE,OAAO,SAAP;IAAmB;;IACjD,IAAII,MAAM,CAACE,KAAP,CAAaJ,WAAb,CAAJ,EAA+B;MAAE,OAAO,UAAP;IAAoB;;IAAC,CA1B7B,CA4BzB;;IACAE,MAAM,CAACI,IAAP;IACA,OAAO,IAAP;EACD;;EAAA;EAEDd,UAAU,CAACe,UAAX,CAAsB,UAAtB,EAAkC,YAAW;IAC3C,OAAO;MACLC,KAAK,EAAEP,SADF;MAELQ,IAAI,EAAE;IAFD,CAAP;EAID,CALD;EAOAjB,UAAU,CAACkB,UAAX,CAAsB,iBAAtB,EAAyC,UAAzC;AACD,CApED,E","file":"x","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n  };\n\n  var keywordArray = [\n    \"package\", \"message\", \"import\", \"syntax\",\n    \"required\", \"optional\", \"repeated\", \"reserved\", \"default\", \"extensions\", \"packed\",\n    \"bool\", \"bytes\", \"double\", \"enum\", \"float\", \"string\",\n    \"int32\", \"int64\", \"uint32\", \"uint64\", \"sint32\", \"sint64\", \"fixed32\", \"fixed64\", \"sfixed32\", \"sfixed64\",\n    \"option\", \"service\", \"rpc\", \"returns\"\n  ];\n  var keywords = wordRegexp(keywordArray);\n\n  CodeMirror.registerHelper(\"hintWords\", \"protobuf\", keywordArray);\n\n  var identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\n\n  function tokenBase(stream) {\n    // whitespaces\n    if (stream.eatSpace()) return null;\n\n    // Handle one line Comments\n    if (stream.match(\"//\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    // Handle Number Literals\n    if (stream.match(/^[0-9\\.+-]/, false)) {\n      if (stream.match(/^[+-]?0x[0-9a-fA-F]+/))\n        return \"number\";\n      if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?/))\n        return \"number\";\n      if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?/))\n        return \"number\";\n    }\n\n    // Handle Strings\n    if (stream.match(/^\"([^\"]|(\"\"))*\"/)) { return \"string\"; }\n    if (stream.match(/^'([^']|(''))*'/)) { return \"string\"; }\n\n    // Handle words\n    if (stream.match(keywords)) { return \"keyword\"; }\n    if (stream.match(identifiers)) { return \"variable\"; } ;\n\n    // Handle non-detected items\n    stream.next();\n    return null;\n  };\n\n  CodeMirror.defineMode(\"protobuf\", function() {\n    return {\n      token: tokenBase,\n      fold: \"brace\"\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/x-protobuf\", \"protobuf\");\n});\n"]}}