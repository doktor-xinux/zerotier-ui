{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"), require(\"../ruby/ruby\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\", \"../ruby/ruby\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\"; // full haml mode. This handled embedded ruby and html fragments too\n\n  CodeMirror.defineMode(\"haml\", function (config) {\n    var htmlMode = CodeMirror.getMode(config, {\n      name: \"htmlmixed\"\n    });\n    var rubyMode = CodeMirror.getMode(config, \"ruby\");\n\n    function rubyInQuote(endQuote) {\n      return function (stream, state) {\n        var ch = stream.peek();\n\n        if (ch == endQuote && state.rubyState.tokenize.length == 1) {\n          // step out of ruby context as it seems to complete processing all the braces\n          stream.next();\n          state.tokenize = html;\n          return \"closeAttributeTag\";\n        } else {\n          return ruby(stream, state);\n        }\n      };\n    }\n\n    function ruby(stream, state) {\n      if (stream.match(\"-#\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      return rubyMode.token(stream, state.rubyState);\n    }\n\n    function html(stream, state) {\n      var ch = stream.peek(); // handle haml declarations. All declarations that cant be handled here\n      // will be passed to html mode\n\n      if (state.previousToken.style == \"comment\") {\n        if (state.indented > state.previousToken.indented) {\n          stream.skipToEnd();\n          return \"commentLine\";\n        }\n      }\n\n      if (state.startOfLine) {\n        if (ch == \"!\" && stream.match(\"!!\")) {\n          stream.skipToEnd();\n          return \"tag\";\n        } else if (stream.match(/^%[\\w:#\\.]+=/)) {\n          state.tokenize = ruby;\n          return \"hamlTag\";\n        } else if (stream.match(/^%[\\w:]+/)) {\n          return \"hamlTag\";\n        } else if (ch == \"/\") {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (state.startOfLine || state.previousToken.style == \"hamlTag\") {\n        if (ch == \"#\" || ch == \".\") {\n          stream.match(/[\\w-#\\.]*/);\n          return \"hamlAttribute\";\n        }\n      } // do not handle --> as valid ruby, make it HTML close comment instead\n\n\n      if (state.startOfLine && !stream.match(\"-->\", false) && (ch == \"=\" || ch == \"-\")) {\n        state.tokenize = ruby;\n        return state.tokenize(stream, state);\n      }\n\n      if (state.previousToken.style == \"hamlTag\" || state.previousToken.style == \"closeAttributeTag\" || state.previousToken.style == \"hamlAttribute\") {\n        if (ch == \"(\") {\n          state.tokenize = rubyInQuote(\")\");\n          return state.tokenize(stream, state);\n        } else if (ch == \"{\") {\n          if (!stream.match(/^\\{%.*/)) {\n            state.tokenize = rubyInQuote(\"}\");\n            return state.tokenize(stream, state);\n          }\n        }\n      }\n\n      return htmlMode.token(stream, state.htmlState);\n    }\n\n    return {\n      // default to html mode\n      startState: function startState() {\n        var htmlState = CodeMirror.startState(htmlMode);\n        var rubyState = CodeMirror.startState(rubyMode);\n        return {\n          htmlState: htmlState,\n          rubyState: rubyState,\n          indented: 0,\n          previousToken: {\n            style: null,\n            indented: 0\n          },\n          tokenize: html\n        };\n      },\n      copyState: function copyState(state) {\n        return {\n          htmlState: CodeMirror.copyState(htmlMode, state.htmlState),\n          rubyState: CodeMirror.copyState(rubyMode, state.rubyState),\n          indented: state.indented,\n          previousToken: state.previousToken,\n          tokenize: state.tokenize\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        state.startOfLine = false; // dont record comment line as we only want to measure comment line with\n        // the opening comment block\n\n        if (style && style != \"commentLine\") {\n          state.previousToken = {\n            style: style,\n            indented: state.indented\n          };\n        } // if current state is ruby and the previous token is not `,` reset the\n        // tokenize to html\n\n\n        if (stream.eol() && state.tokenize == ruby) {\n          stream.backUp(1);\n          var ch = stream.peek();\n          stream.next();\n\n          if (ch && ch != \",\") {\n            state.tokenize = html;\n          }\n        } // reprocess some of the specific style tag when finish setting previousToken\n\n\n        if (style == \"hamlTag\") {\n          style = \"tag\";\n        } else if (style == \"commentLine\") {\n          style = \"comment\";\n        } else if (style == \"hamlAttribute\") {\n          style = \"attribute\";\n        } else if (style == \"closeAttributeTag\") {\n          style = null;\n        }\n\n        return style;\n      }\n    };\n  }, \"htmlmixed\", \"ruby\");\n  CodeMirror.defineMIME(\"text/x-haml\", \"haml\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","htmlMode","getMode","name","rubyMode","rubyInQuote","endQuote","stream","state","ch","peek","rubyState","tokenize","length","next","html","ruby","match","skipToEnd","token","previousToken","style","indented","startOfLine","htmlState","startState","copyState","sol","indentation","eatSpace","eol","backUp","defineMIME"],"sources":["/mnt/Datengrab/python/Zero-tier/frontend/node_modules/codemirror/mode/haml/haml.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"), require(\"../ruby/ruby\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\", \"../ruby/ruby\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\n  // full haml mode. This handled embedded ruby and html fragments too\n  CodeMirror.defineMode(\"haml\", function(config) {\n    var htmlMode = CodeMirror.getMode(config, {name: \"htmlmixed\"});\n    var rubyMode = CodeMirror.getMode(config, \"ruby\");\n\n    function rubyInQuote(endQuote) {\n      return function(stream, state) {\n        var ch = stream.peek();\n        if (ch == endQuote && state.rubyState.tokenize.length == 1) {\n          // step out of ruby context as it seems to complete processing all the braces\n          stream.next();\n          state.tokenize = html;\n          return \"closeAttributeTag\";\n        } else {\n          return ruby(stream, state);\n        }\n      };\n    }\n\n    function ruby(stream, state) {\n      if (stream.match(\"-#\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      return rubyMode.token(stream, state.rubyState);\n    }\n\n    function html(stream, state) {\n      var ch = stream.peek();\n\n      // handle haml declarations. All declarations that cant be handled here\n      // will be passed to html mode\n      if (state.previousToken.style == \"comment\" ) {\n        if (state.indented > state.previousToken.indented) {\n          stream.skipToEnd();\n          return \"commentLine\";\n        }\n      }\n\n      if (state.startOfLine) {\n        if (ch == \"!\" && stream.match(\"!!\")) {\n          stream.skipToEnd();\n          return \"tag\";\n        } else if (stream.match(/^%[\\w:#\\.]+=/)) {\n          state.tokenize = ruby;\n          return \"hamlTag\";\n        } else if (stream.match(/^%[\\w:]+/)) {\n          return \"hamlTag\";\n        } else if (ch == \"/\" ) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (state.startOfLine || state.previousToken.style == \"hamlTag\") {\n        if ( ch == \"#\" || ch == \".\") {\n          stream.match(/[\\w-#\\.]*/);\n          return \"hamlAttribute\";\n        }\n      }\n\n      // do not handle --> as valid ruby, make it HTML close comment instead\n      if (state.startOfLine && !stream.match(\"-->\", false) && (ch == \"=\" || ch == \"-\" )) {\n        state.tokenize = ruby;\n        return state.tokenize(stream, state);\n      }\n\n      if (state.previousToken.style == \"hamlTag\" ||\n          state.previousToken.style == \"closeAttributeTag\" ||\n          state.previousToken.style == \"hamlAttribute\") {\n        if (ch == \"(\") {\n          state.tokenize = rubyInQuote(\")\");\n          return state.tokenize(stream, state);\n        } else if (ch == \"{\") {\n          if (!stream.match(/^\\{%.*/)) {\n            state.tokenize = rubyInQuote(\"}\");\n            return state.tokenize(stream, state);\n          }\n        }\n      }\n\n      return htmlMode.token(stream, state.htmlState);\n    }\n\n    return {\n      // default to html mode\n      startState: function() {\n        var htmlState = CodeMirror.startState(htmlMode);\n        var rubyState = CodeMirror.startState(rubyMode);\n        return {\n          htmlState: htmlState,\n          rubyState: rubyState,\n          indented: 0,\n          previousToken: { style: null, indented: 0},\n          tokenize: html\n        };\n      },\n\n      copyState: function(state) {\n        return {\n          htmlState : CodeMirror.copyState(htmlMode, state.htmlState),\n          rubyState: CodeMirror.copyState(rubyMode, state.rubyState),\n          indented: state.indented,\n          previousToken: state.previousToken,\n          tokenize: state.tokenize\n        };\n      },\n\n      token: function(stream, state) {\n        if (stream.sol()) {\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        state.startOfLine = false;\n        // dont record comment line as we only want to measure comment line with\n        // the opening comment block\n        if (style && style != \"commentLine\") {\n          state.previousToken = { style: style, indented: state.indented };\n        }\n        // if current state is ruby and the previous token is not `,` reset the\n        // tokenize to html\n        if (stream.eol() && state.tokenize == ruby) {\n          stream.backUp(1);\n          var ch = stream.peek();\n          stream.next();\n          if (ch && ch != \",\") {\n            state.tokenize = html;\n          }\n        }\n        // reprocess some of the specific style tag when finish setting previousToken\n        if (style == \"hamlTag\") {\n          style = \"tag\";\n        } else if (style == \"commentLine\") {\n          style = \"comment\";\n        } else if (style == \"hamlAttribute\") {\n          style = \"attribute\";\n        } else if (style == \"closeAttributeTag\") {\n          style = null;\n        }\n        return style;\n      }\n    };\n  }, \"htmlmixed\", \"ruby\");\n\n  CodeMirror.defineMIME(\"text/x-haml\", \"haml\");\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}