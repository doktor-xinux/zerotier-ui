{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../javascript/javascript\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../javascript/javascript\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\"; // Depth means the amount of open braces in JS context, in XML\n  // context 0 means not in tag, 1 means in tag, and 2 means in tag\n  // and js block comment.\n\n  function Context(state, mode, depth, prev) {\n    this.state = state;\n    this.mode = mode;\n    this.depth = depth;\n    this.prev = prev;\n  }\n\n  function copyContext(context) {\n    return new Context(CodeMirror.copyState(context.mode, context.state), context.mode, context.depth, context.prev && copyContext(context.prev));\n  }\n\n  CodeMirror.defineMode(\"jsx\", function (config, modeConfig) {\n    var xmlMode = CodeMirror.getMode(config, {\n      name: \"xml\",\n      allowMissing: true,\n      multilineTagIndentPastTag: false,\n      allowMissingTagName: true\n    });\n    var jsMode = CodeMirror.getMode(config, modeConfig && modeConfig.base || \"javascript\");\n\n    function flatXMLIndent(state) {\n      var tagName = state.tagName;\n      state.tagName = null;\n      var result = xmlMode.indent(state, \"\", \"\");\n      state.tagName = tagName;\n      return result;\n    }\n\n    function token(stream, state) {\n      if (state.context.mode == xmlMode) return xmlToken(stream, state, state.context);else return jsToken(stream, state, state.context);\n    }\n\n    function xmlToken(stream, state, cx) {\n      if (cx.depth == 2) {\n        // Inside a JS /* */ comment\n        if (stream.match(/^.*?\\*\\//)) cx.depth = 1;else stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (stream.peek() == \"{\") {\n        xmlMode.skipAttribute(cx.state);\n        var indent = flatXMLIndent(cx.state),\n            xmlContext = cx.state.context; // If JS starts on same line as tag\n\n        if (xmlContext && stream.match(/^[^>]*>\\s*$/, false)) {\n          while (xmlContext.prev && !xmlContext.startOfLine) {\n            xmlContext = xmlContext.prev;\n          } // If tag starts the line, use XML indentation level\n\n\n          if (xmlContext.startOfLine) indent -= config.indentUnit; // Else use JS indentation level\n          else if (cx.prev.state.lexical) indent = cx.prev.state.lexical.indented; // Else if inside of tag\n        } else if (cx.depth == 1) {\n          indent += config.indentUnit;\n        }\n\n        state.context = new Context(CodeMirror.startState(jsMode, indent), jsMode, 0, state.context);\n        return null;\n      }\n\n      if (cx.depth == 1) {\n        // Inside of tag\n        if (stream.peek() == \"<\") {\n          // Tag inside of tag\n          xmlMode.skipAttribute(cx.state);\n          state.context = new Context(CodeMirror.startState(xmlMode, flatXMLIndent(cx.state)), xmlMode, 0, state.context);\n          return null;\n        } else if (stream.match(\"//\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        } else if (stream.match(\"/*\")) {\n          cx.depth = 2;\n          return token(stream, state);\n        }\n      }\n\n      var style = xmlMode.token(stream, cx.state),\n          cur = stream.current(),\n          stop;\n\n      if (/\\btag\\b/.test(style)) {\n        if (/>$/.test(cur)) {\n          if (cx.state.context) cx.depth = 0;else state.context = state.context.prev;\n        } else if (/^</.test(cur)) {\n          cx.depth = 1;\n        }\n      } else if (!style && (stop = cur.indexOf(\"{\")) > -1) {\n        stream.backUp(cur.length - stop);\n      }\n\n      return style;\n    }\n\n    function jsToken(stream, state, cx) {\n      if (stream.peek() == \"<\" && jsMode.expressionAllowed(stream, cx.state)) {\n        state.context = new Context(CodeMirror.startState(xmlMode, jsMode.indent(cx.state, \"\", \"\")), xmlMode, 0, state.context);\n        jsMode.skipExpression(cx.state);\n        return null;\n      }\n\n      var style = jsMode.token(stream, cx.state);\n\n      if (!style && cx.depth != null) {\n        var cur = stream.current();\n\n        if (cur == \"{\") {\n          cx.depth++;\n        } else if (cur == \"}\") {\n          if (--cx.depth == 0) state.context = state.context.prev;\n        }\n      }\n\n      return style;\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          context: new Context(CodeMirror.startState(jsMode), jsMode)\n        };\n      },\n      copyState: function copyState(state) {\n        return {\n          context: copyContext(state.context)\n        };\n      },\n      token: token,\n      indent: function indent(state, textAfter, fullLine) {\n        return state.context.mode.indent(state.context.state, textAfter, fullLine);\n      },\n      innerMode: function innerMode(state) {\n        return state.context;\n      }\n    };\n  }, \"xml\", \"javascript\");\n  CodeMirror.defineMIME(\"text/jsx\", \"jsx\");\n  CodeMirror.defineMIME(\"text/typescript-jsx\", {\n    name: \"jsx\",\n    base: {\n      name: \"javascript\",\n      typescript: true\n    }\n  });\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","Context","state","mode","depth","prev","copyContext","context","copyState","defineMode","config","modeConfig","xmlMode","getMode","name","allowMissing","multilineTagIndentPastTag","allowMissingTagName","jsMode","base","flatXMLIndent","tagName","result","indent","token","stream","xmlToken","jsToken","cx","match","skipToEnd","peek","skipAttribute","xmlContext","startOfLine","indentUnit","lexical","indented","startState","style","cur","current","stop","test","indexOf","backUp","length","expressionAllowed","skipExpression","textAfter","fullLine","innerMode","defineMIME","typescript"],"sources":["/mnt/Datengrab/python/Zero-tier/frontend/node_modules/codemirror/mode/jsx/jsx.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../javascript/javascript\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../javascript/javascript\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n\n  // Depth means the amount of open braces in JS context, in XML\n  // context 0 means not in tag, 1 means in tag, and 2 means in tag\n  // and js block comment.\n  function Context(state, mode, depth, prev) {\n    this.state = state; this.mode = mode; this.depth = depth; this.prev = prev\n  }\n\n  function copyContext(context) {\n    return new Context(CodeMirror.copyState(context.mode, context.state),\n                       context.mode,\n                       context.depth,\n                       context.prev && copyContext(context.prev))\n  }\n\n  CodeMirror.defineMode(\"jsx\", function(config, modeConfig) {\n    var xmlMode = CodeMirror.getMode(config, {name: \"xml\", allowMissing: true, multilineTagIndentPastTag: false, allowMissingTagName: true})\n    var jsMode = CodeMirror.getMode(config, modeConfig && modeConfig.base || \"javascript\")\n\n    function flatXMLIndent(state) {\n      var tagName = state.tagName\n      state.tagName = null\n      var result = xmlMode.indent(state, \"\", \"\")\n      state.tagName = tagName\n      return result\n    }\n\n    function token(stream, state) {\n      if (state.context.mode == xmlMode)\n        return xmlToken(stream, state, state.context)\n      else\n        return jsToken(stream, state, state.context)\n    }\n\n    function xmlToken(stream, state, cx) {\n      if (cx.depth == 2) { // Inside a JS /* */ comment\n        if (stream.match(/^.*?\\*\\//)) cx.depth = 1\n        else stream.skipToEnd()\n        return \"comment\"\n      }\n\n      if (stream.peek() == \"{\") {\n        xmlMode.skipAttribute(cx.state)\n\n        var indent = flatXMLIndent(cx.state), xmlContext = cx.state.context\n        // If JS starts on same line as tag\n        if (xmlContext && stream.match(/^[^>]*>\\s*$/, false)) {\n          while (xmlContext.prev && !xmlContext.startOfLine)\n            xmlContext = xmlContext.prev\n          // If tag starts the line, use XML indentation level\n          if (xmlContext.startOfLine) indent -= config.indentUnit\n          // Else use JS indentation level\n          else if (cx.prev.state.lexical) indent = cx.prev.state.lexical.indented\n        // Else if inside of tag\n        } else if (cx.depth == 1) {\n          indent += config.indentUnit\n        }\n\n        state.context = new Context(CodeMirror.startState(jsMode, indent),\n                                    jsMode, 0, state.context)\n        return null\n      }\n\n      if (cx.depth == 1) { // Inside of tag\n        if (stream.peek() == \"<\") { // Tag inside of tag\n          xmlMode.skipAttribute(cx.state)\n          state.context = new Context(CodeMirror.startState(xmlMode, flatXMLIndent(cx.state)),\n                                      xmlMode, 0, state.context)\n          return null\n        } else if (stream.match(\"//\")) {\n          stream.skipToEnd()\n          return \"comment\"\n        } else if (stream.match(\"/*\")) {\n          cx.depth = 2\n          return token(stream, state)\n        }\n      }\n\n      var style = xmlMode.token(stream, cx.state), cur = stream.current(), stop\n      if (/\\btag\\b/.test(style)) {\n        if (/>$/.test(cur)) {\n          if (cx.state.context) cx.depth = 0\n          else state.context = state.context.prev\n        } else if (/^</.test(cur)) {\n          cx.depth = 1\n        }\n      } else if (!style && (stop = cur.indexOf(\"{\")) > -1) {\n        stream.backUp(cur.length - stop)\n      }\n      return style\n    }\n\n    function jsToken(stream, state, cx) {\n      if (stream.peek() == \"<\" && jsMode.expressionAllowed(stream, cx.state)) {\n        state.context = new Context(CodeMirror.startState(xmlMode, jsMode.indent(cx.state, \"\", \"\")),\n                                    xmlMode, 0, state.context)\n        jsMode.skipExpression(cx.state)\n        return null\n      }\n\n      var style = jsMode.token(stream, cx.state)\n      if (!style && cx.depth != null) {\n        var cur = stream.current()\n        if (cur == \"{\") {\n          cx.depth++\n        } else if (cur == \"}\") {\n          if (--cx.depth == 0) state.context = state.context.prev\n        }\n      }\n      return style\n    }\n\n    return {\n      startState: function() {\n        return {context: new Context(CodeMirror.startState(jsMode), jsMode)}\n      },\n\n      copyState: function(state) {\n        return {context: copyContext(state.context)}\n      },\n\n      token: token,\n\n      indent: function(state, textAfter, fullLine) {\n        return state.context.mode.indent(state.context.state, textAfter, fullLine)\n      },\n\n      innerMode: function(state) {\n        return state.context\n      }\n    }\n  }, \"xml\", \"javascript\")\n\n  CodeMirror.defineMIME(\"text/jsx\", \"jsx\")\n  CodeMirror.defineMIME(\"text/typescript-jsx\", {name: \"jsx\", base: {name: \"javascript\", typescript: true}})\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}