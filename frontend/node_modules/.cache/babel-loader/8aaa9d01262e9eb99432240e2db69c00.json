{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"puppet\", function () {\n    // Stores the words from the define method\n    var words = {}; // Taken, mostly, from the Puppet official variable standards regex\n\n    var variable_regex = /({)?([a-z][a-z0-9_]*)?((::[a-z][a-z0-9_]*)*::)?[a-zA-Z0-9_]+(})?/; // Takes a string of words separated by spaces and adds them as\n    // keys with the value of the first argument 'style'\n\n    function define(style, string) {\n      var split = string.split(' ');\n\n      for (var i = 0; i < split.length; i++) {\n        words[split[i]] = style;\n      }\n    } // Takes commonly known puppet types/words and classifies them to a style\n\n\n    define('keyword', 'class define site node include import inherits');\n    define('keyword', 'case if else in and elsif default or');\n    define('atom', 'false true running present absent file directory undef');\n    define('builtin', 'action augeas burst chain computer cron destination dport exec ' + 'file filebucket group host icmp iniface interface jump k5login limit log_level ' + 'log_prefix macauthorization mailalias maillist mcx mount nagios_command ' + 'nagios_contact nagios_contactgroup nagios_host nagios_hostdependency ' + 'nagios_hostescalation nagios_hostextinfo nagios_hostgroup nagios_service ' + 'nagios_servicedependency nagios_serviceescalation nagios_serviceextinfo ' + 'nagios_servicegroup nagios_timeperiod name notify outiface package proto reject ' + 'resources router schedule scheduled_task selboolean selmodule service source ' + 'sport ssh_authorized_key sshkey stage state table tidy todest toports tosource ' + 'user vlan yumrepo zfs zone zpool'); // After finding a start of a string ('|\") this function attempts to find the end;\n    // If a variable is encountered along the way, we display it differently when it\n    // is encapsulated in a double-quoted string.\n\n    function tokenString(stream, state) {\n      var current,\n          prev,\n          found_var = false;\n\n      while (!stream.eol() && (current = stream.next()) != state.pending) {\n        if (current === '$' && prev != '\\\\' && state.pending == '\"') {\n          found_var = true;\n          break;\n        }\n\n        prev = current;\n      }\n\n      if (found_var) {\n        stream.backUp(1);\n      }\n\n      if (current == state.pending) {\n        state.continueString = false;\n      } else {\n        state.continueString = true;\n      }\n\n      return \"string\";\n    } // Main function\n\n\n    function tokenize(stream, state) {\n      // Matches one whole word\n      var word = stream.match(/[\\w]+/, false); // Matches attributes (i.e. ensure => present ; 'ensure' would be matched)\n\n      var attribute = stream.match(/(\\s+)?\\w+\\s+=>.*/, false); // Matches non-builtin resource declarations\n      // (i.e. \"apache::vhost {\" or \"mycustomclasss {\" would be matched)\n\n      var resource = stream.match(/(\\s+)?[\\w:_]+(\\s+)?{/, false); // Matches virtual and exported resources (i.e. @@user { ; and the like)\n\n      var special_resource = stream.match(/(\\s+)?[@]{1,2}[\\w:_]+(\\s+)?{/, false); // Finally advance the stream\n\n      var ch = stream.next(); // Have we found a variable?\n\n      if (ch === '$') {\n        if (stream.match(variable_regex)) {\n          // If so, and its in a string, assign it a different color\n          return state.continueString ? 'variable-2' : 'variable';\n        } // Otherwise return an invalid variable\n\n\n        return \"error\";\n      } // Should we still be looking for the end of a string?\n\n\n      if (state.continueString) {\n        // If so, go through the loop again\n        stream.backUp(1);\n        return tokenString(stream, state);\n      } // Are we in a definition (class, node, define)?\n\n\n      if (state.inDefinition) {\n        // If so, return def (i.e. for 'class myclass {' ; 'myclass' would be matched)\n        if (stream.match(/(\\s+)?[\\w:_]+(\\s+)?/)) {\n          return 'def';\n        } // Match the rest it the next time around\n\n\n        stream.match(/\\s+{/);\n        state.inDefinition = false;\n      } // Are we in an 'include' statement?\n\n\n      if (state.inInclude) {\n        // Match and return the included class\n        stream.match(/(\\s+)?\\S+(\\s+)?/);\n        state.inInclude = false;\n        return 'def';\n      } // Do we just have a function on our hands?\n      // In 'ensure_resource(\"myclass\")', 'ensure_resource' is matched\n\n\n      if (stream.match(/(\\s+)?\\w+\\(/)) {\n        stream.backUp(1);\n        return 'def';\n      } // Have we matched the prior attribute regex?\n\n\n      if (attribute) {\n        stream.match(/(\\s+)?\\w+/);\n        return 'tag';\n      } // Do we have Puppet specific words?\n\n\n      if (word && words.hasOwnProperty(word)) {\n        // Negates the initial next()\n        stream.backUp(1); // rs move the stream\n\n        stream.match(/[\\w]+/); // We want to process these words differently\n        // do to the importance they have in Puppet\n\n        if (stream.match(/\\s+\\S+\\s+{/, false)) {\n          state.inDefinition = true;\n        }\n\n        if (word == 'include') {\n          state.inInclude = true;\n        } // Returns their value as state in the prior define methods\n\n\n        return words[word];\n      } // Is there a match on a reference?\n\n\n      if (/(^|\\s+)[A-Z][\\w:_]+/.test(word)) {\n        // Negate the next()\n        stream.backUp(1); // Match the full reference\n\n        stream.match(/(^|\\s+)[A-Z][\\w:_]+/);\n        return 'def';\n      } // Have we matched the prior resource regex?\n\n\n      if (resource) {\n        stream.match(/(\\s+)?[\\w:_]+/);\n        return 'def';\n      } // Have we matched the prior special_resource regex?\n\n\n      if (special_resource) {\n        stream.match(/(\\s+)?[@]{1,2}/);\n        return 'special';\n      } // Match all the comments. All of them.\n\n\n      if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      } // Have we found a string?\n\n\n      if (ch == \"'\" || ch == '\"') {\n        // Store the type (single or double)\n        state.pending = ch; // Perform the looping function to find the end\n\n        return tokenString(stream, state);\n      } // Match all the brackets\n\n\n      if (ch == '{' || ch == '}') {\n        return 'bracket';\n      } // Match characters that we are going to assume\n      // are trying to be regex\n\n\n      if (ch == '/') {\n        stream.match(/^[^\\/]*\\//);\n        return 'variable-3';\n      } // Match all the numbers\n\n\n      if (ch.match(/[0-9]/)) {\n        stream.eatWhile(/[0-9]+/);\n        return 'number';\n      } // Match the '=' and '=>' operators\n\n\n      if (ch == '=') {\n        if (stream.peek() == '>') {\n          stream.next();\n        }\n\n        return \"operator\";\n      } // Keep advancing through all the rest\n\n\n      stream.eatWhile(/[\\w-]/); // Return a blank line for everything else\n\n      return null;\n    } // Start it all\n\n\n    return {\n      startState: function startState() {\n        var state = {};\n        state.inDefinition = false;\n        state.inInclude = false;\n        state.continueString = false;\n        state.pending = false;\n        return state;\n      },\n      token: function token(stream, state) {\n        // Strip the spaces, but regex will account for them eitherway\n        if (stream.eatSpace()) return null; // Go through the main process\n\n        return tokenize(stream, state);\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-puppet\", \"puppet\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","words","variable_regex","style","string","split","i","length","tokenString","stream","state","current","prev","found_var","eol","next","pending","backUp","continueString","tokenize","word","match","attribute","resource","special_resource","ch","inDefinition","inInclude","hasOwnProperty","test","skipToEnd","eatWhile","peek","startState","token","eatSpace","defineMIME"],"sources":["/mnt/Datengrab/python/Zero-tier/frontend/node_modules/codemirror/mode/puppet/puppet.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"puppet\", function () {\n  // Stores the words from the define method\n  var words = {};\n  // Taken, mostly, from the Puppet official variable standards regex\n  var variable_regex = /({)?([a-z][a-z0-9_]*)?((::[a-z][a-z0-9_]*)*::)?[a-zA-Z0-9_]+(})?/;\n\n  // Takes a string of words separated by spaces and adds them as\n  // keys with the value of the first argument 'style'\n  function define(style, string) {\n    var split = string.split(' ');\n    for (var i = 0; i < split.length; i++) {\n      words[split[i]] = style;\n    }\n  }\n\n  // Takes commonly known puppet types/words and classifies them to a style\n  define('keyword', 'class define site node include import inherits');\n  define('keyword', 'case if else in and elsif default or');\n  define('atom', 'false true running present absent file directory undef');\n  define('builtin', 'action augeas burst chain computer cron destination dport exec ' +\n    'file filebucket group host icmp iniface interface jump k5login limit log_level ' +\n    'log_prefix macauthorization mailalias maillist mcx mount nagios_command ' +\n    'nagios_contact nagios_contactgroup nagios_host nagios_hostdependency ' +\n    'nagios_hostescalation nagios_hostextinfo nagios_hostgroup nagios_service ' +\n    'nagios_servicedependency nagios_serviceescalation nagios_serviceextinfo ' +\n    'nagios_servicegroup nagios_timeperiod name notify outiface package proto reject ' +\n    'resources router schedule scheduled_task selboolean selmodule service source ' +\n    'sport ssh_authorized_key sshkey stage state table tidy todest toports tosource ' +\n    'user vlan yumrepo zfs zone zpool');\n\n  // After finding a start of a string ('|\") this function attempts to find the end;\n  // If a variable is encountered along the way, we display it differently when it\n  // is encapsulated in a double-quoted string.\n  function tokenString(stream, state) {\n    var current, prev, found_var = false;\n    while (!stream.eol() && (current = stream.next()) != state.pending) {\n      if (current === '$' && prev != '\\\\' && state.pending == '\"') {\n        found_var = true;\n        break;\n      }\n      prev = current;\n    }\n    if (found_var) {\n      stream.backUp(1);\n    }\n    if (current == state.pending) {\n      state.continueString = false;\n    } else {\n      state.continueString = true;\n    }\n    return \"string\";\n  }\n\n  // Main function\n  function tokenize(stream, state) {\n    // Matches one whole word\n    var word = stream.match(/[\\w]+/, false);\n    // Matches attributes (i.e. ensure => present ; 'ensure' would be matched)\n    var attribute = stream.match(/(\\s+)?\\w+\\s+=>.*/, false);\n    // Matches non-builtin resource declarations\n    // (i.e. \"apache::vhost {\" or \"mycustomclasss {\" would be matched)\n    var resource = stream.match(/(\\s+)?[\\w:_]+(\\s+)?{/, false);\n    // Matches virtual and exported resources (i.e. @@user { ; and the like)\n    var special_resource = stream.match(/(\\s+)?[@]{1,2}[\\w:_]+(\\s+)?{/, false);\n\n    // Finally advance the stream\n    var ch = stream.next();\n\n    // Have we found a variable?\n    if (ch === '$') {\n      if (stream.match(variable_regex)) {\n        // If so, and its in a string, assign it a different color\n        return state.continueString ? 'variable-2' : 'variable';\n      }\n      // Otherwise return an invalid variable\n      return \"error\";\n    }\n    // Should we still be looking for the end of a string?\n    if (state.continueString) {\n      // If so, go through the loop again\n      stream.backUp(1);\n      return tokenString(stream, state);\n    }\n    // Are we in a definition (class, node, define)?\n    if (state.inDefinition) {\n      // If so, return def (i.e. for 'class myclass {' ; 'myclass' would be matched)\n      if (stream.match(/(\\s+)?[\\w:_]+(\\s+)?/)) {\n        return 'def';\n      }\n      // Match the rest it the next time around\n      stream.match(/\\s+{/);\n      state.inDefinition = false;\n    }\n    // Are we in an 'include' statement?\n    if (state.inInclude) {\n      // Match and return the included class\n      stream.match(/(\\s+)?\\S+(\\s+)?/);\n      state.inInclude = false;\n      return 'def';\n    }\n    // Do we just have a function on our hands?\n    // In 'ensure_resource(\"myclass\")', 'ensure_resource' is matched\n    if (stream.match(/(\\s+)?\\w+\\(/)) {\n      stream.backUp(1);\n      return 'def';\n    }\n    // Have we matched the prior attribute regex?\n    if (attribute) {\n      stream.match(/(\\s+)?\\w+/);\n      return 'tag';\n    }\n    // Do we have Puppet specific words?\n    if (word && words.hasOwnProperty(word)) {\n      // Negates the initial next()\n      stream.backUp(1);\n      // rs move the stream\n      stream.match(/[\\w]+/);\n      // We want to process these words differently\n      // do to the importance they have in Puppet\n      if (stream.match(/\\s+\\S+\\s+{/, false)) {\n        state.inDefinition = true;\n      }\n      if (word == 'include') {\n        state.inInclude = true;\n      }\n      // Returns their value as state in the prior define methods\n      return words[word];\n    }\n    // Is there a match on a reference?\n    if (/(^|\\s+)[A-Z][\\w:_]+/.test(word)) {\n      // Negate the next()\n      stream.backUp(1);\n      // Match the full reference\n      stream.match(/(^|\\s+)[A-Z][\\w:_]+/);\n      return 'def';\n    }\n    // Have we matched the prior resource regex?\n    if (resource) {\n      stream.match(/(\\s+)?[\\w:_]+/);\n      return 'def';\n    }\n    // Have we matched the prior special_resource regex?\n    if (special_resource) {\n      stream.match(/(\\s+)?[@]{1,2}/);\n      return 'special';\n    }\n    // Match all the comments. All of them.\n    if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    // Have we found a string?\n    if (ch == \"'\" || ch == '\"') {\n      // Store the type (single or double)\n      state.pending = ch;\n      // Perform the looping function to find the end\n      return tokenString(stream, state);\n    }\n    // Match all the brackets\n    if (ch == '{' || ch == '}') {\n      return 'bracket';\n    }\n    // Match characters that we are going to assume\n    // are trying to be regex\n    if (ch == '/') {\n      stream.match(/^[^\\/]*\\//);\n      return 'variable-3';\n    }\n    // Match all the numbers\n    if (ch.match(/[0-9]/)) {\n      stream.eatWhile(/[0-9]+/);\n      return 'number';\n    }\n    // Match the '=' and '=>' operators\n    if (ch == '=') {\n      if (stream.peek() == '>') {\n          stream.next();\n      }\n      return \"operator\";\n    }\n    // Keep advancing through all the rest\n    stream.eatWhile(/[\\w-]/);\n    // Return a blank line for everything else\n    return null;\n  }\n  // Start it all\n  return {\n    startState: function () {\n      var state = {};\n      state.inDefinition = false;\n      state.inInclude = false;\n      state.continueString = false;\n      state.pending = false;\n      return state;\n    },\n    token: function (stream, state) {\n      // Strip the spaces, but regex will account for them eitherway\n      if (stream.eatSpace()) return null;\n      // Go through the main process\n      return tokenize(stream, state);\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-puppet\", \"puppet\");\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}