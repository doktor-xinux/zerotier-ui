{"ast":null,"code":"/* eslint-disable */ // rule-compiler.js from ZeroTierOne before its relicensing\n// source:\n// https://github.com/zerotier/ZeroTierOne/blob/553101e8b5a988003f594037dda82301b0967625/rule-compiler/rule-compiler.js\n// Names for bits in characteristics -- 0==LSB, 63==MSB\nvar CHARACTERISTIC_BITS={inbound:63,multicast:62,broadcast:61,ipauth:60,macauth:59,tcp_fin:0,tcp_syn:1,tcp_rst:2,tcp_psh:3,tcp_ack:4,tcp_urg:5,tcp_ece:6,tcp_cwr:7,tcp_ns:8,tcp_rs2:9,tcp_rs1:10,tcp_rs0:11};// Shorthand names for common ethernet types\nvar ETHERTYPES={ipv4:0x0800,arp:0x0806,wol:0x0842,rarp:0x8035,ipv6:0x86dd,atalk:0x809b,aarp:0x80f3,ipx_a:0x8137,ipx_b:0x8138};// Shorthand names for common IP protocols\nvar IP_PROTOCOLS={icmp:0x01,icmp4:0x01,icmpv4:0x01,igmp:0x02,ipip:0x04,tcp:0x06,egp:0x08,igp:0x09,udp:0x11,rdp:0x1b,esp:0x32,ah:0x33,icmp6:0x3a,icmpv6:0x3a,l2tp:0x73,sctp:0x84,udplite:0x88};// Keywords that open new blocks that must be terminated by a semicolon\nvar OPEN_BLOCK_KEYWORDS={macro:true,tag:true,cap:true,drop:true,accept:true,tee:true,watch:true,redirect:true,break:true,priority:true};// Reserved words that can't be used as tag, capability, or rule set names\nvar RESERVED_WORDS={macro:true,tag:true,cap:true,default:true,drop:true,accept:true,tee:true,watch:true,redirect:true,break:true,priority:true,ztsrc:true,ztdest:true,vlan:true,vlanpcp:true,vlandei:true,ethertype:true,macsrc:true,macdest:true,ipsrc:true,ipdest:true,iptos:true,ipprotocol:true,icmp:true,sport:true,dport:true,chr:true,framesize:true,random:true,tand:true,tor:true,txor:true,tdiff:true,teq:true,tseq:true,treq:true,type:true,enum:true,class:true,define:true,import:true,include:true,log:true,not:true,xor:true,or:true,and:true,set:true,var:true,let:true};var KEYWORD_TO_API_MAP={drop:\"ACTION_DROP\",accept:\"ACTION_ACCEPT\",tee:\"ACTION_TEE\",watch:\"ACTION_WATCH\",redirect:\"ACTION_REDIRECT\",break:\"ACTION_BREAK\",priority:\"ACTION_PRIORITY\",ztsrc:\"MATCH_SOURCE_ZEROTIER_ADDRESS\",ztdest:\"MATCH_DEST_ZEROTIER_ADDRESS\",vlan:\"MATCH_VLAN_ID\",vlanpcp:\"MATCH_VLAN_PCP\",vlandei:\"MATCH_VLAN_DEI\",ethertype:\"MATCH_ETHERTYPE\",macsrc:\"MATCH_MAC_SOURCE\",macdest:\"MATCH_MAC_DEST\",//'ipsrc': '', // special handling since we programmatically differentiate between V4 and V6\n//'ipdest': '', // special handling\niptos:\"MATCH_IP_TOS\",ipprotocol:\"MATCH_IP_PROTOCOL\",icmp:\"MATCH_ICMP\",sport:\"MATCH_IP_SOURCE_PORT_RANGE\",dport:\"MATCH_IP_DEST_PORT_RANGE\",chr:\"MATCH_CHARACTERISTICS\",framesize:\"MATCH_FRAME_SIZE_RANGE\",random:\"MATCH_RANDOM\",tand:\"MATCH_TAGS_BITWISE_AND\",tor:\"MATCH_TAGS_BITWISE_OR\",txor:\"MATCH_TAGS_BITWISE_XOR\",tdiff:\"MATCH_TAGS_DIFFERENCE\",teq:\"MATCH_TAGS_EQUAL\",tseq:\"MATCH_TAG_SENDER\",treq:\"MATCH_TAG_RECEIVER\"};// Number of args for each match\nvar MATCH_ARG_COUNTS={ztsrc:1,ztdest:1,vlan:1,vlanpcp:1,vlandei:1,ethertype:1,macsrc:1,macdest:1,ipsrc:1,ipdest:1,iptos:2,ipprotocol:1,icmp:2,sport:1,dport:1,chr:1,framesize:1,random:1,tand:2,tor:2,txor:2,tdiff:2,teq:2,tseq:2,treq:2};// Regex of all alphanumeric characters in Unicode\nvar INTL_ALPHANUM_REGEX=new RegExp(\"[0-9A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]\");// Checks whether something is a valid capability, tag, or macro name\nfunction _isValidName(n){if(typeof n!==\"string\"||n.length===0)return false;if(\"0123456789\".indexOf(n.charAt(0))>=0)return false;for(var i=0;i<n.length;++i){var c=n.charAt(i);if(c!==\"_\"&&!INTL_ALPHANUM_REGEX.test(c))return false;}return true;}// Regexes for checking the basic syntactic validity of IP addresses\nvar IPV6_REGEX=new RegExp(\"(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\");var IPV4_REGEX=new RegExp(\"((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\");function _parseNum(n){try{if(typeof n!==\"string\"||n.length===0)return-1;n=n.toLowerCase();if(n.length>2&&n.substr(0,2)===\"0x\")n=parseInt(n.substr(2),16);else n=parseInt(n,10);return typeof n===\"number\"&&n!==null&&!isNaN(n)?n:-1;}catch(e){return-1;}}function _cleanMac(m){m=m.toLowerCase();var m2=\"\";var charcount=0;for(var i=0;i<m.length&&m2.length<17;++i){var c=m.charAt(i);if(\"0123456789abcdef\".indexOf(c)>=0){m2+=c;charcount++;if(m2.length>0&&m2.length!==17&&charcount>=2){m2+=\":\";charcount=0;}}}return m2;}function _cleanHex(m){m=m.toLowerCase();var m2=\"\";for(var i=0;i<m.length;++i){var c=m.charAt(i);if(\"0123456789abcdef\".indexOf(c)>=0)m2+=c;}return m2;}function _renderMatches(mtree,rules,macros,caps,tags,params){var not=false;var or=false;for(var k=0;k<mtree.length;++k){var match=typeof mtree[k][0]===\"string\"?mtree[k][0].toLowerCase():\"\";if(match.length===0||match===\"and\"){// AND is the default\ncontinue;}else if(match===\"not\"){not=true;}else if(match===\"or\"){or=true;}else{var args=[];var argCount=MATCH_ARG_COUNTS[match];if(!argCount)return[mtree[k][1],mtree[k][2],'Unrecognized match type \"'+match+'\".'];for(var i=0;i<argCount;++i){if(++k>=mtree.length)return[mtree[k-1][1],mtree[k-1][2],\"Missing argument(s) to match.\"];var arg=mtree[k][0];if(typeof arg!==\"string\"||arg in RESERVED_WORDS||arg.length===0)return[mtree[k-1][1],mtree[k-1][2],\"Missing argument(s) to match (invalid argument or argument is reserved word).\"];if(arg.charAt(0)===\"$\"){var tmp=params[arg];if(typeof tmp===\"undefined\")return[mtree[k][1],mtree[k][2],\"Undefined variable name.\"];args.push([tmp,mtree[k][1],mtree[k][2]]);}else{args.push(mtree[k]);}}switch(match){case\"ztsrc\":case\"ztdest\":{var zt=_cleanHex(args[0][0]);if(zt.length!==10)return[args[0][1],args[0][2],\"Invalid ZeroTier address.\"];rules.push({type:KEYWORD_TO_API_MAP[match],not:not,or:or,zt:zt});}break;case\"vlan\":case\"vlanpcp\":case\"vlandei\":case\"ethertype\":case\"ipprotocol\":{var num=null;switch(match){case\"ethertype\":num=ETHERTYPES[args[0][0]];break;case\"ipprotocol\":num=IP_PROTOCOLS[args[0][0]];break;}if(typeof num!==\"number\")num=_parseNum(args[0][0]);if(typeof num!==\"number\"||num<0||num>0xffffffff||num===null)return[args[0][1],args[0][2],\"Invalid numeric value.\"];var r={type:KEYWORD_TO_API_MAP[match],not:not,or:or};switch(match){case\"vlan\":r[\"vlanId\"]=num;break;case\"vlanpcp\":r[\"vlanPcp\"]=num;break;case\"vlandei\":r[\"vlanDei\"]=num;break;case\"ethertype\":r[\"etherType\"]=num;break;case\"ipprotocol\":r[\"ipProtocol\"]=num;break;}rules.push(r);}break;case\"random\":{var _num=parseFloat(args[0][0])||0.0;if(_num<0.0)_num=0.0;if(_num>1.0)_num=1.0;rules.push({type:KEYWORD_TO_API_MAP[match],not:not,or:or,probability:Math.floor(4294967295*_num)});}break;case\"macsrc\":case\"macdest\":{var mac=_cleanMac(args[0][0]);if(mac.length!==17)return[args[0][1],args[0][2],\"Invalid MAC address.\"];rules.push({type:KEYWORD_TO_API_MAP[match],not:not,or:or,mac:mac});}break;case\"ipsrc\":case\"ipdest\":{var ip=args[0][0];var slashIdx=ip.indexOf(\"/\");if(slashIdx<=0)return[args[0][1],args[0][2],\"Missing /bits netmask length designation in IP.\"];var ipOnly=ip.substr(0,slashIdx);if(IPV6_REGEX.test(ipOnly)){rules.push({type:match===\"ipsrc\"?\"MATCH_IPV6_SOURCE\":\"MATCH_IPV6_DEST\",not:not,or:or,ip:ip});}else if(IPV4_REGEX.test(ipOnly)){rules.push({type:match===\"ipsrc\"?\"MATCH_IPV4_SOURCE\":\"MATCH_IPV4_DEST\",not:not,or:or,ip:ip});}else{return[args[0][1],args[0][2],\"Invalid IP address (not valid IPv4 or IPv6).\"];}}break;case\"icmp\":{var icmpType=_parseNum(args[0][0]);if(icmpType<0||icmpType>0xff)return[args[0][1],args[0][2],\"Missing or invalid ICMP type.\"];var icmpCode=_parseNum(args[1][0]);// -1 okay, indicates don't match code\nif(icmpCode>0xff)return[args[1][1],args[1][2],\"Invalid ICMP code (use -1 for none).\"];rules.push({type:\"MATCH_ICMP\",not:not,or:or,icmpType:icmpType,icmpCode:icmpCode<0?null:icmpCode});}break;case\"sport\":case\"dport\":case\"framesize\":{var _arg=args[0][0];var fn=null;var tn=null;if(_arg.indexOf(\"-\")>0){var asplit=_arg.split(\"-\");if(asplit.length!==2){return[args[0][1],args[0][2],\"Invalid numeric range.\"];}else{fn=_parseNum(asplit[0]);tn=_parseNum(asplit[1]);}}else{fn=_parseNum(_arg);tn=fn;}if(fn<0||fn>0xffff||tn<0||tn>0xffff||tn<fn)return[args[0][1],args[0][2],\"Invalid numeric range.\"];rules.push({type:KEYWORD_TO_API_MAP[match],not:not,or:or,start:fn,end:tn});}break;case\"iptos\":{var mask=_parseNum(args[0][0]);if(typeof mask!==\"number\"||mask<0||mask>0xff||mask===null)return[args[0][1],args[0][2],\"Invalid mask.\"];var _arg2=args[1][0];var _fn=null;var _tn=null;if(_arg2.indexOf(\"-\")>0){var _asplit=_arg2.split(\"-\");if(_asplit.length!==2){return[args[1][1],args[1][2],\"Invalid value range.\"];}else{_fn=_parseNum(_asplit[0]);_tn=_parseNum(_asplit[1]);}}else{_fn=_parseNum(_arg2);_tn=_fn;}if(_fn<0||_fn>0xff||_tn<0||_tn>0xff||_tn<_fn)return[args[1][1],args[1][2],\"Invalid value range.\"];rules.push({type:\"MATCH_IP_TOS\",not:not,or:or,mask:mask,start:_fn,end:_tn});}break;case\"chr\":{var chrb=args[0][0].split(/[,]+/);var maskhi=0;var masklo=0;for(var _i=0;_i<chrb.length;++_i){if(chrb[_i].length>0){var _tmp=CHARACTERISTIC_BITS[chrb[_i]];var bit=typeof _tmp===\"number\"?_tmp:_parseNum(chrb[_i]);if(bit<0||bit>63)return[args[0][1],args[0][2],\"Invalid bit index (range 0-63) or unrecognized name.\"];if(bit>=32)maskhi|=Math.abs(1<<bit-32);else masklo|=Math.abs(1<<bit);}}maskhi=Math.abs(maskhi).toString(16);while(maskhi.length<8){maskhi=\"0\"+maskhi;}masklo=Math.abs(masklo).toString(16);while(masklo.length<8){masklo=\"0\"+masklo;}rules.push({type:\"MATCH_CHARACTERISTICS\",not:not,or:or,mask:maskhi+masklo});}break;case\"tand\":case\"tor\":case\"txor\":case\"tdiff\":case\"teq\":case\"tseq\":case\"treq\":{var tag=tags[args[0][0]];var tagId=-1;var tagValue=-1;if(tag){tagId=tag.id;tagValue=args[1][0];if(tagValue in tag.flags)tagValue=tag.flags[tagValue];else if(tagValue in tag.enums)tagValue=tag.enums[tagValue];else tagValue=_parseNum(tagValue);}else{tagId=_parseNum(args[0][0]);tagValue=_parseNum(args[1][0]);}if(tagId<0||tagId>0xffffffff)return[args[0][1],args[0][2],\"Undefined tag name and invalid tag value.\"];if(tagValue<0||tagValue>0xffffffff)return[args[1][1],args[1][2],\"Invalid tag value or unrecognized flag/enum name.\"];rules.push({type:KEYWORD_TO_API_MAP[match],not:not,or:or,id:tagId,value:tagValue});}break;}not=false;or=false;}}return null;}function _renderActions(rtree,rules,macros,caps,tags,params){for(var k=0;k<rtree.length;++k){var action=typeof rtree[k][0]===\"string\"?rtree[k][0].toLowerCase():\"\";if(action.length===0){continue;}else if(action===\"include\"){if(k+1>=rtree.length)return[rtree[k][1],rtree[k][2],\"Include directive is missing a macro name.\"];var macroName=rtree[k+1][0];++k;var macroParamArray=[];var parenIdx=macroName.indexOf(\"(\");if(parenIdx>0){var pns=macroName.substr(parenIdx+1).split(/[,)]+/);for(var _k=0;_k<pns.length;++_k){if(pns[_k].length>0)macroParamArray.push(pns[_k]);}macroName=macroName.substr(0,parenIdx);}var macro=macros[macroName];if(!macro)return[rtree[k][1],rtree[k][2],\"Macro name not found.\"];var macroParams={};for(var param in macro.params){var pidx=macro.params[param];if(pidx>=macroParamArray.length)return[rtree[k][1],rtree[k][2],\"Missing one or more required macro parameter.\"];macroParams[param]=macroParamArray[pidx];}var err=_renderActions(macro.rules,rules,macros,caps,tags,macroParams);if(err!==null)return err;}else if(action===\"drop\"||action===\"accept\"||action===\"break\"){// actions without arguments\nif(k+1<rtree.length&&Array.isArray(rtree[k+1][0])){var mtree=rtree[k+1];++k;var _err=_renderMatches(mtree,rules,macros,caps,tags,params);if(_err!==null)return _err;}rules.push({type:KEYWORD_TO_API_MAP[action]});}else if(action===\"tee\"||action===\"watch\"){// actions with arguments (ZeroTier address)\nif(k+1<rtree.length&&Array.isArray(rtree[k+1][0])&&rtree[k+1][0].length>=2){var _mtree=rtree[k+1];++k;var maxLength=_parseNum(_mtree[0][0]);if(maxLength<-1||maxLength>0xffff)return[_mtree[0][1],_mtree[1][2],\"Tee/watch max packet length to forward invalid or out of range.\"];var target=_mtree[1][0];if(typeof target!==\"string\"||target.length!==10)return[_mtree[1][1],_mtree[1][2],\"Missing or invalid ZeroTier address target for tee/watch.\"];var _err2=_renderMatches(_mtree.slice(2),rules,macros,caps,tags,params);if(_err2!==null)return _err2;rules.push({type:KEYWORD_TO_API_MAP[action],address:target,length:maxLength});}else{return[rtree[k][1],rtree[k][2],\"The tee and watch actions require two paremters (max length or 0 for all, target).\"];}}else if(action===\"redirect\"){if(k+1<rtree.length&&Array.isArray(rtree[k+1][0])&&rtree[k+1][0].length>=1){var _mtree2=rtree[k+1];++k;var _target=_mtree2[0][0];if(typeof _target!==\"string\"||_target.length!==10)return[_mtree2[0][1],_mtree2[0][2],\"Missing or invalid ZeroTier address target for redirect.\"];var _err3=_renderMatches(_mtree2.slice(1),rules,macros,caps,tags,params);if(_err3!==null)return _err3;rules.push({type:KEYWORD_TO_API_MAP[action],address:_target});}else{return[rtree[k][1],rtree[k][2],\"The redirect action requires a target parameter.\"];}}else{return[rtree[k][1],rtree[k][2],\"Unrecognized action or directive in rule set.\"];}}return null;}export function compile(src,rules,caps,tags){try{if(typeof src!==\"string\")return[0,0,'\"src\" parameter must be a string.'];// Pass 1: parse source into a tree of arrays of elements. Each element is a 3-item\n// tuple consisting of string, line number, and character index in line to enable\n// informative error messages to be returned.\nvar blockStack=[[]];var curr=[\"\",-1,-1];var skipRestOfLine=false;for(var idx=0,lineNo=1,lineIdx=0;idx<src.length;++idx,++lineIdx){var ch=src.charAt(idx);if(skipRestOfLine){if(ch===\"\\r\"||ch===\"\\n\"){skipRestOfLine=false;++lineNo;lineIdx=0;}}else{switch(ch){case\"\\n\":++lineNo;lineIdx=0;case\"\\r\":case\"\\t\":case\" \":if(curr[0].length>0){var endOfBlock=false;if(curr[0].charAt(curr[0].length-1)===\";\"){endOfBlock=true;curr[0]=curr[0].substr(0,curr[0].length-1);}if(curr[0].length>0){blockStack[blockStack.length-1].push(curr);}if(endOfBlock&&blockStack.length>1&&blockStack[blockStack.length-1].length>0){blockStack[blockStack.length-2].push(blockStack[blockStack.length-1]);blockStack.pop();}else if(curr[0]in OPEN_BLOCK_KEYWORDS){blockStack.push([]);}curr=[\"\",-1,-1];}break;default:if(curr[0].length===0){if(ch===\"#\"){skipRestOfLine=true;continue;}else{curr[1]=lineNo;curr[2]=lineIdx;}}curr[0]+=ch;break;}}}if(curr[0].length>0){if(curr[0].charAt(curr[0].length-1)===\";\")curr[0]=curr[0].substr(0,curr[0].length-1);if(curr[0].length>0)blockStack[blockStack.length-1].push(curr);}while(blockStack.length>1&&blockStack[blockStack.length-1].length>0){blockStack[blockStack.length-2].push(blockStack[blockStack.length-1]);blockStack.pop();}var parsed=blockStack[0];// Pass 2: parse tree into capabilities, tags, rule sets, and document-level rules.\nvar baseRuleTree=[];var macros={};for(var i=0;i<parsed.length;++i){var keyword=typeof parsed[i][0]===\"string\"?parsed[i][0].toLowerCase():null;if(keyword===\"macro\"){// Define macros\nif(i+1>=parsed.length||!Array.isArray(parsed[i+1])||parsed[i+1].length<1||!Array.isArray(parsed[i+1][0]))return[parsed[i][1],parsed[i][2],\"Macro definition is missing name.\"];var macro=parsed[++i];var macroName=macro[0][0].toLowerCase();var params={};var parenIdx=macroName.indexOf(\"(\");if(parenIdx>0){var pns=macroName.substr(parenIdx+1).split(/[,)]+/);for(var k=0;k<pns.length;++k){if(pns[k].length>0)params[pns[k]]=k;}macroName=macroName.substr(0,parenIdx);}if(!_isValidName(macroName))return[macro[0][1],macro[0][2],\"Invalid macro name.\"];if(macroName in RESERVED_WORDS)return[macro[0][1],macro[0][2],\"Macro name is a reserved word.\"];if(macroName in macros)return[macro[0][1],macro[0][2],\"Multiple definition of macro name.\"];macros[macroName]={params:params,rules:macro.slice(1)};}else if(keyword===\"tag\"){// Define tags\nif(i+1>=parsed.length||!Array.isArray(parsed[i+1])||parsed[i+1].length<1||!Array.isArray(parsed[i+1][0]))return[parsed[i][1],parsed[i][2],\"Tag definition is missing name.\"];var tag=parsed[++i];var tagName=tag[0][0].toLowerCase();if(!_isValidName(tagName))return[tag[0][1],tag[0][2],\"Invalid tag name.\"];if(tagName in RESERVED_WORDS)return[tag[0][1],tag[0][2],\"Tag name is a reserved word.\"];if(tagName in tags)return[tag[0][1],tag[0][2],\"Multiple definition of tag name.\"];var flags={};var enums={};var id=-1;var dfl=null;for(var _k2=1;_k2<tag.length;++_k2){var tkeyword=tag[_k2][0].toLowerCase();if(tkeyword===\"id\"){if(id>=0)return[tag[_k2][1],tag[_k2][2],\"Duplicate tag id definition.\"];if(_k2+1>=tag.length)return[tag[_k2][1],tag[_k2][2],\"Missing numeric value for ID.\"];id=_parseNum(tag[++_k2][0]);if(id<0||id>0xffffffff)return[tag[_k2][1],tag[_k2][2],\"Invalid or out of range tag ID.\"];}else if(tkeyword===\"default\"){if(dfl!==null)return[tag[_k2][1],tag[_k2][2],\"Duplicate tag default directive.\"];if(_k2+1>=tag.length)return[tag[_k2][1],tag[_k2][2],\"Missing value for default.\"];dfl=tag[++_k2][0];}else if(tkeyword===\"flag\"){if(_k2+2>=tag.length)return[tag[_k2][1],tag[_k2][2],\"Missing tag flag name or bit index.\"];++_k2;var bits=tag[_k2][0].split(/[,]+/);var mask=0;for(var j=0;j<bits.length;++j){var b=bits[j].toLowerCase();if(b in flags){mask|=flags[b];}else{b=_parseNum(b);if(b<0||b>31)return[tag[_k2][1],tag[_k2][2],\"Bit index invalid, out of range, or references an undefined flag name.\"];mask|=1<<b;}}var flagName=tag[++_k2][0].toLowerCase();if(!_isValidName(flagName))return[tag[_k2][1],tag[_k2][2],\"Invalid or reserved flag name.\"];if(flagName in flags)return[tag[_k2][1],tag[_k2][2],\"Duplicate flag name in tag definition.\"];flags[flagName]=mask;}else if(tkeyword===\"enum\"){if(_k2+2>=tag.length)return[tag[_k2][1],tag[_k2][2],\"Missing tag enum name or value.\"];++_k2;var value=_parseNum(tag[_k2][0]);if(value<0||value>0xffffffff)return[tag[_k2][1],tag[_k2][2],\"Tag enum value invalid or out of range.\"];var enumName=tag[++_k2][0].toLowerCase();if(!_isValidName(enumName))return[tag[_k2][1],tag[_k2][2],\"Invalid or reserved tag enum name.\"];if(enumName in enums)return[tag[_k2][1],tag[_k2][2],\"Duplicate enum name in tag definition.\"];enums[enumName]=value;}else{return[tag[_k2][1],tag[_k2][2],\"Unrecognized keyword in tag definition.\"];}}if(id<0)return[tag[0][1],tag[0][2],\"Tag definition is missing a numeric ID.\"];if(typeof dfl===\"string\"){var dfl2=enums[dfl];if(typeof dfl2===\"number\"){dfl=dfl2;}else{dfl2=flags[dfl];if(typeof dfl2===\"number\"){dfl=dfl2;}else{dfl=Math.abs(parseInt(dfl)||0)&0xffffffff;}}}else if(typeof dfl===\"number\"){dfl=Math.abs(dfl)&0xffffffff;}tags[tagName]={id:id,default:dfl,enums:enums,flags:flags};}else if(keyword===\"cap\"){// Define capabilities\nif(i+1>=parsed.length||!Array.isArray(parsed[i+1])||parsed[i+1].length<1||!Array.isArray(parsed[i+1][0]))return[parsed[i][1],parsed[i][2],\"Capability definition is missing name.\"];var cap=parsed[++i];var capName=cap[0][0].toLowerCase();if(!_isValidName(capName))return[cap[0][1],cap[0][2],\"Invalid capability name.\"];if(capName in RESERVED_WORDS)return[cap[0][1],cap[0][2],\"Capability name is a reserved word.\"];if(capName in caps)return[cap[0][1],cap[0][2],\"Multiple definition of capability name.\"];var capRules=[];var _id=-1;var _dfl=false;for(var _k3=1;_k3<cap.length;++_k3){var dn=typeof cap[_k3][0]===\"string\"?cap[_k3][0].toLowerCase():null;if(dn===\"id\"){if(_id>=0)return[cap[_k3][1],cap[_k3][2],\"Duplicate id directive in capability definition.\"];if(_k3+1>=cap.length)return[cap[_k3][1],cap[_k3][2],\"Missing value for ID.\"];_id=_parseNum(cap[++_k3][0]);if(_id<0||_id>0xffffffff)return[cap[_k3-1][1],cap[_k3-1][2],\"Invalid or out of range capability ID.\"];for(var cn in caps){if(caps[cn].id===_id)return[cap[_k3-1][1],cap[_k3-1][2],\"Duplicate capability ID.\"];}}else if(dn===\"default\"){_dfl=true;}else{capRules.push(cap[_k3]);}}if(_id<0)return[cap[0][1],cap[0][2],\"Capability definition is missing a numeric ID.\"];caps[capName]={id:_id,default:_dfl,rules:capRules};}else{baseRuleTree.push(parsed[i]);}}// Pass 3: render low-level ZeroTier rules arrays for capabilities and base.\nfor(var _capName in caps){var r=[];var _err4=_renderActions(caps[_capName].rules,r,macros,caps,tags,{});if(_err4!==null)return _err4;caps[_capName].rules=r;}var err=_renderActions(baseRuleTree,rules,macros,caps,tags,{});if(err!==null)return err;return null;}catch(e){console.log(e.stack);return[0,0,\"Unexpected exception: \"+e.toString()];}}","map":{"version":3,"names":["CHARACTERISTIC_BITS","inbound","multicast","broadcast","ipauth","macauth","tcp_fin","tcp_syn","tcp_rst","tcp_psh","tcp_ack","tcp_urg","tcp_ece","tcp_cwr","tcp_ns","tcp_rs2","tcp_rs1","tcp_rs0","ETHERTYPES","ipv4","arp","wol","rarp","ipv6","atalk","aarp","ipx_a","ipx_b","IP_PROTOCOLS","icmp","icmp4","icmpv4","igmp","ipip","tcp","egp","igp","udp","rdp","esp","ah","icmp6","icmpv6","l2tp","sctp","udplite","OPEN_BLOCK_KEYWORDS","macro","tag","cap","drop","accept","tee","watch","redirect","break","priority","RESERVED_WORDS","default","ztsrc","ztdest","vlan","vlanpcp","vlandei","ethertype","macsrc","macdest","ipsrc","ipdest","iptos","ipprotocol","sport","dport","chr","framesize","random","tand","tor","txor","tdiff","teq","tseq","treq","type","enum","class","define","import","include","log","not","xor","or","and","set","var","let","KEYWORD_TO_API_MAP","MATCH_ARG_COUNTS","INTL_ALPHANUM_REGEX","RegExp","_isValidName","n","length","indexOf","charAt","i","c","test","IPV6_REGEX","IPV4_REGEX","_parseNum","toLowerCase","substr","parseInt","isNaN","e","_cleanMac","m","m2","charcount","_cleanHex","_renderMatches","mtree","rules","macros","caps","tags","params","k","match","args","argCount","arg","tmp","push","zt","num","r","parseFloat","probability","Math","floor","mac","ip","slashIdx","ipOnly","icmpType","icmpCode","fn","tn","asplit","split","start","end","mask","chrb","maskhi","masklo","bit","abs","toString","tagId","tagValue","id","flags","enums","value","_renderActions","rtree","action","macroName","macroParamArray","parenIdx","pns","macroParams","param","pidx","err","Array","isArray","maxLength","target","slice","address","compile","src","blockStack","curr","skipRestOfLine","idx","lineNo","lineIdx","ch","endOfBlock","pop","parsed","baseRuleTree","keyword","tagName","dfl","tkeyword","bits","j","b","flagName","enumName","dfl2","capName","capRules","dn","cn","console","stack"],"sources":["/mnt/Datengrab/python/Zero-tier/frontend/src/external/RuleCompiler.js"],"sourcesContent":["/* eslint-disable */\n// rule-compiler.js from ZeroTierOne before its relicensing\n// source:\n// https://github.com/zerotier/ZeroTierOne/blob/553101e8b5a988003f594037dda82301b0967625/rule-compiler/rule-compiler.js\n\n// Names for bits in characteristics -- 0==LSB, 63==MSB\nconst CHARACTERISTIC_BITS = {\n  inbound: 63,\n  multicast: 62,\n  broadcast: 61,\n  ipauth: 60,\n  macauth: 59,\n  tcp_fin: 0,\n  tcp_syn: 1,\n  tcp_rst: 2,\n  tcp_psh: 3,\n  tcp_ack: 4,\n  tcp_urg: 5,\n  tcp_ece: 6,\n  tcp_cwr: 7,\n  tcp_ns: 8,\n  tcp_rs2: 9,\n  tcp_rs1: 10,\n  tcp_rs0: 11,\n};\n\n// Shorthand names for common ethernet types\nconst ETHERTYPES = {\n  ipv4: 0x0800,\n  arp: 0x0806,\n  wol: 0x0842,\n  rarp: 0x8035,\n  ipv6: 0x86dd,\n  atalk: 0x809b,\n  aarp: 0x80f3,\n  ipx_a: 0x8137,\n  ipx_b: 0x8138,\n};\n\n// Shorthand names for common IP protocols\nconst IP_PROTOCOLS = {\n  icmp: 0x01,\n  icmp4: 0x01,\n  icmpv4: 0x01,\n  igmp: 0x02,\n  ipip: 0x04,\n  tcp: 0x06,\n  egp: 0x08,\n  igp: 0x09,\n  udp: 0x11,\n  rdp: 0x1b,\n  esp: 0x32,\n  ah: 0x33,\n  icmp6: 0x3a,\n  icmpv6: 0x3a,\n  l2tp: 0x73,\n  sctp: 0x84,\n  udplite: 0x88,\n};\n\n// Keywords that open new blocks that must be terminated by a semicolon\nconst OPEN_BLOCK_KEYWORDS = {\n  macro: true,\n  tag: true,\n  cap: true,\n  drop: true,\n  accept: true,\n  tee: true,\n  watch: true,\n  redirect: true,\n  break: true,\n  priority: true,\n};\n\n// Reserved words that can't be used as tag, capability, or rule set names\nconst RESERVED_WORDS = {\n  macro: true,\n  tag: true,\n  cap: true,\n  default: true,\n\n  drop: true,\n  accept: true,\n  tee: true,\n  watch: true,\n  redirect: true,\n  break: true,\n  priority: true,\n\n  ztsrc: true,\n  ztdest: true,\n  vlan: true,\n  vlanpcp: true,\n  vlandei: true,\n  ethertype: true,\n  macsrc: true,\n  macdest: true,\n  ipsrc: true,\n  ipdest: true,\n  iptos: true,\n  ipprotocol: true,\n  icmp: true,\n  sport: true,\n  dport: true,\n  chr: true,\n  framesize: true,\n  random: true,\n  tand: true,\n  tor: true,\n  txor: true,\n  tdiff: true,\n  teq: true,\n  tseq: true,\n  treq: true,\n\n  type: true,\n  enum: true,\n  class: true,\n  define: true,\n  import: true,\n  include: true,\n  log: true,\n  not: true,\n  xor: true,\n  or: true,\n  and: true,\n  set: true,\n  var: true,\n  let: true,\n};\n\nconst KEYWORD_TO_API_MAP = {\n  drop: \"ACTION_DROP\",\n  accept: \"ACTION_ACCEPT\",\n  tee: \"ACTION_TEE\",\n  watch: \"ACTION_WATCH\",\n  redirect: \"ACTION_REDIRECT\",\n  break: \"ACTION_BREAK\",\n  priority: \"ACTION_PRIORITY\",\n\n  ztsrc: \"MATCH_SOURCE_ZEROTIER_ADDRESS\",\n  ztdest: \"MATCH_DEST_ZEROTIER_ADDRESS\",\n  vlan: \"MATCH_VLAN_ID\",\n  vlanpcp: \"MATCH_VLAN_PCP\",\n  vlandei: \"MATCH_VLAN_DEI\",\n  ethertype: \"MATCH_ETHERTYPE\",\n  macsrc: \"MATCH_MAC_SOURCE\",\n  macdest: \"MATCH_MAC_DEST\",\n  //'ipsrc': '', // special handling since we programmatically differentiate between V4 and V6\n  //'ipdest': '', // special handling\n  iptos: \"MATCH_IP_TOS\",\n  ipprotocol: \"MATCH_IP_PROTOCOL\",\n  icmp: \"MATCH_ICMP\",\n  sport: \"MATCH_IP_SOURCE_PORT_RANGE\",\n  dport: \"MATCH_IP_DEST_PORT_RANGE\",\n  chr: \"MATCH_CHARACTERISTICS\",\n  framesize: \"MATCH_FRAME_SIZE_RANGE\",\n  random: \"MATCH_RANDOM\",\n  tand: \"MATCH_TAGS_BITWISE_AND\",\n  tor: \"MATCH_TAGS_BITWISE_OR\",\n  txor: \"MATCH_TAGS_BITWISE_XOR\",\n  tdiff: \"MATCH_TAGS_DIFFERENCE\",\n  teq: \"MATCH_TAGS_EQUAL\",\n  tseq: \"MATCH_TAG_SENDER\",\n  treq: \"MATCH_TAG_RECEIVER\",\n};\n\n// Number of args for each match\nconst MATCH_ARG_COUNTS = {\n  ztsrc: 1,\n  ztdest: 1,\n  vlan: 1,\n  vlanpcp: 1,\n  vlandei: 1,\n  ethertype: 1,\n  macsrc: 1,\n  macdest: 1,\n  ipsrc: 1,\n  ipdest: 1,\n  iptos: 2,\n  ipprotocol: 1,\n  icmp: 2,\n  sport: 1,\n  dport: 1,\n  chr: 1,\n  framesize: 1,\n  random: 1,\n  tand: 2,\n  tor: 2,\n  txor: 2,\n  tdiff: 2,\n  teq: 2,\n  tseq: 2,\n  treq: 2,\n};\n\n// Regex of all alphanumeric characters in Unicode\nconst INTL_ALPHANUM_REGEX = new RegExp(\n  \"[0-9A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]\"\n);\n\n// Checks whether something is a valid capability, tag, or macro name\nfunction _isValidName(n) {\n  if (typeof n !== \"string\" || n.length === 0) return false;\n  if (\"0123456789\".indexOf(n.charAt(0)) >= 0) return false;\n  for (let i = 0; i < n.length; ++i) {\n    let c = n.charAt(i);\n    if (c !== \"_\" && !INTL_ALPHANUM_REGEX.test(c)) return false;\n  }\n  return true;\n}\n\n// Regexes for checking the basic syntactic validity of IP addresses\nconst IPV6_REGEX = new RegExp(\n  \"(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\"\n);\nconst IPV4_REGEX = new RegExp(\n  \"((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\"\n);\n\nfunction _parseNum(n) {\n  try {\n    if (typeof n !== \"string\" || n.length === 0) return -1;\n    n = n.toLowerCase();\n    if (n.length > 2 && n.substr(0, 2) === \"0x\") n = parseInt(n.substr(2), 16);\n    else n = parseInt(n, 10);\n    return typeof n === \"number\" && n !== null && !isNaN(n) ? n : -1;\n  } catch (e) {\n    return -1;\n  }\n}\n\nfunction _cleanMac(m) {\n  m = m.toLowerCase();\n  var m2 = \"\";\n  let charcount = 0;\n  for (let i = 0; i < m.length && m2.length < 17; ++i) {\n    let c = m.charAt(i);\n    if (\"0123456789abcdef\".indexOf(c) >= 0) {\n      m2 += c;\n      charcount++;\n      if (m2.length > 0 && m2.length !== 17 && charcount >= 2) {\n        m2 += \":\";\n        charcount = 0;\n      }\n    }\n  }\n  return m2;\n}\n\nfunction _cleanHex(m) {\n  m = m.toLowerCase();\n  var m2 = \"\";\n  for (let i = 0; i < m.length; ++i) {\n    let c = m.charAt(i);\n    if (\"0123456789abcdef\".indexOf(c) >= 0) m2 += c;\n  }\n  return m2;\n}\n\nfunction _renderMatches(mtree, rules, macros, caps, tags, params) {\n  let not = false;\n  let or = false;\n  for (let k = 0; k < mtree.length; ++k) {\n    let match =\n      typeof mtree[k][0] === \"string\" ? mtree[k][0].toLowerCase() : \"\";\n    if (match.length === 0 || match === \"and\") {\n      // AND is the default\n      continue;\n    } else if (match === \"not\") {\n      not = true;\n    } else if (match === \"or\") {\n      or = true;\n    } else {\n      let args = [];\n      let argCount = MATCH_ARG_COUNTS[match];\n      if (!argCount)\n        return [\n          mtree[k][1],\n          mtree[k][2],\n          'Unrecognized match type \"' + match + '\".',\n        ];\n      for (let i = 0; i < argCount; ++i) {\n        if (++k >= mtree.length)\n          return [\n            mtree[k - 1][1],\n            mtree[k - 1][2],\n            \"Missing argument(s) to match.\",\n          ];\n        let arg = mtree[k][0];\n        if (\n          typeof arg !== \"string\" ||\n          arg in RESERVED_WORDS ||\n          arg.length === 0\n        )\n          return [\n            mtree[k - 1][1],\n            mtree[k - 1][2],\n            \"Missing argument(s) to match (invalid argument or argument is reserved word).\",\n          ];\n        if (arg.charAt(0) === \"$\") {\n          let tmp = params[arg];\n          if (typeof tmp === \"undefined\")\n            return [mtree[k][1], mtree[k][2], \"Undefined variable name.\"];\n          args.push([tmp, mtree[k][1], mtree[k][2]]);\n        } else {\n          args.push(mtree[k]);\n        }\n      }\n\n      switch (match) {\n        case \"ztsrc\":\n        case \"ztdest\":\n          {\n            let zt = _cleanHex(args[0][0]);\n            if (zt.length !== 10)\n              return [args[0][1], args[0][2], \"Invalid ZeroTier address.\"];\n            rules.push({\n              type: KEYWORD_TO_API_MAP[match],\n              not: not,\n              or: or,\n              zt: zt,\n            });\n          }\n          break;\n\n        case \"vlan\":\n        case \"vlanpcp\":\n        case \"vlandei\":\n        case \"ethertype\":\n        case \"ipprotocol\":\n          {\n            let num = null;\n            switch (match) {\n              case \"ethertype\":\n                num = ETHERTYPES[args[0][0]];\n                break;\n              case \"ipprotocol\":\n                num = IP_PROTOCOLS[args[0][0]];\n                break;\n            }\n            if (typeof num !== \"number\") num = _parseNum(args[0][0]);\n            if (\n              typeof num !== \"number\" ||\n              num < 0 ||\n              num > 0xffffffff ||\n              num === null\n            )\n              return [args[0][1], args[0][2], \"Invalid numeric value.\"];\n            let r = {\n              type: KEYWORD_TO_API_MAP[match],\n              not: not,\n              or: or,\n            };\n            switch (match) {\n              case \"vlan\":\n                r[\"vlanId\"] = num;\n                break;\n              case \"vlanpcp\":\n                r[\"vlanPcp\"] = num;\n                break;\n              case \"vlandei\":\n                r[\"vlanDei\"] = num;\n                break;\n              case \"ethertype\":\n                r[\"etherType\"] = num;\n                break;\n              case \"ipprotocol\":\n                r[\"ipProtocol\"] = num;\n                break;\n            }\n            rules.push(r);\n          }\n          break;\n\n        case \"random\":\n          {\n            let num = parseFloat(args[0][0]) || 0.0;\n            if (num < 0.0) num = 0.0;\n            if (num > 1.0) num = 1.0;\n            rules.push({\n              type: KEYWORD_TO_API_MAP[match],\n              not: not,\n              or: or,\n              probability: Math.floor(4294967295 * num),\n            });\n          }\n          break;\n\n        case \"macsrc\":\n        case \"macdest\":\n          {\n            let mac = _cleanMac(args[0][0]);\n            if (mac.length !== 17)\n              return [args[0][1], args[0][2], \"Invalid MAC address.\"];\n            rules.push({\n              type: KEYWORD_TO_API_MAP[match],\n              not: not,\n              or: or,\n              mac: mac,\n            });\n          }\n          break;\n\n        case \"ipsrc\":\n        case \"ipdest\":\n          {\n            let ip = args[0][0];\n            let slashIdx = ip.indexOf(\"/\");\n            if (slashIdx <= 0)\n              return [\n                args[0][1],\n                args[0][2],\n                \"Missing /bits netmask length designation in IP.\",\n              ];\n            let ipOnly = ip.substr(0, slashIdx);\n            if (IPV6_REGEX.test(ipOnly)) {\n              rules.push({\n                type:\n                  match === \"ipsrc\" ? \"MATCH_IPV6_SOURCE\" : \"MATCH_IPV6_DEST\",\n                not: not,\n                or: or,\n                ip: ip,\n              });\n            } else if (IPV4_REGEX.test(ipOnly)) {\n              rules.push({\n                type:\n                  match === \"ipsrc\" ? \"MATCH_IPV4_SOURCE\" : \"MATCH_IPV4_DEST\",\n                not: not,\n                or: or,\n                ip: ip,\n              });\n            } else {\n              return [\n                args[0][1],\n                args[0][2],\n                \"Invalid IP address (not valid IPv4 or IPv6).\",\n              ];\n            }\n          }\n          break;\n\n        case \"icmp\":\n          {\n            let icmpType = _parseNum(args[0][0]);\n            if (icmpType < 0 || icmpType > 0xff)\n              return [args[0][1], args[0][2], \"Missing or invalid ICMP type.\"];\n            let icmpCode = _parseNum(args[1][0]); // -1 okay, indicates don't match code\n            if (icmpCode > 0xff)\n              return [\n                args[1][1],\n                args[1][2],\n                \"Invalid ICMP code (use -1 for none).\",\n              ];\n            rules.push({\n              type: \"MATCH_ICMP\",\n              not: not,\n              or: or,\n              icmpType: icmpType,\n              icmpCode: icmpCode < 0 ? null : icmpCode,\n            });\n          }\n          break;\n\n        case \"sport\":\n        case \"dport\":\n        case \"framesize\":\n          {\n            let arg = args[0][0];\n            let fn = null;\n            let tn = null;\n            if (arg.indexOf(\"-\") > 0) {\n              let asplit = arg.split(\"-\");\n              if (asplit.length !== 2) {\n                return [args[0][1], args[0][2], \"Invalid numeric range.\"];\n              } else {\n                fn = _parseNum(asplit[0]);\n                tn = _parseNum(asplit[1]);\n              }\n            } else {\n              fn = _parseNum(arg);\n              tn = fn;\n            }\n            if (fn < 0 || fn > 0xffff || tn < 0 || tn > 0xffff || tn < fn)\n              return [args[0][1], args[0][2], \"Invalid numeric range.\"];\n            rules.push({\n              type: KEYWORD_TO_API_MAP[match],\n              not: not,\n              or: or,\n              start: fn,\n              end: tn,\n            });\n          }\n          break;\n\n        case \"iptos\":\n          {\n            let mask = _parseNum(args[0][0]);\n            if (\n              typeof mask !== \"number\" ||\n              mask < 0 ||\n              mask > 0xff ||\n              mask === null\n            )\n              return [args[0][1], args[0][2], \"Invalid mask.\"];\n            let arg = args[1][0];\n            let fn = null;\n            let tn = null;\n            if (arg.indexOf(\"-\") > 0) {\n              let asplit = arg.split(\"-\");\n              if (asplit.length !== 2) {\n                return [args[1][1], args[1][2], \"Invalid value range.\"];\n              } else {\n                fn = _parseNum(asplit[0]);\n                tn = _parseNum(asplit[1]);\n              }\n            } else {\n              fn = _parseNum(arg);\n              tn = fn;\n            }\n            if (fn < 0 || fn > 0xff || tn < 0 || tn > 0xff || tn < fn)\n              return [args[1][1], args[1][2], \"Invalid value range.\"];\n            rules.push({\n              type: \"MATCH_IP_TOS\",\n              not: not,\n              or: or,\n              mask: mask,\n              start: fn,\n              end: tn,\n            });\n          }\n          break;\n\n        case \"chr\":\n          {\n            let chrb = args[0][0].split(/[,]+/);\n            let maskhi = 0;\n            let masklo = 0;\n            for (let i = 0; i < chrb.length; ++i) {\n              if (chrb[i].length > 0) {\n                let tmp = CHARACTERISTIC_BITS[chrb[i]];\n                let bit = typeof tmp === \"number\" ? tmp : _parseNum(chrb[i]);\n                if (bit < 0 || bit > 63)\n                  return [\n                    args[0][1],\n                    args[0][2],\n                    \"Invalid bit index (range 0-63) or unrecognized name.\",\n                  ];\n                if (bit >= 32) maskhi |= Math.abs(1 << (bit - 32));\n                else masklo |= Math.abs(1 << bit);\n              }\n            }\n            maskhi = Math.abs(maskhi).toString(16);\n            while (maskhi.length < 8) maskhi = \"0\" + maskhi;\n            masklo = Math.abs(masklo).toString(16);\n            while (masklo.length < 8) masklo = \"0\" + masklo;\n            rules.push({\n              type: \"MATCH_CHARACTERISTICS\",\n              not: not,\n              or: or,\n              mask: maskhi + masklo,\n            });\n          }\n          break;\n\n        case \"tand\":\n        case \"tor\":\n        case \"txor\":\n        case \"tdiff\":\n        case \"teq\":\n        case \"tseq\":\n        case \"treq\":\n          {\n            let tag = tags[args[0][0]];\n            let tagId = -1;\n            let tagValue = -1;\n            if (tag) {\n              tagId = tag.id;\n              tagValue = args[1][0];\n              if (tagValue in tag.flags) tagValue = tag.flags[tagValue];\n              else if (tagValue in tag.enums) tagValue = tag.enums[tagValue];\n              else tagValue = _parseNum(tagValue);\n            } else {\n              tagId = _parseNum(args[0][0]);\n              tagValue = _parseNum(args[1][0]);\n            }\n            if (tagId < 0 || tagId > 0xffffffff)\n              return [\n                args[0][1],\n                args[0][2],\n                \"Undefined tag name and invalid tag value.\",\n              ];\n            if (tagValue < 0 || tagValue > 0xffffffff)\n              return [\n                args[1][1],\n                args[1][2],\n                \"Invalid tag value or unrecognized flag/enum name.\",\n              ];\n            rules.push({\n              type: KEYWORD_TO_API_MAP[match],\n              not: not,\n              or: or,\n              id: tagId,\n              value: tagValue,\n            });\n          }\n          break;\n      }\n\n      not = false;\n      or = false;\n    }\n  }\n  return null;\n}\n\nfunction _renderActions(rtree, rules, macros, caps, tags, params) {\n  for (let k = 0; k < rtree.length; ++k) {\n    let action =\n      typeof rtree[k][0] === \"string\" ? rtree[k][0].toLowerCase() : \"\";\n    if (action.length === 0) {\n      continue;\n    } else if (action === \"include\") {\n      if (k + 1 >= rtree.length)\n        return [\n          rtree[k][1],\n          rtree[k][2],\n          \"Include directive is missing a macro name.\",\n        ];\n      let macroName = rtree[k + 1][0];\n      ++k;\n\n      let macroParamArray = [];\n      let parenIdx = macroName.indexOf(\"(\");\n      if (parenIdx > 0) {\n        let pns = macroName.substr(parenIdx + 1).split(/[,)]+/);\n        for (let k = 0; k < pns.length; ++k) {\n          if (pns[k].length > 0) macroParamArray.push(pns[k]);\n        }\n        macroName = macroName.substr(0, parenIdx);\n      }\n\n      let macro = macros[macroName];\n      if (!macro) return [rtree[k][1], rtree[k][2], \"Macro name not found.\"];\n      let macroParams = {};\n      for (let param in macro.params) {\n        let pidx = macro.params[param];\n        if (pidx >= macroParamArray.length)\n          return [\n            rtree[k][1],\n            rtree[k][2],\n            \"Missing one or more required macro parameter.\",\n          ];\n        macroParams[param] = macroParamArray[pidx];\n      }\n\n      let err = _renderActions(\n        macro.rules,\n        rules,\n        macros,\n        caps,\n        tags,\n        macroParams\n      );\n      if (err !== null) return err;\n    } else if (action === \"drop\" || action === \"accept\" || action === \"break\") {\n      // actions without arguments\n      if (k + 1 < rtree.length && Array.isArray(rtree[k + 1][0])) {\n        let mtree = rtree[k + 1];\n        ++k;\n        let err = _renderMatches(mtree, rules, macros, caps, tags, params);\n        if (err !== null) return err;\n      }\n      rules.push({\n        type: KEYWORD_TO_API_MAP[action],\n      });\n    } else if (action === \"tee\" || action === \"watch\") {\n      // actions with arguments (ZeroTier address)\n      if (\n        k + 1 < rtree.length &&\n        Array.isArray(rtree[k + 1][0]) &&\n        rtree[k + 1][0].length >= 2\n      ) {\n        let mtree = rtree[k + 1];\n        ++k;\n        let maxLength = _parseNum(mtree[0][0]);\n        if (maxLength < -1 || maxLength > 0xffff)\n          return [\n            mtree[0][1],\n            mtree[1][2],\n            \"Tee/watch max packet length to forward invalid or out of range.\",\n          ];\n        let target = mtree[1][0];\n        if (typeof target !== \"string\" || target.length !== 10)\n          return [\n            mtree[1][1],\n            mtree[1][2],\n            \"Missing or invalid ZeroTier address target for tee/watch.\",\n          ];\n        let err = _renderMatches(\n          mtree.slice(2),\n          rules,\n          macros,\n          caps,\n          tags,\n          params\n        );\n        if (err !== null) return err;\n        rules.push({\n          type: KEYWORD_TO_API_MAP[action],\n          address: target,\n          length: maxLength,\n        });\n      } else {\n        return [\n          rtree[k][1],\n          rtree[k][2],\n          \"The tee and watch actions require two paremters (max length or 0 for all, target).\",\n        ];\n      }\n    } else if (action === \"redirect\") {\n      if (\n        k + 1 < rtree.length &&\n        Array.isArray(rtree[k + 1][0]) &&\n        rtree[k + 1][0].length >= 1\n      ) {\n        let mtree = rtree[k + 1];\n        ++k;\n        let target = mtree[0][0];\n        if (typeof target !== \"string\" || target.length !== 10)\n          return [\n            mtree[0][1],\n            mtree[0][2],\n            \"Missing or invalid ZeroTier address target for redirect.\",\n          ];\n        let err = _renderMatches(\n          mtree.slice(1),\n          rules,\n          macros,\n          caps,\n          tags,\n          params\n        );\n        if (err !== null) return err;\n        rules.push({\n          type: KEYWORD_TO_API_MAP[action],\n          address: target,\n        });\n      } else {\n        return [\n          rtree[k][1],\n          rtree[k][2],\n          \"The redirect action requires a target parameter.\",\n        ];\n      }\n    } else {\n      return [\n        rtree[k][1],\n        rtree[k][2],\n        \"Unrecognized action or directive in rule set.\",\n      ];\n    }\n  }\n\n  return null;\n}\n\nexport function compile(src, rules, caps, tags) {\n  try {\n    if (typeof src !== \"string\")\n      return [0, 0, '\"src\" parameter must be a string.'];\n\n    // Pass 1: parse source into a tree of arrays of elements. Each element is a 3-item\n    // tuple consisting of string, line number, and character index in line to enable\n    // informative error messages to be returned.\n\n    var blockStack = [[]];\n    var curr = [\"\", -1, -1];\n    var skipRestOfLine = false;\n    for (\n      let idx = 0, lineNo = 1, lineIdx = 0;\n      idx < src.length;\n      ++idx, ++lineIdx\n    ) {\n      let ch = src.charAt(idx);\n      if (skipRestOfLine) {\n        if (ch === \"\\r\" || ch === \"\\n\") {\n          skipRestOfLine = false;\n          ++lineNo;\n          lineIdx = 0;\n        }\n      } else {\n        switch (ch) {\n          case \"\\n\":\n            ++lineNo;\n            lineIdx = 0;\n          case \"\\r\":\n          case \"\\t\":\n          case \" \":\n            if (curr[0].length > 0) {\n              let endOfBlock = false;\n              if (curr[0].charAt(curr[0].length - 1) === \";\") {\n                endOfBlock = true;\n                curr[0] = curr[0].substr(0, curr[0].length - 1);\n              }\n\n              if (curr[0].length > 0) {\n                blockStack[blockStack.length - 1].push(curr);\n              }\n              if (\n                endOfBlock &&\n                blockStack.length > 1 &&\n                blockStack[blockStack.length - 1].length > 0\n              ) {\n                blockStack[blockStack.length - 2].push(\n                  blockStack[blockStack.length - 1]\n                );\n                blockStack.pop();\n              } else if (curr[0] in OPEN_BLOCK_KEYWORDS) {\n                blockStack.push([]);\n              }\n\n              curr = [\"\", -1, -1];\n            }\n            break;\n          default:\n            if (curr[0].length === 0) {\n              if (ch === \"#\") {\n                skipRestOfLine = true;\n                continue;\n              } else {\n                curr[1] = lineNo;\n                curr[2] = lineIdx;\n              }\n            }\n            curr[0] += ch;\n            break;\n        }\n      }\n    }\n\n    if (curr[0].length > 0) {\n      if (curr[0].charAt(curr[0].length - 1) === \";\")\n        curr[0] = curr[0].substr(0, curr[0].length - 1);\n      if (curr[0].length > 0) blockStack[blockStack.length - 1].push(curr);\n    }\n    while (\n      blockStack.length > 1 &&\n      blockStack[blockStack.length - 1].length > 0\n    ) {\n      blockStack[blockStack.length - 2].push(blockStack[blockStack.length - 1]);\n      blockStack.pop();\n    }\n    var parsed = blockStack[0];\n\n    // Pass 2: parse tree into capabilities, tags, rule sets, and document-level rules.\n\n    let baseRuleTree = [];\n    let macros = {};\n    for (let i = 0; i < parsed.length; ++i) {\n      let keyword =\n        typeof parsed[i][0] === \"string\" ? parsed[i][0].toLowerCase() : null;\n      if (keyword === \"macro\") {\n        // Define macros\n\n        if (\n          i + 1 >= parsed.length ||\n          !Array.isArray(parsed[i + 1]) ||\n          parsed[i + 1].length < 1 ||\n          !Array.isArray(parsed[i + 1][0])\n        )\n          return [\n            parsed[i][1],\n            parsed[i][2],\n            \"Macro definition is missing name.\",\n          ];\n        let macro = parsed[++i];\n        let macroName = macro[0][0].toLowerCase();\n\n        let params = {};\n        let parenIdx = macroName.indexOf(\"(\");\n        if (parenIdx > 0) {\n          let pns = macroName.substr(parenIdx + 1).split(/[,)]+/);\n          for (let k = 0; k < pns.length; ++k) {\n            if (pns[k].length > 0) params[pns[k]] = k;\n          }\n          macroName = macroName.substr(0, parenIdx);\n        }\n\n        if (!_isValidName(macroName))\n          return [macro[0][1], macro[0][2], \"Invalid macro name.\"];\n        if (macroName in RESERVED_WORDS)\n          return [macro[0][1], macro[0][2], \"Macro name is a reserved word.\"];\n\n        if (macroName in macros)\n          return [\n            macro[0][1],\n            macro[0][2],\n            \"Multiple definition of macro name.\",\n          ];\n\n        macros[macroName] = {\n          params: params,\n          rules: macro.slice(1),\n        };\n      } else if (keyword === \"tag\") {\n        // Define tags\n\n        if (\n          i + 1 >= parsed.length ||\n          !Array.isArray(parsed[i + 1]) ||\n          parsed[i + 1].length < 1 ||\n          !Array.isArray(parsed[i + 1][0])\n        )\n          return [\n            parsed[i][1],\n            parsed[i][2],\n            \"Tag definition is missing name.\",\n          ];\n        let tag = parsed[++i];\n        let tagName = tag[0][0].toLowerCase();\n\n        if (!_isValidName(tagName))\n          return [tag[0][1], tag[0][2], \"Invalid tag name.\"];\n        if (tagName in RESERVED_WORDS)\n          return [tag[0][1], tag[0][2], \"Tag name is a reserved word.\"];\n\n        if (tagName in tags)\n          return [tag[0][1], tag[0][2], \"Multiple definition of tag name.\"];\n\n        let flags = {};\n        let enums = {};\n        let id = -1;\n        let dfl = null;\n        for (let k = 1; k < tag.length; ++k) {\n          let tkeyword = tag[k][0].toLowerCase();\n          if (tkeyword === \"id\") {\n            if (id >= 0)\n              return [tag[k][1], tag[k][2], \"Duplicate tag id definition.\"];\n            if (k + 1 >= tag.length)\n              return [tag[k][1], tag[k][2], \"Missing numeric value for ID.\"];\n            id = _parseNum(tag[++k][0]);\n            if (id < 0 || id > 0xffffffff)\n              return [tag[k][1], tag[k][2], \"Invalid or out of range tag ID.\"];\n          } else if (tkeyword === \"default\") {\n            if (dfl !== null)\n              return [tag[k][1], tag[k][2], \"Duplicate tag default directive.\"];\n            if (k + 1 >= tag.length)\n              return [tag[k][1], tag[k][2], \"Missing value for default.\"];\n            dfl = tag[++k][0];\n          } else if (tkeyword === \"flag\") {\n            if (k + 2 >= tag.length)\n              return [\n                tag[k][1],\n                tag[k][2],\n                \"Missing tag flag name or bit index.\",\n              ];\n            ++k;\n            let bits = tag[k][0].split(/[,]+/);\n            let mask = 0;\n            for (let j = 0; j < bits.length; ++j) {\n              let b = bits[j].toLowerCase();\n              if (b in flags) {\n                mask |= flags[b];\n              } else {\n                b = _parseNum(b);\n                if (b < 0 || b > 31)\n                  return [\n                    tag[k][1],\n                    tag[k][2],\n                    \"Bit index invalid, out of range, or references an undefined flag name.\",\n                  ];\n                mask |= 1 << b;\n              }\n            }\n            let flagName = tag[++k][0].toLowerCase();\n            if (!_isValidName(flagName))\n              return [tag[k][1], tag[k][2], \"Invalid or reserved flag name.\"];\n            if (flagName in flags)\n              return [\n                tag[k][1],\n                tag[k][2],\n                \"Duplicate flag name in tag definition.\",\n              ];\n            flags[flagName] = mask;\n          } else if (tkeyword === \"enum\") {\n            if (k + 2 >= tag.length)\n              return [tag[k][1], tag[k][2], \"Missing tag enum name or value.\"];\n            ++k;\n            let value = _parseNum(tag[k][0]);\n            if (value < 0 || value > 0xffffffff)\n              return [\n                tag[k][1],\n                tag[k][2],\n                \"Tag enum value invalid or out of range.\",\n              ];\n            let enumName = tag[++k][0].toLowerCase();\n            if (!_isValidName(enumName))\n              return [\n                tag[k][1],\n                tag[k][2],\n                \"Invalid or reserved tag enum name.\",\n              ];\n            if (enumName in enums)\n              return [\n                tag[k][1],\n                tag[k][2],\n                \"Duplicate enum name in tag definition.\",\n              ];\n            enums[enumName] = value;\n          } else {\n            return [\n              tag[k][1],\n              tag[k][2],\n              \"Unrecognized keyword in tag definition.\",\n            ];\n          }\n        }\n        if (id < 0)\n          return [\n            tag[0][1],\n            tag[0][2],\n            \"Tag definition is missing a numeric ID.\",\n          ];\n\n        if (typeof dfl === \"string\") {\n          let dfl2 = enums[dfl];\n          if (typeof dfl2 === \"number\") {\n            dfl = dfl2;\n          } else {\n            dfl2 = flags[dfl];\n            if (typeof dfl2 === \"number\") {\n              dfl = dfl2;\n            } else {\n              dfl = Math.abs(parseInt(dfl) || 0) & 0xffffffff;\n            }\n          }\n        } else if (typeof dfl === \"number\") {\n          dfl = Math.abs(dfl) & 0xffffffff;\n        }\n\n        tags[tagName] = {\n          id: id,\n          default: dfl,\n          enums: enums,\n          flags: flags,\n        };\n      } else if (keyword === \"cap\") {\n        // Define capabilities\n\n        if (\n          i + 1 >= parsed.length ||\n          !Array.isArray(parsed[i + 1]) ||\n          parsed[i + 1].length < 1 ||\n          !Array.isArray(parsed[i + 1][0])\n        )\n          return [\n            parsed[i][1],\n            parsed[i][2],\n            \"Capability definition is missing name.\",\n          ];\n        let cap = parsed[++i];\n        let capName = cap[0][0].toLowerCase();\n\n        if (!_isValidName(capName))\n          return [cap[0][1], cap[0][2], \"Invalid capability name.\"];\n        if (capName in RESERVED_WORDS)\n          return [cap[0][1], cap[0][2], \"Capability name is a reserved word.\"];\n\n        if (capName in caps)\n          return [\n            cap[0][1],\n            cap[0][2],\n            \"Multiple definition of capability name.\",\n          ];\n\n        let capRules = [];\n        let id = -1;\n        let dfl = false;\n        for (let k = 1; k < cap.length; ++k) {\n          let dn =\n            typeof cap[k][0] === \"string\" ? cap[k][0].toLowerCase() : null;\n          if (dn === \"id\") {\n            if (id >= 0)\n              return [\n                cap[k][1],\n                cap[k][2],\n                \"Duplicate id directive in capability definition.\",\n              ];\n            if (k + 1 >= cap.length)\n              return [cap[k][1], cap[k][2], \"Missing value for ID.\"];\n            id = _parseNum(cap[++k][0]);\n            if (id < 0 || id > 0xffffffff)\n              return [\n                cap[k - 1][1],\n                cap[k - 1][2],\n                \"Invalid or out of range capability ID.\",\n              ];\n            for (let cn in caps) {\n              if (caps[cn].id === id)\n                return [\n                  cap[k - 1][1],\n                  cap[k - 1][2],\n                  \"Duplicate capability ID.\",\n                ];\n            }\n          } else if (dn === \"default\") {\n            dfl = true;\n          } else {\n            capRules.push(cap[k]);\n          }\n        }\n        if (id < 0)\n          return [\n            cap[0][1],\n            cap[0][2],\n            \"Capability definition is missing a numeric ID.\",\n          ];\n\n        caps[capName] = {\n          id: id,\n          default: dfl,\n          rules: capRules,\n        };\n      } else {\n        baseRuleTree.push(parsed[i]);\n      }\n    }\n\n    // Pass 3: render low-level ZeroTier rules arrays for capabilities and base.\n\n    for (let capName in caps) {\n      let r = [];\n      let err = _renderActions(caps[capName].rules, r, macros, caps, tags, {});\n      if (err !== null) return err;\n      caps[capName].rules = r;\n    }\n\n    let err = _renderActions(baseRuleTree, rules, macros, caps, tags, {});\n    if (err !== null) return err;\n\n    return null;\n  } catch (e) {\n    console.log(e.stack);\n    return [0, 0, \"Unexpected exception: \" + e.toString()];\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}