{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"elm\", function () {\n    function switchState(source, setState, f) {\n      setState(f);\n      return f(source, setState);\n    }\n\n    var lowerRE = /[a-z]/;\n    var upperRE = /[A-Z]/;\n    var innerRE = /[a-zA-Z0-9_]/;\n    var digitRE = /[0-9]/;\n    var hexRE = /[0-9A-Fa-f]/;\n    var symbolRE = /[-&*+.\\\\/<>=?^|:]/;\n    var specialRE = /[(),[\\]{}]/;\n    var spacesRE = /[ \\v\\f]/; // newlines are handled in tokenizer\n\n    function normal() {\n      return function (source, setState) {\n        if (source.eatWhile(spacesRE)) {\n          return null;\n        }\n\n        var char = source.next();\n\n        if (specialRE.test(char)) {\n          return char === '{' && source.eat('-') ? switchState(source, setState, chompMultiComment(1)) : char === '[' && source.match('glsl|') ? switchState(source, setState, chompGlsl) : 'builtin';\n        }\n\n        if (char === '\\'') {\n          return switchState(source, setState, chompChar);\n        }\n\n        if (char === '\"') {\n          return source.eat('\"') ? source.eat('\"') ? switchState(source, setState, chompMultiString) : 'string' : switchState(source, setState, chompSingleString);\n        }\n\n        if (upperRE.test(char)) {\n          source.eatWhile(innerRE);\n          return 'variable-2';\n        }\n\n        if (lowerRE.test(char)) {\n          var isDef = source.pos === 1;\n          source.eatWhile(innerRE);\n          return isDef ? \"def\" : \"variable\";\n        }\n\n        if (digitRE.test(char)) {\n          if (char === '0') {\n            if (source.eat(/[xX]/)) {\n              source.eatWhile(hexRE); // should require at least 1\n\n              return \"number\";\n            }\n          } else {\n            source.eatWhile(digitRE);\n          }\n\n          if (source.eat('.')) {\n            source.eatWhile(digitRE); // should require at least 1\n          }\n\n          if (source.eat(/[eE]/)) {\n            source.eat(/[-+]/);\n            source.eatWhile(digitRE); // should require at least 1\n          }\n\n          return \"number\";\n        }\n\n        if (symbolRE.test(char)) {\n          if (char === '-' && source.eat('-')) {\n            source.skipToEnd();\n            return \"comment\";\n          }\n\n          source.eatWhile(symbolRE);\n          return \"keyword\";\n        }\n\n        if (char === '_') {\n          return \"keyword\";\n        }\n\n        return \"error\";\n      };\n    }\n\n    function chompMultiComment(nest) {\n      if (nest == 0) {\n        return normal();\n      }\n\n      return function (source, setState) {\n        while (!source.eol()) {\n          var char = source.next();\n\n          if (char == '{' && source.eat('-')) {\n            ++nest;\n          } else if (char == '-' && source.eat('}')) {\n            --nest;\n\n            if (nest === 0) {\n              setState(normal());\n              return 'comment';\n            }\n          }\n        }\n\n        setState(chompMultiComment(nest));\n        return 'comment';\n      };\n    }\n\n    function chompMultiString(source, setState) {\n      while (!source.eol()) {\n        var char = source.next();\n\n        if (char === '\"' && source.eat('\"') && source.eat('\"')) {\n          setState(normal());\n          return 'string';\n        }\n      }\n\n      return 'string';\n    }\n\n    function chompSingleString(source, setState) {\n      while (source.skipTo('\\\\\"')) {\n        source.next();\n        source.next();\n      }\n\n      if (source.skipTo('\"')) {\n        source.next();\n        setState(normal());\n        return 'string';\n      }\n\n      source.skipToEnd();\n      setState(normal());\n      return 'error';\n    }\n\n    function chompChar(source, setState) {\n      while (source.skipTo(\"\\\\'\")) {\n        source.next();\n        source.next();\n      }\n\n      if (source.skipTo(\"'\")) {\n        source.next();\n        setState(normal());\n        return 'string';\n      }\n\n      source.skipToEnd();\n      setState(normal());\n      return 'error';\n    }\n\n    function chompGlsl(source, setState) {\n      while (!source.eol()) {\n        var char = source.next();\n\n        if (char === '|' && source.eat(']')) {\n          setState(normal());\n          return 'string';\n        }\n      }\n\n      return 'string';\n    }\n\n    var wellKnownWords = {\n      case: 1,\n      of: 1,\n      as: 1,\n      if: 1,\n      then: 1,\n      else: 1,\n      let: 1,\n      in: 1,\n      type: 1,\n      alias: 1,\n      module: 1,\n      where: 1,\n      import: 1,\n      exposing: 1,\n      port: 1\n    };\n    return {\n      startState: function startState() {\n        return {\n          f: normal()\n        };\n      },\n      copyState: function copyState(s) {\n        return {\n          f: s.f\n        };\n      },\n      token: function token(stream, state) {\n        var type = state.f(stream, function (s) {\n          state.f = s;\n        });\n        var word = stream.current();\n        return wellKnownWords.hasOwnProperty(word) ? 'keyword' : type;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-elm\", \"elm\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","switchState","source","setState","f","lowerRE","upperRE","innerRE","digitRE","hexRE","symbolRE","specialRE","spacesRE","normal","eatWhile","char","next","test","eat","chompMultiComment","match","chompGlsl","chompChar","chompMultiString","chompSingleString","isDef","pos","skipToEnd","nest","eol","skipTo","wellKnownWords","case","of","as","if","then","else","let","in","type","alias","where","import","exposing","port","startState","copyState","s","token","stream","state","word","current","hasOwnProperty","defineMIME"],"sources":["/mnt/Datengrab/python/Zero-tier/frontend/node_modules/codemirror/mode/elm/elm.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"elm\", function() {\n\n    function switchState(source, setState, f)\n    {\n      setState(f);\n      return f(source, setState);\n    }\n\n    var lowerRE = /[a-z]/;\n    var upperRE = /[A-Z]/;\n    var innerRE = /[a-zA-Z0-9_]/;\n\n    var digitRE = /[0-9]/;\n    var hexRE = /[0-9A-Fa-f]/;\n    var symbolRE = /[-&*+.\\\\/<>=?^|:]/;\n    var specialRE = /[(),[\\]{}]/;\n    var spacesRE = /[ \\v\\f]/; // newlines are handled in tokenizer\n\n    function normal()\n    {\n      return function(source, setState)\n      {\n        if (source.eatWhile(spacesRE))\n        {\n          return null;\n        }\n\n        var char = source.next();\n\n        if (specialRE.test(char))\n        {\n          return (char === '{' && source.eat('-'))\n            ? switchState(source, setState, chompMultiComment(1))\n            : (char === '[' && source.match('glsl|'))\n                ? switchState(source, setState, chompGlsl)\n                : 'builtin';\n        }\n\n        if (char === '\\'')\n        {\n          return switchState(source, setState, chompChar);\n        }\n\n        if (char === '\"')\n        {\n          return source.eat('\"')\n            ? source.eat('\"')\n                ? switchState(source, setState, chompMultiString)\n                : 'string'\n            : switchState(source, setState, chompSingleString);\n        }\n\n        if (upperRE.test(char))\n        {\n          source.eatWhile(innerRE);\n          return 'variable-2';\n        }\n\n        if (lowerRE.test(char))\n        {\n          var isDef = source.pos === 1;\n          source.eatWhile(innerRE);\n          return isDef ? \"def\" : \"variable\";\n        }\n\n        if (digitRE.test(char))\n        {\n          if (char === '0')\n          {\n            if (source.eat(/[xX]/))\n            {\n              source.eatWhile(hexRE); // should require at least 1\n              return \"number\";\n            }\n          }\n          else\n          {\n            source.eatWhile(digitRE);\n          }\n          if (source.eat('.'))\n          {\n            source.eatWhile(digitRE); // should require at least 1\n          }\n          if (source.eat(/[eE]/))\n          {\n            source.eat(/[-+]/);\n            source.eatWhile(digitRE); // should require at least 1\n          }\n          return \"number\";\n        }\n\n        if (symbolRE.test(char))\n        {\n          if (char === '-' && source.eat('-'))\n          {\n            source.skipToEnd();\n            return \"comment\";\n          }\n          source.eatWhile(symbolRE);\n          return \"keyword\";\n        }\n\n        if (char === '_')\n        {\n          return \"keyword\";\n        }\n\n        return \"error\";\n      }\n    }\n\n    function chompMultiComment(nest)\n    {\n      if (nest == 0)\n      {\n        return normal();\n      }\n      return function(source, setState)\n      {\n        while (!source.eol())\n        {\n          var char = source.next();\n          if (char == '{' && source.eat('-'))\n          {\n            ++nest;\n          }\n          else if (char == '-' && source.eat('}'))\n          {\n            --nest;\n            if (nest === 0)\n            {\n              setState(normal());\n              return 'comment';\n            }\n          }\n        }\n        setState(chompMultiComment(nest));\n        return 'comment';\n      }\n    }\n\n    function chompMultiString(source, setState)\n    {\n      while (!source.eol())\n      {\n        var char = source.next();\n        if (char === '\"' && source.eat('\"') && source.eat('\"'))\n        {\n          setState(normal());\n          return 'string';\n        }\n      }\n      return 'string';\n    }\n\n    function chompSingleString(source, setState)\n    {\n      while (source.skipTo('\\\\\"')) { source.next(); source.next(); }\n      if (source.skipTo('\"'))\n      {\n        source.next();\n        setState(normal());\n        return 'string';\n      }\n      source.skipToEnd();\n      setState(normal());\n      return 'error';\n    }\n\n    function chompChar(source, setState)\n    {\n      while (source.skipTo(\"\\\\'\")) { source.next(); source.next(); }\n      if (source.skipTo(\"'\"))\n      {\n        source.next();\n        setState(normal());\n        return 'string';\n      }\n      source.skipToEnd();\n      setState(normal());\n      return 'error';\n    }\n\n    function chompGlsl(source, setState)\n    {\n      while (!source.eol())\n      {\n        var char = source.next();\n        if (char === '|' && source.eat(']'))\n        {\n          setState(normal());\n          return 'string';\n        }\n      }\n      return 'string';\n    }\n\n    var wellKnownWords = {\n      case: 1,\n      of: 1,\n      as: 1,\n      if: 1,\n      then: 1,\n      else: 1,\n      let: 1,\n      in: 1,\n      type: 1,\n      alias: 1,\n      module: 1,\n      where: 1,\n      import: 1,\n      exposing: 1,\n      port: 1\n    };\n\n    return {\n      startState: function ()  { return { f: normal() }; },\n      copyState:  function (s) { return { f: s.f }; },\n\n      token: function(stream, state) {\n        var type = state.f(stream, function(s) { state.f = s; });\n        var word = stream.current();\n        return (wellKnownWords.hasOwnProperty(word)) ? 'keyword' : type;\n      }\n    };\n\n  });\n\n  CodeMirror.defineMIME(\"text/x-elm\", \"elm\");\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}