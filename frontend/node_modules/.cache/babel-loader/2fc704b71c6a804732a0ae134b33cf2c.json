{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"commonlisp\", function (config) {\n    var specialForm = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;\n    var assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;\n    var numLiteral = /^(?:[+\\-]?(?:\\d+|\\d*\\.\\d+)(?:[efd][+\\-]?\\d+)?|[+\\-]?\\d+(?:\\/[+\\-]?\\d+)?|#b[+\\-]?[01]+|#o[+\\-]?[0-7]+|#x[+\\-]?[\\da-f]+)/;\n    var symbol = /[^\\s'`,@()\\[\\]\";]/;\n    var type;\n\n    function readSym(stream) {\n      var ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"\\\\\") stream.next();else if (!symbol.test(ch)) {\n          stream.backUp(1);\n          break;\n        }\n      }\n\n      return stream.current();\n    }\n\n    function base(stream, state) {\n      if (stream.eatSpace()) {\n        type = \"ws\";\n        return null;\n      }\n\n      if (stream.match(numLiteral)) return \"number\";\n      var ch = stream.next();\n      if (ch == \"\\\\\") ch = stream.next();\n      if (ch == '\"') return (state.tokenize = inString)(stream, state);else if (ch == \"(\") {\n        type = \"open\";\n        return \"bracket\";\n      } else if (ch == \")\" || ch == \"]\") {\n        type = \"close\";\n        return \"bracket\";\n      } else if (ch == \";\") {\n        stream.skipToEnd();\n        type = \"ws\";\n        return \"comment\";\n      } else if (/['`,@]/.test(ch)) return null;else if (ch == \"|\") {\n        if (stream.skipTo(\"|\")) {\n          stream.next();\n          return \"symbol\";\n        } else {\n          stream.skipToEnd();\n          return \"error\";\n        }\n      } else if (ch == \"#\") {\n        var ch = stream.next();\n\n        if (ch == \"(\") {\n          type = \"open\";\n          return \"bracket\";\n        } else if (/[+\\-=\\.']/.test(ch)) return null;else if (/\\d/.test(ch) && stream.match(/^\\d*#/)) return null;else if (ch == \"|\") return (state.tokenize = inComment)(stream, state);else if (ch == \":\") {\n          readSym(stream);\n          return \"meta\";\n        } else if (ch == \"\\\\\") {\n          stream.next();\n          readSym(stream);\n          return \"string-2\";\n        } else return \"error\";\n      } else {\n        var name = readSym(stream);\n        if (name == \".\") return null;\n        type = \"symbol\";\n        if (name == \"nil\" || name == \"t\" || name.charAt(0) == \":\") return \"atom\";\n        if (state.lastType == \"open\" && (specialForm.test(name) || assumeBody.test(name))) return \"keyword\";\n        if (name.charAt(0) == \"&\") return \"variable-2\";\n        return \"variable\";\n      }\n    }\n\n    function inString(stream, state) {\n      var escaped = false,\n          next;\n\n      while (next = stream.next()) {\n        if (next == '\"' && !escaped) {\n          state.tokenize = base;\n          break;\n        }\n\n        escaped = !escaped && next == \"\\\\\";\n      }\n\n      return \"string\";\n    }\n\n    function inComment(stream, state) {\n      var next, last;\n\n      while (next = stream.next()) {\n        if (next == \"#\" && last == \"|\") {\n          state.tokenize = base;\n          break;\n        }\n\n        last = next;\n      }\n\n      type = \"ws\";\n      return \"comment\";\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          ctx: {\n            prev: null,\n            start: 0,\n            indentTo: 0\n          },\n          lastType: null,\n          tokenize: base\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol() && typeof state.ctx.indentTo != \"number\") state.ctx.indentTo = state.ctx.start + 1;\n        type = null;\n        var style = state.tokenize(stream, state);\n\n        if (type != \"ws\") {\n          if (state.ctx.indentTo == null) {\n            if (type == \"symbol\" && assumeBody.test(stream.current())) state.ctx.indentTo = state.ctx.start + config.indentUnit;else state.ctx.indentTo = \"next\";\n          } else if (state.ctx.indentTo == \"next\") {\n            state.ctx.indentTo = stream.column();\n          }\n\n          state.lastType = type;\n        }\n\n        if (type == \"open\") state.ctx = {\n          prev: state.ctx,\n          start: stream.column(),\n          indentTo: null\n        };else if (type == \"close\") state.ctx = state.ctx.prev || state.ctx;\n        return style;\n      },\n      indent: function indent(state, _textAfter) {\n        var i = state.ctx.indentTo;\n        return typeof i == \"number\" ? i : state.ctx.start + 1;\n      },\n      closeBrackets: {\n        pairs: \"()[]{}\\\"\\\"\"\n      },\n      lineComment: \";;\",\n      fold: \"brace-paren\",\n      blockCommentStart: \"#|\",\n      blockCommentEnd: \"|#\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-common-lisp\", \"commonlisp\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","specialForm","assumeBody","numLiteral","symbol","type","readSym","stream","ch","next","test","backUp","current","base","state","eatSpace","match","tokenize","inString","skipToEnd","skipTo","inComment","name","charAt","lastType","escaped","last","startState","ctx","prev","start","indentTo","token","sol","style","indentUnit","column","indent","_textAfter","i","closeBrackets","pairs","lineComment","fold","blockCommentStart","blockCommentEnd","defineMIME"],"sources":["/mnt/Datengrab/python/Zero-tier/frontend/node_modules/codemirror/mode/commonlisp/commonlisp.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"commonlisp\", function (config) {\n  var specialForm = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;\n  var assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;\n  var numLiteral = /^(?:[+\\-]?(?:\\d+|\\d*\\.\\d+)(?:[efd][+\\-]?\\d+)?|[+\\-]?\\d+(?:\\/[+\\-]?\\d+)?|#b[+\\-]?[01]+|#o[+\\-]?[0-7]+|#x[+\\-]?[\\da-f]+)/;\n  var symbol = /[^\\s'`,@()\\[\\]\";]/;\n  var type;\n\n  function readSym(stream) {\n    var ch;\n    while (ch = stream.next()) {\n      if (ch == \"\\\\\") stream.next();\n      else if (!symbol.test(ch)) { stream.backUp(1); break; }\n    }\n    return stream.current();\n  }\n\n  function base(stream, state) {\n    if (stream.eatSpace()) {type = \"ws\"; return null;}\n    if (stream.match(numLiteral)) return \"number\";\n    var ch = stream.next();\n    if (ch == \"\\\\\") ch = stream.next();\n\n    if (ch == '\"') return (state.tokenize = inString)(stream, state);\n    else if (ch == \"(\") { type = \"open\"; return \"bracket\"; }\n    else if (ch == \")\" || ch == \"]\") { type = \"close\"; return \"bracket\"; }\n    else if (ch == \";\") { stream.skipToEnd(); type = \"ws\"; return \"comment\"; }\n    else if (/['`,@]/.test(ch)) return null;\n    else if (ch == \"|\") {\n      if (stream.skipTo(\"|\")) { stream.next(); return \"symbol\"; }\n      else { stream.skipToEnd(); return \"error\"; }\n    } else if (ch == \"#\") {\n      var ch = stream.next();\n      if (ch == \"(\") { type = \"open\"; return \"bracket\"; }\n      else if (/[+\\-=\\.']/.test(ch)) return null;\n      else if (/\\d/.test(ch) && stream.match(/^\\d*#/)) return null;\n      else if (ch == \"|\") return (state.tokenize = inComment)(stream, state);\n      else if (ch == \":\") { readSym(stream); return \"meta\"; }\n      else if (ch == \"\\\\\") { stream.next(); readSym(stream); return \"string-2\" }\n      else return \"error\";\n    } else {\n      var name = readSym(stream);\n      if (name == \".\") return null;\n      type = \"symbol\";\n      if (name == \"nil\" || name == \"t\" || name.charAt(0) == \":\") return \"atom\";\n      if (state.lastType == \"open\" && (specialForm.test(name) || assumeBody.test(name))) return \"keyword\";\n      if (name.charAt(0) == \"&\") return \"variable-2\";\n      return \"variable\";\n    }\n  }\n\n  function inString(stream, state) {\n    var escaped = false, next;\n    while (next = stream.next()) {\n      if (next == '\"' && !escaped) { state.tokenize = base; break; }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return \"string\";\n  }\n\n  function inComment(stream, state) {\n    var next, last;\n    while (next = stream.next()) {\n      if (next == \"#\" && last == \"|\") { state.tokenize = base; break; }\n      last = next;\n    }\n    type = \"ws\";\n    return \"comment\";\n  }\n\n  return {\n    startState: function () {\n      return {ctx: {prev: null, start: 0, indentTo: 0}, lastType: null, tokenize: base};\n    },\n\n    token: function (stream, state) {\n      if (stream.sol() && typeof state.ctx.indentTo != \"number\")\n        state.ctx.indentTo = state.ctx.start + 1;\n\n      type = null;\n      var style = state.tokenize(stream, state);\n      if (type != \"ws\") {\n        if (state.ctx.indentTo == null) {\n          if (type == \"symbol\" && assumeBody.test(stream.current()))\n            state.ctx.indentTo = state.ctx.start + config.indentUnit;\n          else\n            state.ctx.indentTo = \"next\";\n        } else if (state.ctx.indentTo == \"next\") {\n          state.ctx.indentTo = stream.column();\n        }\n        state.lastType = type;\n      }\n      if (type == \"open\") state.ctx = {prev: state.ctx, start: stream.column(), indentTo: null};\n      else if (type == \"close\") state.ctx = state.ctx.prev || state.ctx;\n      return style;\n    },\n\n    indent: function (state, _textAfter) {\n      var i = state.ctx.indentTo;\n      return typeof i == \"number\" ? i : state.ctx.start + 1;\n    },\n\n    closeBrackets: {pairs: \"()[]{}\\\"\\\"\"},\n    lineComment: \";;\",\n    fold: \"brace-paren\",\n    blockCommentStart: \"#|\",\n    blockCommentEnd: \"|#\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-common-lisp\", \"commonlisp\");\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}