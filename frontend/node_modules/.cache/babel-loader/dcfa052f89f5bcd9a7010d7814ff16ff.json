{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"velocity\", function () {\n    function parseWords(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    }\n\n    var keywords = parseWords(\"#end #else #break #stop #[[ #]] \" + \"#{end} #{else} #{break} #{stop}\");\n    var functions = parseWords(\"#if #elseif #foreach #set #include #parse #macro #define #evaluate \" + \"#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}\");\n    var specials = parseWords(\"$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent\");\n    var isOperatorChar = /[+\\-*&%=<>!?:\\/|]/;\n\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n\n    function tokenBase(stream, state) {\n      var beforeParams = state.beforeParams;\n      state.beforeParams = false;\n      var ch = stream.next(); // start of unparsed string?\n\n      if (ch == \"'\" && !state.inString && state.inParams) {\n        state.lastTokenWasBuiltin = false;\n        return chain(stream, state, tokenString(ch));\n      } // start of parsed string?\n      else if (ch == '\"') {\n        state.lastTokenWasBuiltin = false;\n\n        if (state.inString) {\n          state.inString = false;\n          return \"string\";\n        } else if (state.inParams) return chain(stream, state, tokenString(ch));\n      } // is it one of the special signs []{}().,;? Separator?\n      else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n        if (ch == \"(\" && beforeParams) state.inParams = true;else if (ch == \")\") {\n          state.inParams = false;\n          state.lastTokenWasBuiltin = true;\n        }\n        return null;\n      } // start of a number value?\n      else if (/\\d/.test(ch)) {\n        state.lastTokenWasBuiltin = false;\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      } // multi line comment?\n      else if (ch == \"#\" && stream.eat(\"*\")) {\n        state.lastTokenWasBuiltin = false;\n        return chain(stream, state, tokenComment);\n      } // unparsed content?\n      else if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) {\n        state.lastTokenWasBuiltin = false;\n        return chain(stream, state, tokenUnparsed);\n      } // single line comment?\n      else if (ch == \"#\" && stream.eat(\"#\")) {\n        state.lastTokenWasBuiltin = false;\n        stream.skipToEnd();\n        return \"comment\";\n      } // variable?\n      else if (ch == \"$\") {\n        stream.eat(\"!\");\n        stream.eatWhile(/[\\w\\d\\$_\\.{}-]/); // is it one of the specials?\n\n        if (specials && specials.propertyIsEnumerable(stream.current())) {\n          return \"keyword\";\n        } else {\n          state.lastTokenWasBuiltin = true;\n          state.beforeParams = true;\n          return \"builtin\";\n        }\n      } // is it a operator?\n      else if (isOperatorChar.test(ch)) {\n        state.lastTokenWasBuiltin = false;\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      } else {\n        // get the whole word\n        stream.eatWhile(/[\\w\\$_{}@]/);\n        var word = stream.current(); // is it one of the listed keywords?\n\n        if (keywords && keywords.propertyIsEnumerable(word)) return \"keyword\"; // is it one of the listed functions?\n\n        if (functions && functions.propertyIsEnumerable(word) || stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek() == \"(\" && !(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {\n          state.beforeParams = true;\n          state.lastTokenWasBuiltin = false;\n          return \"keyword\";\n        }\n\n        if (state.inString) {\n          state.lastTokenWasBuiltin = false;\n          return \"string\";\n        }\n\n        if (stream.pos > word.length && stream.string.charAt(stream.pos - word.length - 1) == \".\" && state.lastTokenWasBuiltin) return \"builtin\"; // default: just a \"word\"\n\n        state.lastTokenWasBuiltin = false;\n        return null;\n      }\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          if (quote == '\"' && stream.peek() == '$' && !escaped) {\n            state.inString = true;\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function tokenUnparsed(stream, state) {\n      var maybeEnd = 0,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd == 2) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        if (ch == \"]\") maybeEnd++;else if (ch != \" \") maybeEnd = 0;\n      }\n\n      return \"meta\";\n    } // Interface\n\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          beforeParams: false,\n          inParams: false,\n          inString: false,\n          lastTokenWasBuiltin: false\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"#*\",\n      blockCommentEnd: \"*#\",\n      lineComment: \"##\",\n      fold: \"velocity\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/velocity\", \"velocity\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","parseWords","str","obj","words","split","i","length","keywords","functions","specials","isOperatorChar","chain","stream","state","f","tokenize","tokenBase","beforeParams","ch","next","inString","inParams","lastTokenWasBuiltin","tokenString","test","eatWhile","eat","tokenComment","match","tokenUnparsed","skipToEnd","propertyIsEnumerable","current","word","peek","toLowerCase","pos","string","charAt","quote","escaped","end","maybeEnd","startState","token","eatSpace","blockCommentStart","blockCommentEnd","lineComment","fold","defineMIME"],"sources":["/mnt/Datengrab/python/Zero-tier/frontend/node_modules/codemirror/mode/velocity/velocity.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"velocity\", function() {\n    function parseWords(str) {\n        var obj = {}, words = str.split(\" \");\n        for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n        return obj;\n    }\n\n    var keywords = parseWords(\"#end #else #break #stop #[[ #]] \" +\n                              \"#{end} #{else} #{break} #{stop}\");\n    var functions = parseWords(\"#if #elseif #foreach #set #include #parse #macro #define #evaluate \" +\n                               \"#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}\");\n    var specials = parseWords(\"$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent\");\n    var isOperatorChar = /[+\\-*&%=<>!?:\\/|]/;\n\n    function chain(stream, state, f) {\n        state.tokenize = f;\n        return f(stream, state);\n    }\n    function tokenBase(stream, state) {\n        var beforeParams = state.beforeParams;\n        state.beforeParams = false;\n        var ch = stream.next();\n        // start of unparsed string?\n        if ((ch == \"'\") && !state.inString && state.inParams) {\n            state.lastTokenWasBuiltin = false;\n            return chain(stream, state, tokenString(ch));\n        }\n        // start of parsed string?\n        else if ((ch == '\"')) {\n            state.lastTokenWasBuiltin = false;\n            if (state.inString) {\n                state.inString = false;\n                return \"string\";\n            }\n            else if (state.inParams)\n                return chain(stream, state, tokenString(ch));\n        }\n        // is it one of the special signs []{}().,;? Separator?\n        else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n            if (ch == \"(\" && beforeParams)\n                state.inParams = true;\n            else if (ch == \")\") {\n                state.inParams = false;\n                state.lastTokenWasBuiltin = true;\n            }\n            return null;\n        }\n        // start of a number value?\n        else if (/\\d/.test(ch)) {\n            state.lastTokenWasBuiltin = false;\n            stream.eatWhile(/[\\w\\.]/);\n            return \"number\";\n        }\n        // multi line comment?\n        else if (ch == \"#\" && stream.eat(\"*\")) {\n            state.lastTokenWasBuiltin = false;\n            return chain(stream, state, tokenComment);\n        }\n        // unparsed content?\n        else if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) {\n            state.lastTokenWasBuiltin = false;\n            return chain(stream, state, tokenUnparsed);\n        }\n        // single line comment?\n        else if (ch == \"#\" && stream.eat(\"#\")) {\n            state.lastTokenWasBuiltin = false;\n            stream.skipToEnd();\n            return \"comment\";\n        }\n        // variable?\n        else if (ch == \"$\") {\n            stream.eat(\"!\");\n            stream.eatWhile(/[\\w\\d\\$_\\.{}-]/);\n            // is it one of the specials?\n            if (specials && specials.propertyIsEnumerable(stream.current())) {\n                return \"keyword\";\n            }\n            else {\n                state.lastTokenWasBuiltin = true;\n                state.beforeParams = true;\n                return \"builtin\";\n            }\n        }\n        // is it a operator?\n        else if (isOperatorChar.test(ch)) {\n            state.lastTokenWasBuiltin = false;\n            stream.eatWhile(isOperatorChar);\n            return \"operator\";\n        }\n        else {\n            // get the whole word\n            stream.eatWhile(/[\\w\\$_{}@]/);\n            var word = stream.current();\n            // is it one of the listed keywords?\n            if (keywords && keywords.propertyIsEnumerable(word))\n                return \"keyword\";\n            // is it one of the listed functions?\n            if (functions && functions.propertyIsEnumerable(word) ||\n                    (stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek()==\"(\") &&\n                     !(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {\n                state.beforeParams = true;\n                state.lastTokenWasBuiltin = false;\n                return \"keyword\";\n            }\n            if (state.inString) {\n                state.lastTokenWasBuiltin = false;\n                return \"string\";\n            }\n            if (stream.pos > word.length && stream.string.charAt(stream.pos-word.length-1)==\".\" && state.lastTokenWasBuiltin)\n                return \"builtin\";\n            // default: just a \"word\"\n            state.lastTokenWasBuiltin = false;\n            return null;\n        }\n    }\n\n    function tokenString(quote) {\n        return function(stream, state) {\n            var escaped = false, next, end = false;\n            while ((next = stream.next()) != null) {\n                if ((next == quote) && !escaped) {\n                    end = true;\n                    break;\n                }\n                if (quote=='\"' && stream.peek() == '$' && !escaped) {\n                    state.inString = true;\n                    end = true;\n                    break;\n                }\n                escaped = !escaped && next == \"\\\\\";\n            }\n            if (end) state.tokenize = tokenBase;\n            return \"string\";\n        };\n    }\n\n    function tokenComment(stream, state) {\n        var maybeEnd = false, ch;\n        while (ch = stream.next()) {\n            if (ch == \"#\" && maybeEnd) {\n                state.tokenize = tokenBase;\n                break;\n            }\n            maybeEnd = (ch == \"*\");\n        }\n        return \"comment\";\n    }\n\n    function tokenUnparsed(stream, state) {\n        var maybeEnd = 0, ch;\n        while (ch = stream.next()) {\n            if (ch == \"#\" && maybeEnd == 2) {\n                state.tokenize = tokenBase;\n                break;\n            }\n            if (ch == \"]\")\n                maybeEnd++;\n            else if (ch != \" \")\n                maybeEnd = 0;\n        }\n        return \"meta\";\n    }\n    // Interface\n\n    return {\n        startState: function() {\n            return {\n                tokenize: tokenBase,\n                beforeParams: false,\n                inParams: false,\n                inString: false,\n                lastTokenWasBuiltin: false\n            };\n        },\n\n        token: function(stream, state) {\n            if (stream.eatSpace()) return null;\n            return state.tokenize(stream, state);\n        },\n        blockCommentStart: \"#*\",\n        blockCommentEnd: \"*#\",\n        lineComment: \"##\",\n        fold: \"velocity\"\n    };\n});\n\nCodeMirror.defineMIME(\"text/velocity\", \"velocity\");\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}