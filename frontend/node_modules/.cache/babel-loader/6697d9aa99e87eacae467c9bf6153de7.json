{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"pascal\", function () {\n    function words(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    }\n\n    var keywords = words(\"absolute and array asm begin case const constructor destructor div do \" + \"downto else end file for function goto if implementation in inherited \" + \"inline interface label mod nil not object of operator or packed procedure \" + \"program record reintroduce repeat self set shl shr string then to type \" + \"unit until uses var while with xor as class dispinterface except exports \" + \"finalization finally initialization inline is library on out packed \" + \"property raise resourcestring threadvar try absolute abstract alias \" + \"assembler bitpacked break cdecl continue cppdecl cvar default deprecated \" + \"dynamic enumerator experimental export external far far16 forward generic \" + \"helper implements index interrupt iocheck local message name near \" + \"nodefault noreturn nostackframe oldfpccall otherwise overload override \" + \"pascal platform private protected public published read register \" + \"reintroduce result safecall saveregisters softfloat specialize static \" + \"stdcall stored strict unaligned unimplemented varargs virtual write\");\n    var atoms = {\n      \"null\": true\n    };\n    var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \"#\" && state.startOfLine) {\n        stream.skipToEnd();\n        return \"meta\";\n      }\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n\n      if (ch == \"(\" && stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n\n      if (ch == \"{\") {\n        state.tokenize = tokenCommentBraces;\n        return tokenCommentBraces(stream, state);\n      }\n\n      if (/[\\[\\]\\(\\),;\\:\\.]/.test(ch)) {\n        return null;\n      }\n\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n\n      if (ch == \"/\") {\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\$_]/);\n      var cur = stream.current();\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !escaped) state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \")\" && maybeEnd) {\n          state.tokenize = null;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function tokenCommentBraces(stream, state) {\n      var ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"}\") {\n          state.tokenize = null;\n          break;\n        }\n      }\n\n      return \"comment\";\n    } // Interface\n\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: null\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\" || style == \"meta\") return style;\n        return style;\n      },\n      electricChars: \"{}\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-pascal\", \"pascal\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","words","str","obj","split","i","length","keywords","atoms","isOperatorChar","tokenBase","stream","state","ch","next","startOfLine","skipToEnd","tokenize","tokenString","eat","tokenComment","tokenCommentBraces","test","eatWhile","cur","current","propertyIsEnumerable","quote","escaped","end","maybeEnd","startState","token","eatSpace","style","electricChars","defineMIME"],"sources":["/mnt/Datengrab/python/Zero-tier/frontend/node_modules/codemirror/mode/pascal/pascal.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"pascal\", function() {\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  var keywords = words(\n    \"absolute and array asm begin case const constructor destructor div do \" +\n    \"downto else end file for function goto if implementation in inherited \" +\n    \"inline interface label mod nil not object of operator or packed procedure \" +\n    \"program record reintroduce repeat self set shl shr string then to type \" +\n    \"unit until uses var while with xor as class dispinterface except exports \" +\n    \"finalization finally initialization inline is library on out packed \" +\n    \"property raise resourcestring threadvar try absolute abstract alias \" +\n    \"assembler bitpacked break cdecl continue cppdecl cvar default deprecated \" +\n    \"dynamic enumerator experimental export external far far16 forward generic \" +\n    \"helper implements index interrupt iocheck local message name near \" +\n    \"nodefault noreturn nostackframe oldfpccall otherwise overload override \" +\n    \"pascal platform private protected public published read register \" +\n    \"reintroduce result safecall saveregisters softfloat specialize static \" +\n    \"stdcall stored strict unaligned unimplemented varargs virtual write\");\n  var atoms = {\"null\": true};\n\n  var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == \"#\" && state.startOfLine) {\n      stream.skipToEnd();\n      return \"meta\";\n    }\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (ch == \"(\" && stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (ch == \"{\") {\n      state.tokenize = tokenCommentBraces;\n      return tokenCommentBraces(stream, state);\n    }\n    if (/[\\[\\]\\(\\),;\\:\\.]/.test(ch)) {\n      return null;\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !escaped) state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \")\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenCommentBraces(stream, state) {\n    var ch;\n    while (ch = stream.next()) {\n      if (ch == \"}\") {\n        state.tokenize = null;\n        break;\n      }\n    }\n    return \"comment\";\n  }\n\n  // Interface\n\n  return {\n    startState: function() {\n      return {tokenize: null};\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      return style;\n    },\n\n    electricChars: \"{}\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-pascal\", \"pascal\");\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}