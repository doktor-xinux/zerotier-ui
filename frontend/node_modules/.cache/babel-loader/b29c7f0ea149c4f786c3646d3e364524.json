{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Brainfuck mode created by Michael Kaminsky https://github.com/mkaminsky11\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) define([\"../../lib/codemirror\"], mod);else mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var reserve = \"><+-.,[]\".split(\"\");\n  /*\n  comments can be either:\n  placed behind lines\n         +++    this is a comment\n   where reserved characters cannot be used\n  or in a loop\n  [\n    this is ok to use [ ] and stuff\n  ]\n  or preceded by #\n  */\n\n  CodeMirror.defineMode(\"brainfuck\", function () {\n    return {\n      startState: function startState() {\n        return {\n          commentLine: false,\n          left: 0,\n          right: 0,\n          commentLoop: false\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.eatSpace()) return null;\n\n        if (stream.sol()) {\n          state.commentLine = false;\n        }\n\n        var ch = stream.next().toString();\n\n        if (reserve.indexOf(ch) !== -1) {\n          if (state.commentLine === true) {\n            if (stream.eol()) {\n              state.commentLine = false;\n            }\n\n            return \"comment\";\n          }\n\n          if (ch === \"]\" || ch === \"[\") {\n            if (ch === \"[\") {\n              state.left++;\n            } else {\n              state.right++;\n            }\n\n            return \"bracket\";\n          } else if (ch === \"+\" || ch === \"-\") {\n            return \"keyword\";\n          } else if (ch === \"<\" || ch === \">\") {\n            return \"atom\";\n          } else if (ch === \".\" || ch === \",\") {\n            return \"def\";\n          }\n        } else {\n          state.commentLine = true;\n\n          if (stream.eol()) {\n            state.commentLine = false;\n          }\n\n          return \"comment\";\n        }\n\n        if (stream.eol()) {\n          state.commentLine = false;\n        }\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-brainfuck\", \"brainfuck\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","reserve","split","defineMode","startState","commentLine","left","right","commentLoop","token","stream","state","eatSpace","sol","ch","next","toString","indexOf","eol","defineMIME"],"sources":["/mnt/Datengrab/python/Zero-tier/frontend/node_modules/codemirror/mode/brainfuck/brainfuck.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Brainfuck mode created by Michael Kaminsky https://github.com/mkaminsky11\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    mod(require(\"../../lib/codemirror\"))\n  else if (typeof define == \"function\" && define.amd)\n    define([\"../../lib/codemirror\"], mod)\n  else\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n  var reserve = \"><+-.,[]\".split(\"\");\n  /*\n  comments can be either:\n  placed behind lines\n\n        +++    this is a comment\n\n  where reserved characters cannot be used\n  or in a loop\n  [\n    this is ok to use [ ] and stuff\n  ]\n  or preceded by #\n  */\n  CodeMirror.defineMode(\"brainfuck\", function() {\n    return {\n      startState: function() {\n        return {\n          commentLine: false,\n          left: 0,\n          right: 0,\n          commentLoop: false\n        }\n      },\n      token: function(stream, state) {\n        if (stream.eatSpace()) return null\n        if(stream.sol()){\n          state.commentLine = false;\n        }\n        var ch = stream.next().toString();\n        if(reserve.indexOf(ch) !== -1){\n          if(state.commentLine === true){\n            if(stream.eol()){\n              state.commentLine = false;\n            }\n            return \"comment\";\n          }\n          if(ch === \"]\" || ch === \"[\"){\n            if(ch === \"[\"){\n              state.left++;\n            }\n            else{\n              state.right++;\n            }\n            return \"bracket\";\n          }\n          else if(ch === \"+\" || ch === \"-\"){\n            return \"keyword\";\n          }\n          else if(ch === \"<\" || ch === \">\"){\n            return \"atom\";\n          }\n          else if(ch === \".\" || ch === \",\"){\n            return \"def\";\n          }\n        }\n        else{\n          state.commentLine = true;\n          if(stream.eol()){\n            state.commentLine = false;\n          }\n          return \"comment\";\n        }\n        if(stream.eol()){\n          state.commentLine = false;\n        }\n      }\n    };\n  });\nCodeMirror.defineMIME(\"text/x-brainfuck\",\"brainfuck\")\n});\n"],"mappings":"AAAA;AACA;AAEA;AAEA,CAAC,UAASA,GAAT,EAAc;EACb,IAAI,OAAOC,OAAP,IAAkB,QAAlB,IAA8B,OAAOC,MAAP,IAAiB,QAAnD,EACEF,GAAG,CAACG,OAAO,CAAC,sBAAD,CAAR,CAAH,CADF,KAEK,IAAI,OAAOC,MAAP,IAAiB,UAAjB,IAA+BA,MAAM,CAACC,GAA1C,EACHD,MAAM,CAAC,CAAC,sBAAD,CAAD,EAA2BJ,GAA3B,CAAN,CADG,KAGHA,GAAG,CAACM,UAAD,CAAH;AACH,CAPD,EAOG,UAASA,UAAT,EAAqB;EACtB;;EACA,IAAIC,OAAO,GAAG,WAAWC,KAAX,CAAiB,EAAjB,CAAd;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEF,UAAU,CAACG,UAAX,CAAsB,WAAtB,EAAmC,YAAW;IAC5C,OAAO;MACLC,UAAU,EAAE,sBAAW;QACrB,OAAO;UACLC,WAAW,EAAE,KADR;UAELC,IAAI,EAAE,CAFD;UAGLC,KAAK,EAAE,CAHF;UAILC,WAAW,EAAE;QAJR,CAAP;MAMD,CARI;MASLC,KAAK,EAAE,eAASC,MAAT,EAAiBC,KAAjB,EAAwB;QAC7B,IAAID,MAAM,CAACE,QAAP,EAAJ,EAAuB,OAAO,IAAP;;QACvB,IAAGF,MAAM,CAACG,GAAP,EAAH,EAAgB;UACdF,KAAK,CAACN,WAAN,GAAoB,KAApB;QACD;;QACD,IAAIS,EAAE,GAAGJ,MAAM,CAACK,IAAP,GAAcC,QAAd,EAAT;;QACA,IAAGf,OAAO,CAACgB,OAAR,CAAgBH,EAAhB,MAAwB,CAAC,CAA5B,EAA8B;UAC5B,IAAGH,KAAK,CAACN,WAAN,KAAsB,IAAzB,EAA8B;YAC5B,IAAGK,MAAM,CAACQ,GAAP,EAAH,EAAgB;cACdP,KAAK,CAACN,WAAN,GAAoB,KAApB;YACD;;YACD,OAAO,SAAP;UACD;;UACD,IAAGS,EAAE,KAAK,GAAP,IAAcA,EAAE,KAAK,GAAxB,EAA4B;YAC1B,IAAGA,EAAE,KAAK,GAAV,EAAc;cACZH,KAAK,CAACL,IAAN;YACD,CAFD,MAGI;cACFK,KAAK,CAACJ,KAAN;YACD;;YACD,OAAO,SAAP;UACD,CARD,MASK,IAAGO,EAAE,KAAK,GAAP,IAAcA,EAAE,KAAK,GAAxB,EAA4B;YAC/B,OAAO,SAAP;UACD,CAFI,MAGA,IAAGA,EAAE,KAAK,GAAP,IAAcA,EAAE,KAAK,GAAxB,EAA4B;YAC/B,OAAO,MAAP;UACD,CAFI,MAGA,IAAGA,EAAE,KAAK,GAAP,IAAcA,EAAE,KAAK,GAAxB,EAA4B;YAC/B,OAAO,KAAP;UACD;QACF,CAzBD,MA0BI;UACFH,KAAK,CAACN,WAAN,GAAoB,IAApB;;UACA,IAAGK,MAAM,CAACQ,GAAP,EAAH,EAAgB;YACdP,KAAK,CAACN,WAAN,GAAoB,KAApB;UACD;;UACD,OAAO,SAAP;QACD;;QACD,IAAGK,MAAM,CAACQ,GAAP,EAAH,EAAgB;UACdP,KAAK,CAACN,WAAN,GAAoB,KAApB;QACD;MACF;IAnDI,CAAP;EAqDD,CAtDD;EAuDFL,UAAU,CAACmB,UAAX,CAAsB,kBAAtB,EAAyC,WAAzC;AACC,CA/ED"},"metadata":{},"sourceType":"script"}