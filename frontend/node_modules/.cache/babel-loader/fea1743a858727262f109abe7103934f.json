{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"verilog\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        statementIndentUnit = parserConfig.statementIndentUnit || indentUnit,\n        dontAlignCalls = parserConfig.dontAlignCalls,\n        // compilerDirectivesUseRegularIndentation - If set, Compiler directive\n    // indentation follows the same rules as everything else. Otherwise if\n    // false, compiler directives will track their own indentation.\n    // For example, `ifdef nested inside another `ifndef will be indented,\n    // but a `ifdef inside a function block may not be indented.\n    compilerDirectivesUseRegularIndentation = parserConfig.compilerDirectivesUseRegularIndentation,\n        noIndentKeywords = parserConfig.noIndentKeywords || [],\n        multiLineStrings = parserConfig.multiLineStrings,\n        hooks = parserConfig.hooks || {};\n\n    function words(str) {\n      var obj = {},\n          words = str.split(\" \");\n\n      for (var i = 0; i < words.length; ++i) {\n        obj[words[i]] = true;\n      }\n\n      return obj;\n    }\n    /**\n     * Keywords from IEEE 1800-2012\n     */\n\n\n    var keywords = words(\"accept_on alias always always_comb always_ff always_latch and assert assign assume automatic before begin bind \" + \"bins binsof bit break buf bufif0 bufif1 byte case casex casez cell chandle checker class clocking cmos config \" + \"const constraint context continue cover covergroup coverpoint cross deassign default defparam design disable \" + \"dist do edge else end endcase endchecker endclass endclocking endconfig endfunction endgenerate endgroup \" + \"endinterface endmodule endpackage endprimitive endprogram endproperty endspecify endsequence endtable endtask \" + \"enum event eventually expect export extends extern final first_match for force foreach forever fork forkjoin \" + \"function generate genvar global highz0 highz1 if iff ifnone ignore_bins illegal_bins implements implies import \" + \"incdir include initial inout input inside instance int integer interconnect interface intersect join join_any \" + \"join_none large let liblist library local localparam logic longint macromodule matches medium modport module \" + \"nand negedge nettype new nexttime nmos nor noshowcancelled not notif0 notif1 null or output package packed \" + \"parameter pmos posedge primitive priority program property protected pull0 pull1 pulldown pullup \" + \"pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos real realtime ref reg \" + \"reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 s_always s_eventually s_nexttime \" + \"s_until s_until_with scalared sequence shortint shortreal showcancelled signed small soft solve specify \" + \"specparam static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on sync_reject_on \" + \"table tagged task this throughout time timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior \" + \"trireg type typedef union unique unique0 unsigned until until_with untyped use uwire var vectored virtual void \" + \"wait wait_order wand weak weak0 weak1 while wildcard wire with within wor xnor xor\");\n    /** Operators from IEEE 1800-2012\n       unary_operator ::=\n         + | - | ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~\n       binary_operator ::=\n         + | - | * | / | % | == | != | === | !== | ==? | !=? | && | || | **\n         | < | <= | > | >= | & | | | ^ | ^~ | ~^ | >> | << | >>> | <<<\n         | -> | <->\n       inc_or_dec_operator ::= ++ | --\n       unary_module_path_operator ::=\n         ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~\n       binary_module_path_operator ::=\n         == | != | && | || | & | | | ^ | ^~ | ~^\n    */\n\n    var isOperatorChar = /[\\+\\-\\*\\/!~&|^%=?:<>]/;\n    var isBracketChar = /[\\[\\]{}()]/;\n    var unsignedNumber = /\\d[0-9_]*/;\n    var decimalLiteral = /\\d*\\s*'s?d\\s*\\d[0-9_]*/i;\n    var binaryLiteral = /\\d*\\s*'s?b\\s*[xz01][xz01_]*/i;\n    var octLiteral = /\\d*\\s*'s?o\\s*[xz0-7][xz0-7_]*/i;\n    var hexLiteral = /\\d*\\s*'s?h\\s*[0-9a-fxz?][0-9a-fxz?_]*/i;\n    var realLiteral = /(\\d[\\d_]*(\\.\\d[\\d_]*)?E-?[\\d_]+)|(\\d[\\d_]*\\.\\d[\\d_]*)/i;\n    var closingBracketOrWord = /^((`?\\w+)|[)}\\]])/;\n    var closingBracket = /[)}\\]]/;\n    var compilerDirectiveRegex = new RegExp(\"^(`(?:ifdef|ifndef|elsif|else|endif|undef|undefineall|define|include|begin_keywords|celldefine|default|\" + \"nettype|end_keywords|endcelldefine|line|nounconnected_drive|pragma|resetall|timescale|unconnected_drive))\\\\b\");\n    var compilerDirectiveBeginRegex = /^(`(?:ifdef|ifndef|elsif|else))\\b/;\n    var compilerDirectiveEndRegex = /^(`(?:elsif|else|endif))\\b/;\n    var curPunc;\n    var curKeyword; // Block openings which are closed by a matching keyword in the form of (\"end\" + keyword)\n    // E.g. \"task\" => \"endtask\"\n\n    var blockKeywords = words(\"case checker class clocking config function generate interface module package \" + \"primitive program property specify sequence table task\"); // Opening/closing pairs\n\n    var openClose = {};\n\n    for (var keyword in blockKeywords) {\n      openClose[keyword] = \"end\" + keyword;\n    }\n\n    openClose[\"begin\"] = \"end\";\n    openClose[\"casex\"] = \"endcase\";\n    openClose[\"casez\"] = \"endcase\";\n    openClose[\"do\"] = \"while\";\n    openClose[\"fork\"] = \"join;join_any;join_none\";\n    openClose[\"covergroup\"] = \"endgroup\";\n    openClose[\"macro_begin\"] = \"macro_end\";\n\n    for (var i in noIndentKeywords) {\n      var keyword = noIndentKeywords[i];\n\n      if (openClose[keyword]) {\n        openClose[keyword] = undefined;\n      }\n    } // Keywords which open statements that are ended with a semi-colon\n\n\n    var statementKeywords = words(\"always always_comb always_ff always_latch assert assign assume else export for foreach forever if import initial repeat while extern typedef\");\n\n    function tokenBase(stream, state) {\n      var ch = stream.peek(),\n          style;\n      if (hooks[ch] && (style = hooks[ch](stream, state)) != false) return style;\n      if (hooks.tokenBase && (style = hooks.tokenBase(stream, state)) != false) return style;\n\n      if (/[,;:\\.]/.test(ch)) {\n        curPunc = stream.next();\n        return null;\n      }\n\n      if (isBracketChar.test(ch)) {\n        curPunc = stream.next();\n        return \"bracket\";\n      } // Macros (tick-defines)\n\n\n      if (ch == '`') {\n        stream.next();\n\n        if (stream.eatWhile(/[\\w\\$_]/)) {\n          var cur = stream.current();\n          curKeyword = cur; // Macros that end in _begin, are start of block and end with _end\n\n          if (cur.startsWith(\"`uvm_\") && cur.endsWith(\"_begin\")) {\n            var keywordClose = curKeyword.substr(0, curKeyword.length - 5) + \"end\";\n            openClose[cur] = keywordClose;\n            curPunc = \"newblock\";\n          } else {\n            stream.eatSpace();\n\n            if (stream.peek() == '(') {\n              // Check if this is a block\n              curPunc = \"newmacro\";\n            }\n\n            var withSpace = stream.current(); // Move the stream back before the spaces\n\n            stream.backUp(withSpace.length - cur.length);\n          }\n\n          return \"def\";\n        } else {\n          return null;\n        }\n      } // System calls\n\n\n      if (ch == '$') {\n        stream.next();\n\n        if (stream.eatWhile(/[\\w\\$_]/)) {\n          return \"meta\";\n        } else {\n          return null;\n        }\n      } // Time literals\n\n\n      if (ch == '#') {\n        stream.next();\n        stream.eatWhile(/[\\d_.]/);\n        return \"def\";\n      } // Event\n\n\n      if (ch == '@') {\n        stream.next();\n        stream.eatWhile(/[@]/);\n        return \"def\";\n      } // Strings\n\n\n      if (ch == '\"') {\n        stream.next();\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      } // Comments\n\n\n      if (ch == \"/\") {\n        stream.next();\n\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        }\n\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n\n        stream.backUp(1);\n      } // Numeric literals\n\n\n      if (stream.match(realLiteral) || stream.match(decimalLiteral) || stream.match(binaryLiteral) || stream.match(octLiteral) || stream.match(hexLiteral) || stream.match(unsignedNumber) || stream.match(realLiteral)) {\n        return \"number\";\n      } // Operators\n\n\n      if (stream.eatWhile(isOperatorChar)) {\n        curPunc = stream.current();\n        return \"meta\";\n      } // Keywords / plain variables\n\n\n      if (stream.eatWhile(/[\\w\\$_]/)) {\n        var cur = stream.current();\n\n        if (keywords[cur]) {\n          if (openClose[cur]) {\n            curPunc = \"newblock\";\n\n            if (cur === \"fork\") {\n              // Fork can be a statement instead of block in cases of:\n              // \"disable fork;\" and \"wait fork;\" (trailing semicolon)\n              stream.eatSpace();\n\n              if (stream.peek() == ';') {\n                curPunc = \"newstatement\";\n              }\n\n              stream.backUp(stream.current().length - cur.length);\n            }\n          }\n\n          if (statementKeywords[cur]) {\n            curPunc = \"newstatement\";\n          }\n\n          curKeyword = cur;\n          return \"keyword\";\n        }\n\n        return \"variable\";\n      }\n\n      stream.next();\n      return null;\n    }\n\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            next,\n            end = false;\n\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n\n          escaped = !escaped && next == \"\\\\\";\n        }\n\n        if (end || !(escaped || multiLineStrings)) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return \"comment\";\n    }\n\n    function Context(indented, column, type, scopekind, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.scopekind = scopekind;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type, scopekind) {\n      var indent = state.indented;\n      var c = new Context(indent, col, type, scopekind ? scopekind : \"\", null, state.context);\n      return state.context = c;\n    }\n\n    function popContext(state) {\n      var t = state.context.type;\n\n      if (t == \")\" || t == \"]\" || t == \"}\") {\n        state.indented = state.context.indented;\n      }\n\n      return state.context = state.context.prev;\n    }\n\n    function isClosing(text, contextClosing) {\n      if (text == contextClosing) {\n        return true;\n      } else {\n        // contextClosing may be multiple keywords separated by ;\n        var closingKeywords = contextClosing.split(\";\");\n\n        for (var i in closingKeywords) {\n          if (text == closingKeywords[i]) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n    }\n\n    function isInsideScopeKind(ctx, scopekind) {\n      if (ctx == null) {\n        return false;\n      }\n\n      if (ctx.scopekind === scopekind) {\n        return true;\n      }\n\n      return isInsideScopeKind(ctx.prev, scopekind);\n    }\n\n    function buildElectricInputRegEx() {\n      // Reindentation should occur on any bracket char: {}()[]\n      // or on a match of any of the block closing keywords, at\n      // the end of a line\n      var allClosings = [];\n\n      for (var i in openClose) {\n        if (openClose[i]) {\n          var closings = openClose[i].split(\";\");\n\n          for (var j in closings) {\n            allClosings.push(closings[j]);\n          }\n        }\n      }\n\n      var re = new RegExp(\"[{}()\\\\[\\\\]]|(\" + allClosings.join(\"|\") + \")$\");\n      return re;\n    } // Interface\n\n\n    return {\n      // Regex to force current line to reindent\n      electricInput: buildElectricInputRegEx(),\n      startState: function startState(basecolumn) {\n        var state = {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", \"top\", false),\n          indented: 0,\n          compilerDirectiveIndented: 0,\n          startOfLine: true\n        };\n        if (hooks.startState) hooks.startState(state);\n        return state;\n      },\n      token: function token(stream, state) {\n        var ctx = state.context;\n\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n\n        if (hooks.token) {\n          // Call hook, with an optional return value of a style to override verilog styling.\n          var style = hooks.token(stream, state);\n\n          if (style !== undefined) {\n            return style;\n          }\n        }\n\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        curKeyword = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n\n        if (style == \"comment\" || style == \"meta\" || style == \"variable\") {\n          if ((curPunc === \"=\" || curPunc === \"<=\") && !isInsideScopeKind(ctx, \"assignment\")) {\n            // '<=' could be nonblocking assignment or lessthan-equals (which shouldn't cause indent)\n            //      Search through the context to see if we are already in an assignment.\n            // '=' could be inside port declaration with comma or ')' afterward, or inside for(;;) block.\n            pushContext(state, stream.column() + curPunc.length, \"assignment\", \"assignment\");\n            if (ctx.align == null) ctx.align = true;\n          }\n\n          return style;\n        }\n\n        if (ctx.align == null) ctx.align = true;\n        var isClosingAssignment = ctx.type == \"assignment\" && closingBracket.test(curPunc) && ctx.prev && ctx.prev.type === curPunc;\n\n        if (curPunc == ctx.type || isClosingAssignment) {\n          if (isClosingAssignment) {\n            ctx = popContext(state);\n          }\n\n          ctx = popContext(state);\n\n          if (curPunc == \")\") {\n            // Handle closing macros, assuming they could have a semicolon or begin/end block inside.\n            if (ctx && ctx.type === \"macro\") {\n              ctx = popContext(state);\n\n              while (ctx && (ctx.type == \"statement\" || ctx.type == \"assignment\")) {\n                ctx = popContext(state);\n              }\n            }\n          } else if (curPunc == \"}\") {\n            // Handle closing statements like constraint block: \"foreach () {}\" which\n            // do not have semicolon at end.\n            if (ctx && ctx.type === \"statement\") {\n              while (ctx && ctx.type == \"statement\") {\n                ctx = popContext(state);\n              }\n            }\n          }\n        } else if ((curPunc == \";\" || curPunc == \",\") && (ctx.type == \"statement\" || ctx.type == \"assignment\") || ctx.type && isClosing(curKeyword, ctx.type)) {\n          ctx = popContext(state);\n\n          while (ctx && (ctx.type == \"statement\" || ctx.type == \"assignment\")) {\n            ctx = popContext(state);\n          }\n        } else if (curPunc == \"{\") {\n          pushContext(state, stream.column(), \"}\");\n        } else if (curPunc == \"[\") {\n          pushContext(state, stream.column(), \"]\");\n        } else if (curPunc == \"(\") {\n          pushContext(state, stream.column(), \")\");\n        } else if (ctx && ctx.type == \"endcase\" && curPunc == \":\") {\n          pushContext(state, stream.column(), \"statement\", \"case\");\n        } else if (curPunc == \"newstatement\") {\n          pushContext(state, stream.column(), \"statement\", curKeyword);\n        } else if (curPunc == \"newblock\") {\n          if (curKeyword == \"function\" && ctx && (ctx.type == \"statement\" || ctx.type == \"endgroup\")) {// The 'function' keyword can appear in some other contexts where it actually does not\n            // indicate a function (import/export DPI and covergroup definitions).\n            // Do nothing in this case\n          } else if (curKeyword == \"task\" && ctx && ctx.type == \"statement\") {// Same thing for task\n          } else if (curKeyword == \"class\" && ctx && ctx.type == \"statement\") {// Same thing for class (e.g. typedef)\n          } else {\n            var close = openClose[curKeyword];\n            pushContext(state, stream.column(), close, curKeyword);\n          }\n        } else if (curPunc == \"newmacro\" || curKeyword && curKeyword.match(compilerDirectiveRegex)) {\n          if (curPunc == \"newmacro\") {\n            // Macros (especially if they have parenthesis) potentially have a semicolon\n            // or complete statement/block inside, and should be treated as such.\n            pushContext(state, stream.column(), \"macro\", \"macro\");\n          }\n\n          if (curKeyword.match(compilerDirectiveEndRegex)) {\n            state.compilerDirectiveIndented -= statementIndentUnit;\n          }\n\n          if (curKeyword.match(compilerDirectiveBeginRegex)) {\n            state.compilerDirectiveIndented += statementIndentUnit;\n          }\n        }\n\n        state.startOfLine = false;\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize != tokenBase && state.tokenize != null) return CodeMirror.Pass;\n\n        if (hooks.indent) {\n          var fromHook = hooks.indent(state);\n          if (fromHook >= 0) return fromHook;\n        }\n\n        var ctx = state.context,\n            firstChar = textAfter && textAfter.charAt(0);\n        if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n        var closing = false;\n        var possibleClosing = textAfter.match(closingBracketOrWord);\n        if (possibleClosing) closing = isClosing(possibleClosing[0], ctx.type);\n\n        if (!compilerDirectivesUseRegularIndentation && textAfter.match(compilerDirectiveRegex)) {\n          if (textAfter.match(compilerDirectiveEndRegex)) {\n            return state.compilerDirectiveIndented - statementIndentUnit;\n          }\n\n          return state.compilerDirectiveIndented;\n        }\n\n        if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit);else if ((closingBracket.test(ctx.type) || ctx.type == \"assignment\") && ctx.align && !dontAlignCalls) return ctx.column + (closing ? 0 : 1);else if (ctx.type == \")\" && !closing) return ctx.indented + statementIndentUnit;else return ctx.indented + (closing ? 0 : indentUnit);\n      },\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\",\n      fold: \"indent\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-verilog\", {\n    name: \"verilog\"\n  });\n  CodeMirror.defineMIME(\"text/x-systemverilog\", {\n    name: \"verilog\"\n  }); // TL-Verilog mode.\n  // See tl-x.org for language spec.\n  // See the mode in action at makerchip.com.\n  // Contact: steve.hoover@redwoodeda.com\n  // TLV Identifier prefixes.\n  // Note that sign is not treated separately, so \"+/-\" versions of numeric identifiers\n  // are included.\n\n  var tlvIdentifierStyle = {\n    \"|\": \"link\",\n    \">\": \"property\",\n    // Should condition this off for > TLV 1c.\n    \"$\": \"variable\",\n    \"$$\": \"variable\",\n    \"?$\": \"qualifier\",\n    \"?*\": \"qualifier\",\n    \"-\": \"hr\",\n    \"/\": \"property\",\n    \"/-\": \"property\",\n    \"@\": \"variable-3\",\n    \"@-\": \"variable-3\",\n    \"@++\": \"variable-3\",\n    \"@+=\": \"variable-3\",\n    \"@+=-\": \"variable-3\",\n    \"@--\": \"variable-3\",\n    \"@-=\": \"variable-3\",\n    \"%+\": \"tag\",\n    \"%-\": \"tag\",\n    \"%\": \"tag\",\n    \">>\": \"tag\",\n    \"<<\": \"tag\",\n    \"<>\": \"tag\",\n    \"#\": \"tag\",\n    // Need to choose a style for this.\n    \"^\": \"attribute\",\n    \"^^\": \"attribute\",\n    \"^!\": \"attribute\",\n    \"*\": \"variable-2\",\n    \"**\": \"variable-2\",\n    \"\\\\\": \"keyword\",\n    \"\\\"\": \"comment\"\n  }; // Lines starting with these characters define scope (result in indentation).\n\n  var tlvScopePrefixChars = {\n    \"/\": \"beh-hier\",\n    \">\": \"beh-hier\",\n    \"-\": \"phys-hier\",\n    \"|\": \"pipe\",\n    \"?\": \"when\",\n    \"@\": \"stage\",\n    \"\\\\\": \"keyword\"\n  };\n  var tlvIndentUnit = 3;\n  var tlvTrackStatements = false;\n  var tlvIdentMatch = /^([~!@#\\$%\\^&\\*-\\+=\\?\\/\\\\\\|'\"<>]+)([\\d\\w_]*)/; // Matches an identifier.\n  // Note that ':' is excluded, because of it's use in [:].\n\n  var tlvFirstLevelIndentMatch = /^[! ]  /;\n  var tlvLineIndentationMatch = /^[! ] */;\n  var tlvCommentMatch = /^\\/[\\/\\*]/; // Returns a style specific to the scope at the given indentation column.\n  // Type is one of: \"indent\", \"scope-ident\", \"before-scope-ident\".\n\n  function tlvScopeStyle(state, indentation, type) {\n    // Begin scope.\n    var depth = indentation / tlvIndentUnit; // TODO: Pass this in instead.\n\n    return \"tlv-\" + state.tlvIndentationStyle[depth] + \"-\" + type;\n  } // Return true if the next thing in the stream is an identifier with a mnemonic.\n\n\n  function tlvIdentNext(stream) {\n    var match;\n    return (match = stream.match(tlvIdentMatch, false)) && match[2].length > 0;\n  }\n\n  CodeMirror.defineMIME(\"text/x-tlv\", {\n    name: \"verilog\",\n    hooks: {\n      electricInput: false,\n      // Return undefined for verilog tokenizing, or style for TLV token (null not used).\n      // Standard CM styles are used for most formatting, but some TL-Verilog-specific highlighting\n      // can be enabled with the definition of cm-tlv-* styles, including highlighting for:\n      //   - M4 tokens\n      //   - TLV scope indentation\n      //   - Statement delimitation (enabled by tlvTrackStatements)\n      token: function token(stream, state) {\n        var style = undefined;\n        var match; // Return value of pattern matches.\n        // Set highlighting mode based on code region (TLV or SV).\n\n        if (stream.sol() && !state.tlvInBlockComment) {\n          // Process region.\n          if (stream.peek() == '\\\\') {\n            style = \"def\";\n            stream.skipToEnd();\n\n            if (stream.string.match(/\\\\SV/)) {\n              state.tlvCodeActive = false;\n            } else if (stream.string.match(/\\\\TLV/)) {\n              state.tlvCodeActive = true;\n            }\n          } // Correct indentation in the face of a line prefix char.\n\n\n          if (state.tlvCodeActive && stream.pos == 0 && state.indented == 0 && (match = stream.match(tlvLineIndentationMatch, false))) {\n            state.indented = match[0].length;\n          } // Compute indentation state:\n          //   o Auto indentation on next line\n          //   o Indentation scope styles\n\n\n          var indented = state.indented;\n          var depth = indented / tlvIndentUnit;\n\n          if (depth <= state.tlvIndentationStyle.length) {\n            // not deeper than current scope\n            var blankline = stream.string.length == indented;\n            var chPos = depth * tlvIndentUnit;\n\n            if (chPos < stream.string.length) {\n              var bodyString = stream.string.slice(chPos);\n              var ch = bodyString[0];\n\n              if (tlvScopePrefixChars[ch] && (match = bodyString.match(tlvIdentMatch)) && tlvIdentifierStyle[match[1]]) {\n                // This line begins scope.\n                // Next line gets indented one level.\n                indented += tlvIndentUnit; // Style the next level of indentation (except non-region keyword identifiers,\n                //   which are statements themselves)\n\n                if (!(ch == \"\\\\\" && chPos > 0)) {\n                  state.tlvIndentationStyle[depth] = tlvScopePrefixChars[ch];\n\n                  if (tlvTrackStatements) {\n                    state.statementComment = false;\n                  }\n\n                  depth++;\n                }\n              }\n            } // Clear out deeper indentation levels unless line is blank.\n\n\n            if (!blankline) {\n              while (state.tlvIndentationStyle.length > depth) {\n                state.tlvIndentationStyle.pop();\n              }\n            }\n          } // Set next level of indentation.\n\n\n          state.tlvNextIndent = indented;\n        }\n\n        if (state.tlvCodeActive) {\n          // Highlight as TLV.\n          var beginStatement = false;\n\n          if (tlvTrackStatements) {\n            // This starts a statement if the position is at the scope level\n            // and we're not within a statement leading comment.\n            beginStatement = stream.peek() != \" \" && // not a space\n            style === undefined && // not a region identifier\n            !state.tlvInBlockComment && // not in block comment\n            //!stream.match(tlvCommentMatch, false) && // not comment start\n            stream.column() == state.tlvIndentationStyle.length * tlvIndentUnit; // at scope level\n\n            if (beginStatement) {\n              if (state.statementComment) {\n                // statement already started by comment\n                beginStatement = false;\n              }\n\n              state.statementComment = stream.match(tlvCommentMatch, false); // comment start\n            }\n          }\n\n          var match;\n\n          if (style !== undefined) {\n            // Region line.\n            style += \" \" + tlvScopeStyle(state, 0, \"scope-ident\");\n          } else if (stream.pos / tlvIndentUnit < state.tlvIndentationStyle.length && (match = stream.match(stream.sol() ? tlvFirstLevelIndentMatch : /^   /))) {\n            // Indentation\n            style = // make this style distinct from the previous one to prevent\n            // codemirror from combining spans\n            \"tlv-indent-\" + (stream.pos % 2 == 0 ? \"even\" : \"odd\") + // and style it\n            \" \" + tlvScopeStyle(state, stream.pos - tlvIndentUnit, \"indent\"); // Style the line prefix character.\n\n            if (match[0].charAt(0) == \"!\") {\n              style += \" tlv-alert-line-prefix\";\n            } // Place a class before a scope identifier.\n\n\n            if (tlvIdentNext(stream)) {\n              style += \" \" + tlvScopeStyle(state, stream.pos, \"before-scope-ident\");\n            }\n          } else if (state.tlvInBlockComment) {\n            // In a block comment.\n            if (stream.match(/^.*?\\*\\//)) {\n              // Exit block comment.\n              state.tlvInBlockComment = false;\n\n              if (tlvTrackStatements && !stream.eol()) {\n                // Anything after comment is assumed to be real statement content.\n                state.statementComment = false;\n              }\n            } else {\n              stream.skipToEnd();\n            }\n\n            style = \"comment\";\n          } else if ((match = stream.match(tlvCommentMatch)) && !state.tlvInBlockComment) {\n            // Start comment.\n            if (match[0] == \"//\") {\n              // Line comment.\n              stream.skipToEnd();\n            } else {\n              // Block comment.\n              state.tlvInBlockComment = true;\n            }\n\n            style = \"comment\";\n          } else if (match = stream.match(tlvIdentMatch)) {\n            // looks like an identifier (or identifier prefix)\n            var prefix = match[1];\n            var mnemonic = match[2];\n\n            if ( // is identifier prefix\n            tlvIdentifierStyle.hasOwnProperty(prefix) && ( // has mnemonic or we're at the end of the line (maybe it hasn't been typed yet)\n            mnemonic.length > 0 || stream.eol())) {\n              style = tlvIdentifierStyle[prefix];\n\n              if (stream.column() == state.indented) {\n                // Begin scope.\n                style += \" \" + tlvScopeStyle(state, stream.column(), \"scope-ident\");\n              }\n            } else {\n              // Just swallow one character and try again.\n              // This enables subsequent identifier match with preceding symbol character, which\n              //   is legal within a statement.  (E.g., !$reset).  It also enables detection of\n              //   comment start with preceding symbols.\n              stream.backUp(stream.current().length - 1);\n              style = \"tlv-default\";\n            }\n          } else if (stream.match(/^\\t+/)) {\n            // Highlight tabs, which are illegal.\n            style = \"tlv-tab\";\n          } else if (stream.match(/^[\\[\\]{}\\(\\);\\:]+/)) {\n            // [:], (), {}, ;.\n            style = \"meta\";\n          } else if (match = stream.match(/^[mM]4([\\+_])?[\\w\\d_]*/)) {\n            // m4 pre proc\n            style = match[1] == \"+\" ? \"tlv-m4-plus\" : \"tlv-m4\";\n          } else if (stream.match(/^ +/)) {\n            // Skip over spaces.\n            if (stream.eol()) {\n              // Trailing spaces.\n              style = \"error\";\n            } else {\n              // Non-trailing spaces.\n              style = \"tlv-default\";\n            }\n          } else if (stream.match(/^[\\w\\d_]+/)) {\n            // alpha-numeric token.\n            style = \"number\";\n          } else {\n            // Eat the next char w/ no formatting.\n            stream.next();\n            style = \"tlv-default\";\n          }\n\n          if (beginStatement) {\n            style += \" tlv-statement\";\n          }\n        } else {\n          if (stream.match(/^[mM]4([\\w\\d_]*)/)) {\n            // m4 pre proc\n            style = \"tlv-m4\";\n          }\n        }\n\n        return style;\n      },\n      indent: function indent(state) {\n        return state.tlvCodeActive == true ? state.tlvNextIndent : -1;\n      },\n      startState: function startState(state) {\n        state.tlvIndentationStyle = []; // Styles to use for each level of indentation.\n\n        state.tlvCodeActive = true; // True when we're in a TLV region (and at beginning of file).\n\n        state.tlvNextIndent = -1; // The number of spaces to autoindent the next line if tlvCodeActive.\n\n        state.tlvInBlockComment = false; // True inside /**/ comment.\n\n        if (tlvTrackStatements) {\n          state.statementComment = false; // True inside a statement's header comment.\n        }\n      }\n    }\n  });\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConfig","indentUnit","statementIndentUnit","dontAlignCalls","compilerDirectivesUseRegularIndentation","noIndentKeywords","multiLineStrings","hooks","words","str","obj","split","i","length","keywords","isOperatorChar","isBracketChar","unsignedNumber","decimalLiteral","binaryLiteral","octLiteral","hexLiteral","realLiteral","closingBracketOrWord","closingBracket","compilerDirectiveRegex","RegExp","compilerDirectiveBeginRegex","compilerDirectiveEndRegex","curPunc","curKeyword","blockKeywords","openClose","keyword","undefined","statementKeywords","tokenBase","stream","state","ch","peek","style","test","next","eatWhile","cur","current","startsWith","endsWith","keywordClose","substr","eatSpace","withSpace","backUp","tokenize","tokenString","eat","tokenComment","skipToEnd","match","quote","escaped","end","maybeEnd","Context","indented","column","type","scopekind","align","prev","pushContext","col","indent","c","context","popContext","t","isClosing","text","contextClosing","closingKeywords","isInsideScopeKind","ctx","buildElectricInputRegEx","allClosings","closings","j","push","re","join","electricInput","startState","basecolumn","compilerDirectiveIndented","startOfLine","token","sol","indentation","isClosingAssignment","close","textAfter","Pass","fromHook","firstChar","charAt","closing","possibleClosing","blockCommentStart","blockCommentEnd","lineComment","fold","defineMIME","name","tlvIdentifierStyle","tlvScopePrefixChars","tlvIndentUnit","tlvTrackStatements","tlvIdentMatch","tlvFirstLevelIndentMatch","tlvLineIndentationMatch","tlvCommentMatch","tlvScopeStyle","depth","tlvIndentationStyle","tlvIdentNext","tlvInBlockComment","string","tlvCodeActive","pos","blankline","chPos","bodyString","slice","statementComment","pop","tlvNextIndent","beginStatement","eol","prefix","mnemonic","hasOwnProperty"],"sources":["/mnt/Datengrab/python/Zero-tier/frontend/node_modules/codemirror/mode/verilog/verilog.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"verilog\", function(config, parserConfig) {\n\n  var indentUnit = config.indentUnit,\n      statementIndentUnit = parserConfig.statementIndentUnit || indentUnit,\n      dontAlignCalls = parserConfig.dontAlignCalls,\n      // compilerDirectivesUseRegularIndentation - If set, Compiler directive\n      // indentation follows the same rules as everything else. Otherwise if\n      // false, compiler directives will track their own indentation.\n      // For example, `ifdef nested inside another `ifndef will be indented,\n      // but a `ifdef inside a function block may not be indented.\n      compilerDirectivesUseRegularIndentation = parserConfig.compilerDirectivesUseRegularIndentation,\n      noIndentKeywords = parserConfig.noIndentKeywords || [],\n      multiLineStrings = parserConfig.multiLineStrings,\n      hooks = parserConfig.hooks || {};\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  /**\n   * Keywords from IEEE 1800-2012\n   */\n  var keywords = words(\n    \"accept_on alias always always_comb always_ff always_latch and assert assign assume automatic before begin bind \" +\n    \"bins binsof bit break buf bufif0 bufif1 byte case casex casez cell chandle checker class clocking cmos config \" +\n    \"const constraint context continue cover covergroup coverpoint cross deassign default defparam design disable \" +\n    \"dist do edge else end endcase endchecker endclass endclocking endconfig endfunction endgenerate endgroup \" +\n    \"endinterface endmodule endpackage endprimitive endprogram endproperty endspecify endsequence endtable endtask \" +\n    \"enum event eventually expect export extends extern final first_match for force foreach forever fork forkjoin \" +\n    \"function generate genvar global highz0 highz1 if iff ifnone ignore_bins illegal_bins implements implies import \" +\n    \"incdir include initial inout input inside instance int integer interconnect interface intersect join join_any \" +\n    \"join_none large let liblist library local localparam logic longint macromodule matches medium modport module \" +\n    \"nand negedge nettype new nexttime nmos nor noshowcancelled not notif0 notif1 null or output package packed \" +\n    \"parameter pmos posedge primitive priority program property protected pull0 pull1 pulldown pullup \" +\n    \"pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos real realtime ref reg \" +\n    \"reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 s_always s_eventually s_nexttime \" +\n    \"s_until s_until_with scalared sequence shortint shortreal showcancelled signed small soft solve specify \" +\n    \"specparam static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on sync_reject_on \" +\n    \"table tagged task this throughout time timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior \" +\n    \"trireg type typedef union unique unique0 unsigned until until_with untyped use uwire var vectored virtual void \" +\n    \"wait wait_order wand weak weak0 weak1 while wildcard wire with within wor xnor xor\");\n\n  /** Operators from IEEE 1800-2012\n     unary_operator ::=\n       + | - | ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~\n     binary_operator ::=\n       + | - | * | / | % | == | != | === | !== | ==? | !=? | && | || | **\n       | < | <= | > | >= | & | | | ^ | ^~ | ~^ | >> | << | >>> | <<<\n       | -> | <->\n     inc_or_dec_operator ::= ++ | --\n     unary_module_path_operator ::=\n       ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~\n     binary_module_path_operator ::=\n       == | != | && | || | & | | | ^ | ^~ | ~^\n  */\n  var isOperatorChar = /[\\+\\-\\*\\/!~&|^%=?:<>]/;\n  var isBracketChar = /[\\[\\]{}()]/;\n\n  var unsignedNumber = /\\d[0-9_]*/;\n  var decimalLiteral = /\\d*\\s*'s?d\\s*\\d[0-9_]*/i;\n  var binaryLiteral = /\\d*\\s*'s?b\\s*[xz01][xz01_]*/i;\n  var octLiteral = /\\d*\\s*'s?o\\s*[xz0-7][xz0-7_]*/i;\n  var hexLiteral = /\\d*\\s*'s?h\\s*[0-9a-fxz?][0-9a-fxz?_]*/i;\n  var realLiteral = /(\\d[\\d_]*(\\.\\d[\\d_]*)?E-?[\\d_]+)|(\\d[\\d_]*\\.\\d[\\d_]*)/i;\n\n  var closingBracketOrWord = /^((`?\\w+)|[)}\\]])/;\n  var closingBracket = /[)}\\]]/;\n  var compilerDirectiveRegex      = new RegExp(\n    \"^(`(?:ifdef|ifndef|elsif|else|endif|undef|undefineall|define|include|begin_keywords|celldefine|default|\" +\n    \"nettype|end_keywords|endcelldefine|line|nounconnected_drive|pragma|resetall|timescale|unconnected_drive))\\\\b\");\n  var compilerDirectiveBeginRegex = /^(`(?:ifdef|ifndef|elsif|else))\\b/;\n  var compilerDirectiveEndRegex   = /^(`(?:elsif|else|endif))\\b/;\n\n  var curPunc;\n  var curKeyword;\n\n  // Block openings which are closed by a matching keyword in the form of (\"end\" + keyword)\n  // E.g. \"task\" => \"endtask\"\n  var blockKeywords = words(\n    \"case checker class clocking config function generate interface module package \" +\n    \"primitive program property specify sequence table task\"\n  );\n\n  // Opening/closing pairs\n  var openClose = {};\n  for (var keyword in blockKeywords) {\n    openClose[keyword] = \"end\" + keyword;\n  }\n  openClose[\"begin\"] = \"end\";\n  openClose[\"casex\"] = \"endcase\";\n  openClose[\"casez\"] = \"endcase\";\n  openClose[\"do\"   ] = \"while\";\n  openClose[\"fork\" ] = \"join;join_any;join_none\";\n  openClose[\"covergroup\"] = \"endgroup\";\n  openClose[\"macro_begin\"] = \"macro_end\";\n\n  for (var i in noIndentKeywords) {\n    var keyword = noIndentKeywords[i];\n    if (openClose[keyword]) {\n      openClose[keyword] = undefined;\n    }\n  }\n\n  // Keywords which open statements that are ended with a semi-colon\n  var statementKeywords = words(\"always always_comb always_ff always_latch assert assign assume else export for foreach forever if import initial repeat while extern typedef\");\n\n  function tokenBase(stream, state) {\n    var ch = stream.peek(), style;\n    if (hooks[ch] && (style = hooks[ch](stream, state)) != false) return style;\n    if (hooks.tokenBase && (style = hooks.tokenBase(stream, state)) != false)\n      return style;\n\n    if (/[,;:\\.]/.test(ch)) {\n      curPunc = stream.next();\n      return null;\n    }\n    if (isBracketChar.test(ch)) {\n      curPunc = stream.next();\n      return \"bracket\";\n    }\n    // Macros (tick-defines)\n    if (ch == '`') {\n      stream.next();\n      if (stream.eatWhile(/[\\w\\$_]/)) {\n        var cur = stream.current();\n        curKeyword = cur;\n        // Macros that end in _begin, are start of block and end with _end\n        if (cur.startsWith(\"`uvm_\") && cur.endsWith(\"_begin\")) {\n          var keywordClose = curKeyword.substr(0,curKeyword.length - 5) + \"end\";\n          openClose[cur] = keywordClose;\n          curPunc = \"newblock\";\n        } else {\n          stream.eatSpace();\n          if (stream.peek() == '(') {\n            // Check if this is a block\n            curPunc = \"newmacro\";\n          }\n          var withSpace = stream.current();\n          // Move the stream back before the spaces\n          stream.backUp(withSpace.length - cur.length);\n        }\n        return \"def\";\n      } else {\n        return null;\n      }\n    }\n    // System calls\n    if (ch == '$') {\n      stream.next();\n      if (stream.eatWhile(/[\\w\\$_]/)) {\n        return \"meta\";\n      } else {\n        return null;\n      }\n    }\n    // Time literals\n    if (ch == '#') {\n      stream.next();\n      stream.eatWhile(/[\\d_.]/);\n      return \"def\";\n    }\n    // Event\n    if (ch == '@') {\n      stream.next();\n      stream.eatWhile(/[@]/);\n      return \"def\";\n    }\n    // Strings\n    if (ch == '\"') {\n      stream.next();\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    // Comments\n    if (ch == \"/\") {\n      stream.next();\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      stream.backUp(1);\n    }\n\n    // Numeric literals\n    if (stream.match(realLiteral) ||\n        stream.match(decimalLiteral) ||\n        stream.match(binaryLiteral) ||\n        stream.match(octLiteral) ||\n        stream.match(hexLiteral) ||\n        stream.match(unsignedNumber) ||\n        stream.match(realLiteral)) {\n      return \"number\";\n    }\n\n    // Operators\n    if (stream.eatWhile(isOperatorChar)) {\n      curPunc = stream.current();\n      return \"meta\";\n    }\n\n    // Keywords / plain variables\n    if (stream.eatWhile(/[\\w\\$_]/)) {\n      var cur = stream.current();\n      if (keywords[cur]) {\n        if (openClose[cur]) {\n          curPunc = \"newblock\";\n          if (cur === \"fork\") {\n            // Fork can be a statement instead of block in cases of:\n            // \"disable fork;\" and \"wait fork;\" (trailing semicolon)\n            stream.eatSpace()\n            if (stream.peek() == ';') {\n              curPunc = \"newstatement\";\n            }\n            stream.backUp(stream.current().length - cur.length);\n          }\n        }\n        if (statementKeywords[cur]) {\n          curPunc = \"newstatement\";\n        }\n        curKeyword = cur;\n        return \"keyword\";\n      }\n      return \"variable\";\n    }\n\n    stream.next();\n    return null;\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function Context(indented, column, type, scopekind, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.scopekind = scopekind;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type, scopekind) {\n    var indent = state.indented;\n    var c = new Context(indent, col, type, scopekind ? scopekind : \"\", null, state.context);\n    return state.context = c;\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\") {\n      state.indented = state.context.indented;\n    }\n    return state.context = state.context.prev;\n  }\n\n  function isClosing(text, contextClosing) {\n    if (text == contextClosing) {\n      return true;\n    } else {\n      // contextClosing may be multiple keywords separated by ;\n      var closingKeywords = contextClosing.split(\";\");\n      for (var i in closingKeywords) {\n        if (text == closingKeywords[i]) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  function isInsideScopeKind(ctx, scopekind) {\n    if (ctx == null) {\n      return false;\n    }\n    if (ctx.scopekind === scopekind) {\n      return true;\n    }\n    return isInsideScopeKind(ctx.prev, scopekind);\n  }\n\n  function buildElectricInputRegEx() {\n    // Reindentation should occur on any bracket char: {}()[]\n    // or on a match of any of the block closing keywords, at\n    // the end of a line\n    var allClosings = [];\n    for (var i in openClose) {\n      if (openClose[i]) {\n        var closings = openClose[i].split(\";\");\n        for (var j in closings) {\n          allClosings.push(closings[j]);\n        }\n      }\n    }\n    var re = new RegExp(\"[{}()\\\\[\\\\]]|(\" + allClosings.join(\"|\") + \")$\");\n    return re;\n  }\n\n  // Interface\n  return {\n\n    // Regex to force current line to reindent\n    electricInput: buildElectricInputRegEx(),\n\n    startState: function(basecolumn) {\n      var state = {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", \"top\", false),\n        indented: 0,\n        compilerDirectiveIndented: 0,\n        startOfLine: true\n      };\n      if (hooks.startState) hooks.startState(state);\n      return state;\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (hooks.token) {\n        // Call hook, with an optional return value of a style to override verilog styling.\n        var style = hooks.token(stream, state);\n        if (style !== undefined) {\n          return style;\n        }\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      curKeyword = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\" || style == \"variable\") {\n        if (((curPunc === \"=\") || (curPunc === \"<=\")) && !isInsideScopeKind(ctx, \"assignment\")) {\n          // '<=' could be nonblocking assignment or lessthan-equals (which shouldn't cause indent)\n          //      Search through the context to see if we are already in an assignment.\n          // '=' could be inside port declaration with comma or ')' afterward, or inside for(;;) block.\n          pushContext(state, stream.column() + curPunc.length, \"assignment\", \"assignment\");\n          if (ctx.align == null) ctx.align = true;\n        }\n        return style;\n      }\n      if (ctx.align == null) ctx.align = true;\n\n      var isClosingAssignment = ctx.type == \"assignment\" &&\n        closingBracket.test(curPunc) && ctx.prev && ctx.prev.type === curPunc;\n      if (curPunc == ctx.type || isClosingAssignment) {\n        if (isClosingAssignment) {\n          ctx = popContext(state);\n        }\n        ctx = popContext(state);\n        if (curPunc == \")\") {\n          // Handle closing macros, assuming they could have a semicolon or begin/end block inside.\n          if (ctx && (ctx.type === \"macro\")) {\n            ctx = popContext(state);\n            while (ctx && (ctx.type == \"statement\" || ctx.type == \"assignment\")) ctx = popContext(state);\n          }\n        } else if (curPunc == \"}\") {\n          // Handle closing statements like constraint block: \"foreach () {}\" which\n          // do not have semicolon at end.\n          if (ctx && (ctx.type === \"statement\")) {\n            while (ctx && (ctx.type == \"statement\")) ctx = popContext(state);\n          }\n        }\n      } else if (((curPunc == \";\" || curPunc == \",\") && (ctx.type == \"statement\" || ctx.type == \"assignment\")) ||\n               (ctx.type && isClosing(curKeyword, ctx.type))) {\n        ctx = popContext(state);\n        while (ctx && (ctx.type == \"statement\" || ctx.type == \"assignment\")) ctx = popContext(state);\n      } else if (curPunc == \"{\") {\n        pushContext(state, stream.column(), \"}\");\n      } else if (curPunc == \"[\") {\n        pushContext(state, stream.column(), \"]\");\n      } else if (curPunc == \"(\") {\n        pushContext(state, stream.column(), \")\");\n      } else if (ctx && ctx.type == \"endcase\" && curPunc == \":\") {\n        pushContext(state, stream.column(), \"statement\", \"case\");\n      } else if (curPunc == \"newstatement\") {\n        pushContext(state, stream.column(), \"statement\", curKeyword);\n      } else if (curPunc == \"newblock\") {\n        if (curKeyword == \"function\" && ctx && (ctx.type == \"statement\" || ctx.type == \"endgroup\")) {\n          // The 'function' keyword can appear in some other contexts where it actually does not\n          // indicate a function (import/export DPI and covergroup definitions).\n          // Do nothing in this case\n        } else if (curKeyword == \"task\" && ctx && ctx.type == \"statement\") {\n          // Same thing for task\n        } else if (curKeyword == \"class\" && ctx && ctx.type == \"statement\") {\n          // Same thing for class (e.g. typedef)\n        } else {\n          var close = openClose[curKeyword];\n          pushContext(state, stream.column(), close, curKeyword);\n        }\n      } else if (curPunc == \"newmacro\" || (curKeyword && curKeyword.match(compilerDirectiveRegex))) {\n        if (curPunc == \"newmacro\") {\n          // Macros (especially if they have parenthesis) potentially have a semicolon\n          // or complete statement/block inside, and should be treated as such.\n          pushContext(state, stream.column(), \"macro\", \"macro\");\n        }\n        if (curKeyword.match(compilerDirectiveEndRegex)) {\n          state.compilerDirectiveIndented -= statementIndentUnit;\n        }\n        if (curKeyword.match(compilerDirectiveBeginRegex)) {\n          state.compilerDirectiveIndented += statementIndentUnit;\n        }\n      }\n\n      state.startOfLine = false;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return CodeMirror.Pass;\n      if (hooks.indent) {\n        var fromHook = hooks.indent(state);\n        if (fromHook >= 0) return fromHook;\n      }\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n      var closing = false;\n      var possibleClosing = textAfter.match(closingBracketOrWord);\n      if (possibleClosing)\n        closing = isClosing(possibleClosing[0], ctx.type);\n      if (!compilerDirectivesUseRegularIndentation && textAfter.match(compilerDirectiveRegex)) {\n        if (textAfter.match(compilerDirectiveEndRegex)) {\n          return state.compilerDirectiveIndented - statementIndentUnit;\n        }\n        return state.compilerDirectiveIndented;\n      }\n      if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit);\n      else if ((closingBracket.test(ctx.type) || ctx.type == \"assignment\")\n        && ctx.align && !dontAlignCalls) return ctx.column + (closing ? 0 : 1);\n      else if (ctx.type == \")\" && !closing) return ctx.indented + statementIndentUnit;\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\",\n    fold: \"indent\"\n  };\n});\n\n  CodeMirror.defineMIME(\"text/x-verilog\", {\n    name: \"verilog\"\n  });\n\n  CodeMirror.defineMIME(\"text/x-systemverilog\", {\n    name: \"verilog\"\n  });\n\n\n\n  // TL-Verilog mode.\n  // See tl-x.org for language spec.\n  // See the mode in action at makerchip.com.\n  // Contact: steve.hoover@redwoodeda.com\n\n  // TLV Identifier prefixes.\n  // Note that sign is not treated separately, so \"+/-\" versions of numeric identifiers\n  // are included.\n  var tlvIdentifierStyle = {\n    \"|\": \"link\",\n    \">\": \"property\",  // Should condition this off for > TLV 1c.\n    \"$\": \"variable\",\n    \"$$\": \"variable\",\n    \"?$\": \"qualifier\",\n    \"?*\": \"qualifier\",\n    \"-\": \"hr\",\n    \"/\": \"property\",\n    \"/-\": \"property\",\n    \"@\": \"variable-3\",\n    \"@-\": \"variable-3\",\n    \"@++\": \"variable-3\",\n    \"@+=\": \"variable-3\",\n    \"@+=-\": \"variable-3\",\n    \"@--\": \"variable-3\",\n    \"@-=\": \"variable-3\",\n    \"%+\": \"tag\",\n    \"%-\": \"tag\",\n    \"%\": \"tag\",\n    \">>\": \"tag\",\n    \"<<\": \"tag\",\n    \"<>\": \"tag\",\n    \"#\": \"tag\",  // Need to choose a style for this.\n    \"^\": \"attribute\",\n    \"^^\": \"attribute\",\n    \"^!\": \"attribute\",\n    \"*\": \"variable-2\",\n    \"**\": \"variable-2\",\n    \"\\\\\": \"keyword\",\n    \"\\\"\": \"comment\"\n  };\n\n  // Lines starting with these characters define scope (result in indentation).\n  var tlvScopePrefixChars = {\n    \"/\": \"beh-hier\",\n    \">\": \"beh-hier\",\n    \"-\": \"phys-hier\",\n    \"|\": \"pipe\",\n    \"?\": \"when\",\n    \"@\": \"stage\",\n    \"\\\\\": \"keyword\"\n  };\n  var tlvIndentUnit = 3;\n  var tlvTrackStatements = false;\n  var tlvIdentMatch = /^([~!@#\\$%\\^&\\*-\\+=\\?\\/\\\\\\|'\"<>]+)([\\d\\w_]*)/;  // Matches an identifier.\n  // Note that ':' is excluded, because of it's use in [:].\n  var tlvFirstLevelIndentMatch = /^[! ]  /;\n  var tlvLineIndentationMatch = /^[! ] */;\n  var tlvCommentMatch = /^\\/[\\/\\*]/;\n\n\n  // Returns a style specific to the scope at the given indentation column.\n  // Type is one of: \"indent\", \"scope-ident\", \"before-scope-ident\".\n  function tlvScopeStyle(state, indentation, type) {\n    // Begin scope.\n    var depth = indentation / tlvIndentUnit;  // TODO: Pass this in instead.\n    return \"tlv-\" + state.tlvIndentationStyle[depth] + \"-\" + type;\n  }\n\n  // Return true if the next thing in the stream is an identifier with a mnemonic.\n  function tlvIdentNext(stream) {\n    var match;\n    return (match = stream.match(tlvIdentMatch, false)) && match[2].length > 0;\n  }\n\n  CodeMirror.defineMIME(\"text/x-tlv\", {\n    name: \"verilog\",\n\n    hooks: {\n\n      electricInput: false,\n\n\n      // Return undefined for verilog tokenizing, or style for TLV token (null not used).\n      // Standard CM styles are used for most formatting, but some TL-Verilog-specific highlighting\n      // can be enabled with the definition of cm-tlv-* styles, including highlighting for:\n      //   - M4 tokens\n      //   - TLV scope indentation\n      //   - Statement delimitation (enabled by tlvTrackStatements)\n      token: function(stream, state) {\n        var style = undefined;\n        var match;  // Return value of pattern matches.\n\n        // Set highlighting mode based on code region (TLV or SV).\n        if (stream.sol() && ! state.tlvInBlockComment) {\n          // Process region.\n          if (stream.peek() == '\\\\') {\n            style = \"def\";\n            stream.skipToEnd();\n            if (stream.string.match(/\\\\SV/)) {\n              state.tlvCodeActive = false;\n            } else if (stream.string.match(/\\\\TLV/)){\n              state.tlvCodeActive = true;\n            }\n          }\n          // Correct indentation in the face of a line prefix char.\n          if (state.tlvCodeActive && stream.pos == 0 &&\n              (state.indented == 0) && (match = stream.match(tlvLineIndentationMatch, false))) {\n            state.indented = match[0].length;\n          }\n\n          // Compute indentation state:\n          //   o Auto indentation on next line\n          //   o Indentation scope styles\n          var indented = state.indented;\n          var depth = indented / tlvIndentUnit;\n          if (depth <= state.tlvIndentationStyle.length) {\n            // not deeper than current scope\n\n            var blankline = stream.string.length == indented;\n            var chPos = depth * tlvIndentUnit;\n            if (chPos < stream.string.length) {\n              var bodyString = stream.string.slice(chPos);\n              var ch = bodyString[0];\n              if (tlvScopePrefixChars[ch] && ((match = bodyString.match(tlvIdentMatch)) &&\n                  tlvIdentifierStyle[match[1]])) {\n                // This line begins scope.\n                // Next line gets indented one level.\n                indented += tlvIndentUnit;\n                // Style the next level of indentation (except non-region keyword identifiers,\n                //   which are statements themselves)\n                if (!(ch == \"\\\\\" && chPos > 0)) {\n                  state.tlvIndentationStyle[depth] = tlvScopePrefixChars[ch];\n                  if (tlvTrackStatements) {state.statementComment = false;}\n                  depth++;\n                }\n              }\n            }\n            // Clear out deeper indentation levels unless line is blank.\n            if (!blankline) {\n              while (state.tlvIndentationStyle.length > depth) {\n                state.tlvIndentationStyle.pop();\n              }\n            }\n          }\n          // Set next level of indentation.\n          state.tlvNextIndent = indented;\n        }\n\n        if (state.tlvCodeActive) {\n          // Highlight as TLV.\n\n          var beginStatement = false;\n          if (tlvTrackStatements) {\n            // This starts a statement if the position is at the scope level\n            // and we're not within a statement leading comment.\n            beginStatement =\n                   (stream.peek() != \" \") &&   // not a space\n                   (style === undefined) &&    // not a region identifier\n                   !state.tlvInBlockComment && // not in block comment\n                   //!stream.match(tlvCommentMatch, false) && // not comment start\n                   (stream.column() == state.tlvIndentationStyle.length * tlvIndentUnit);  // at scope level\n            if (beginStatement) {\n              if (state.statementComment) {\n                // statement already started by comment\n                beginStatement = false;\n              }\n              state.statementComment =\n                   stream.match(tlvCommentMatch, false); // comment start\n            }\n          }\n\n          var match;\n          if (style !== undefined) {\n            // Region line.\n            style += \" \" + tlvScopeStyle(state, 0, \"scope-ident\")\n          } else if (((stream.pos / tlvIndentUnit) < state.tlvIndentationStyle.length) &&\n                     (match = stream.match(stream.sol() ? tlvFirstLevelIndentMatch : /^   /))) {\n            // Indentation\n            style = // make this style distinct from the previous one to prevent\n                    // codemirror from combining spans\n                    \"tlv-indent-\" + (((stream.pos % 2) == 0) ? \"even\" : \"odd\") +\n                    // and style it\n                    \" \" + tlvScopeStyle(state, stream.pos - tlvIndentUnit, \"indent\");\n            // Style the line prefix character.\n            if (match[0].charAt(0) == \"!\") {\n              style += \" tlv-alert-line-prefix\";\n            }\n            // Place a class before a scope identifier.\n            if (tlvIdentNext(stream)) {\n              style += \" \" + tlvScopeStyle(state, stream.pos, \"before-scope-ident\");\n            }\n          } else if (state.tlvInBlockComment) {\n            // In a block comment.\n            if (stream.match(/^.*?\\*\\//)) {\n              // Exit block comment.\n              state.tlvInBlockComment = false;\n              if (tlvTrackStatements && !stream.eol()) {\n                // Anything after comment is assumed to be real statement content.\n                state.statementComment = false;\n              }\n            } else {\n              stream.skipToEnd();\n            }\n            style = \"comment\";\n          } else if ((match = stream.match(tlvCommentMatch)) && !state.tlvInBlockComment) {\n            // Start comment.\n            if (match[0] == \"//\") {\n              // Line comment.\n              stream.skipToEnd();\n            } else {\n              // Block comment.\n              state.tlvInBlockComment = true;\n            }\n            style = \"comment\";\n          } else if (match = stream.match(tlvIdentMatch)) {\n            // looks like an identifier (or identifier prefix)\n            var prefix = match[1];\n            var mnemonic = match[2];\n            if (// is identifier prefix\n                tlvIdentifierStyle.hasOwnProperty(prefix) &&\n                // has mnemonic or we're at the end of the line (maybe it hasn't been typed yet)\n                (mnemonic.length > 0 || stream.eol())) {\n              style = tlvIdentifierStyle[prefix];\n              if (stream.column() == state.indented) {\n                // Begin scope.\n                style += \" \" + tlvScopeStyle(state, stream.column(), \"scope-ident\")\n              }\n            } else {\n              // Just swallow one character and try again.\n              // This enables subsequent identifier match with preceding symbol character, which\n              //   is legal within a statement.  (E.g., !$reset).  It also enables detection of\n              //   comment start with preceding symbols.\n              stream.backUp(stream.current().length - 1);\n              style = \"tlv-default\";\n            }\n          } else if (stream.match(/^\\t+/)) {\n            // Highlight tabs, which are illegal.\n            style = \"tlv-tab\";\n          } else if (stream.match(/^[\\[\\]{}\\(\\);\\:]+/)) {\n            // [:], (), {}, ;.\n            style = \"meta\";\n          } else if (match = stream.match(/^[mM]4([\\+_])?[\\w\\d_]*/)) {\n            // m4 pre proc\n            style = (match[1] == \"+\") ? \"tlv-m4-plus\" : \"tlv-m4\";\n          } else if (stream.match(/^ +/)){\n            // Skip over spaces.\n            if (stream.eol()) {\n              // Trailing spaces.\n              style = \"error\";\n            } else {\n              // Non-trailing spaces.\n              style = \"tlv-default\";\n            }\n          } else if (stream.match(/^[\\w\\d_]+/)) {\n            // alpha-numeric token.\n            style = \"number\";\n          } else {\n            // Eat the next char w/ no formatting.\n            stream.next();\n            style = \"tlv-default\";\n          }\n          if (beginStatement) {\n            style += \" tlv-statement\";\n          }\n        } else {\n          if (stream.match(/^[mM]4([\\w\\d_]*)/)) {\n            // m4 pre proc\n            style = \"tlv-m4\";\n          }\n        }\n        return style;\n      },\n\n      indent: function(state) {\n        return (state.tlvCodeActive == true) ? state.tlvNextIndent : -1;\n      },\n\n      startState: function(state) {\n        state.tlvIndentationStyle = [];  // Styles to use for each level of indentation.\n        state.tlvCodeActive = true;  // True when we're in a TLV region (and at beginning of file).\n        state.tlvNextIndent = -1;    // The number of spaces to autoindent the next line if tlvCodeActive.\n        state.tlvInBlockComment = false;  // True inside /**/ comment.\n        if (tlvTrackStatements) {\n          state.statementComment = false;  // True inside a statement's header comment.\n        }\n      }\n\n    }\n  });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}