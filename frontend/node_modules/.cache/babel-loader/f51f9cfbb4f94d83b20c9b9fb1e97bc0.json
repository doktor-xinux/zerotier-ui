{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*jshint unused:true, eqnull:true, curly:true, bitwise:true */\n\n/*jshint undef:true, latedef:true, trailing:true */\n\n/*global CodeMirror:true */\n// erlang mode.\n// tokenizer -> token types -> CodeMirror styles\n// tokenizer maintains a parse stack\n// indenter uses the parse stack\n// TODO indenter:\n//   bit syntax\n//   old guard/bif/conversion clashes (e.g. \"float/1\")\n//   type/spec/opaque\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMIME(\"text/x-erlang\", \"erlang\");\n  CodeMirror.defineMode(\"erlang\", function (cmCfg) {\n    \"use strict\"; /////////////////////////////////////////////////////////////////////////////\n    // constants\n\n    var typeWords = [\"-type\", \"-spec\", \"-export_type\", \"-opaque\"];\n    var keywordWords = [\"after\", \"begin\", \"catch\", \"case\", \"cond\", \"end\", \"fun\", \"if\", \"let\", \"of\", \"query\", \"receive\", \"try\", \"when\"];\n    var separatorRE = /[\\->,;]/;\n    var separatorWords = [\"->\", \";\", \",\"];\n    var operatorAtomWords = [\"and\", \"andalso\", \"band\", \"bnot\", \"bor\", \"bsl\", \"bsr\", \"bxor\", \"div\", \"not\", \"or\", \"orelse\", \"rem\", \"xor\"];\n    var operatorSymbolRE = /[\\+\\-\\*\\/<>=\\|:!]/;\n    var operatorSymbolWords = [\"=\", \"+\", \"-\", \"*\", \"/\", \">\", \">=\", \"<\", \"=<\", \"=:=\", \"==\", \"=/=\", \"/=\", \"||\", \"<-\", \"!\"];\n    var openParenRE = /[<\\(\\[\\{]/;\n    var openParenWords = [\"<<\", \"(\", \"[\", \"{\"];\n    var closeParenRE = /[>\\)\\]\\}]/;\n    var closeParenWords = [\"}\", \"]\", \")\", \">>\"];\n    var guardWords = [\"is_atom\", \"is_binary\", \"is_bitstring\", \"is_boolean\", \"is_float\", \"is_function\", \"is_integer\", \"is_list\", \"is_number\", \"is_pid\", \"is_port\", \"is_record\", \"is_reference\", \"is_tuple\", \"atom\", \"binary\", \"bitstring\", \"boolean\", \"function\", \"integer\", \"list\", \"number\", \"pid\", \"port\", \"record\", \"reference\", \"tuple\"];\n    var bifWords = [\"abs\", \"adler32\", \"adler32_combine\", \"alive\", \"apply\", \"atom_to_binary\", \"atom_to_list\", \"binary_to_atom\", \"binary_to_existing_atom\", \"binary_to_list\", \"binary_to_term\", \"bit_size\", \"bitstring_to_list\", \"byte_size\", \"check_process_code\", \"contact_binary\", \"crc32\", \"crc32_combine\", \"date\", \"decode_packet\", \"delete_module\", \"disconnect_node\", \"element\", \"erase\", \"exit\", \"float\", \"float_to_list\", \"garbage_collect\", \"get\", \"get_keys\", \"group_leader\", \"halt\", \"hd\", \"integer_to_list\", \"internal_bif\", \"iolist_size\", \"iolist_to_binary\", \"is_alive\", \"is_atom\", \"is_binary\", \"is_bitstring\", \"is_boolean\", \"is_float\", \"is_function\", \"is_integer\", \"is_list\", \"is_number\", \"is_pid\", \"is_port\", \"is_process_alive\", \"is_record\", \"is_reference\", \"is_tuple\", \"length\", \"link\", \"list_to_atom\", \"list_to_binary\", \"list_to_bitstring\", \"list_to_existing_atom\", \"list_to_float\", \"list_to_integer\", \"list_to_pid\", \"list_to_tuple\", \"load_module\", \"make_ref\", \"module_loaded\", \"monitor_node\", \"node\", \"node_link\", \"node_unlink\", \"nodes\", \"notalive\", \"now\", \"open_port\", \"pid_to_list\", \"port_close\", \"port_command\", \"port_connect\", \"port_control\", \"pre_loaded\", \"process_flag\", \"process_info\", \"processes\", \"purge_module\", \"put\", \"register\", \"registered\", \"round\", \"self\", \"setelement\", \"size\", \"spawn\", \"spawn_link\", \"spawn_monitor\", \"spawn_opt\", \"split_binary\", \"statistics\", \"term_to_binary\", \"time\", \"throw\", \"tl\", \"trunc\", \"tuple_size\", \"tuple_to_list\", \"unlink\", \"unregister\", \"whereis\"]; // upper case: [A-Z] [Ø-Þ] [À-Ö]\n    // lower case: [a-z] [ß-ö] [ø-ÿ]\n\n    var anumRE = /[\\w@Ø-ÞÀ-Öß-öø-ÿ]/;\n    var escapesRE = /[0-7]{1,3}|[bdefnrstv\\\\\"']|\\^[a-zA-Z]|x[0-9a-zA-Z]{2}|x{[0-9a-zA-Z]+}/; /////////////////////////////////////////////////////////////////////////////\n    // tokenizer\n\n    function tokenizer(stream, state) {\n      // in multi-line string\n      if (state.in_string) {\n        state.in_string = !doubleQuote(stream);\n        return rval(state, stream, \"string\");\n      } // in multi-line atom\n\n\n      if (state.in_atom) {\n        state.in_atom = !singleQuote(stream);\n        return rval(state, stream, \"atom\");\n      } // whitespace\n\n\n      if (stream.eatSpace()) {\n        return rval(state, stream, \"whitespace\");\n      } // attributes and type specs\n\n\n      if (!peekToken(state) && stream.match(/-\\s*[a-zß-öø-ÿ][\\wØ-ÞÀ-Öß-öø-ÿ]*/)) {\n        if (is_member(stream.current(), typeWords)) {\n          return rval(state, stream, \"type\");\n        } else {\n          return rval(state, stream, \"attribute\");\n        }\n      }\n\n      var ch = stream.next(); // comment\n\n      if (ch == '%') {\n        stream.skipToEnd();\n        return rval(state, stream, \"comment\");\n      } // colon\n\n\n      if (ch == \":\") {\n        return rval(state, stream, \"colon\");\n      } // macro\n\n\n      if (ch == '?') {\n        stream.eatSpace();\n        stream.eatWhile(anumRE);\n        return rval(state, stream, \"macro\");\n      } // record\n\n\n      if (ch == \"#\") {\n        stream.eatSpace();\n        stream.eatWhile(anumRE);\n        return rval(state, stream, \"record\");\n      } // dollar escape\n\n\n      if (ch == \"$\") {\n        if (stream.next() == \"\\\\\" && !stream.match(escapesRE)) {\n          return rval(state, stream, \"error\");\n        }\n\n        return rval(state, stream, \"number\");\n      } // dot\n\n\n      if (ch == \".\") {\n        return rval(state, stream, \"dot\");\n      } // quoted atom\n\n\n      if (ch == '\\'') {\n        if (!(state.in_atom = !singleQuote(stream))) {\n          if (stream.match(/\\s*\\/\\s*[0-9]/, false)) {\n            stream.match(/\\s*\\/\\s*[0-9]/, true);\n            return rval(state, stream, \"fun\"); // 'f'/0 style fun\n          }\n\n          if (stream.match(/\\s*\\(/, false) || stream.match(/\\s*:/, false)) {\n            return rval(state, stream, \"function\");\n          }\n        }\n\n        return rval(state, stream, \"atom\");\n      } // string\n\n\n      if (ch == '\"') {\n        state.in_string = !doubleQuote(stream);\n        return rval(state, stream, \"string\");\n      } // variable\n\n\n      if (/[A-Z_Ø-ÞÀ-Ö]/.test(ch)) {\n        stream.eatWhile(anumRE);\n        return rval(state, stream, \"variable\");\n      } // atom/keyword/BIF/function\n\n\n      if (/[a-z_ß-öø-ÿ]/.test(ch)) {\n        stream.eatWhile(anumRE);\n\n        if (stream.match(/\\s*\\/\\s*[0-9]/, false)) {\n          stream.match(/\\s*\\/\\s*[0-9]/, true);\n          return rval(state, stream, \"fun\"); // f/0 style fun\n        }\n\n        var w = stream.current();\n\n        if (is_member(w, keywordWords)) {\n          return rval(state, stream, \"keyword\");\n        } else if (is_member(w, operatorAtomWords)) {\n          return rval(state, stream, \"operator\");\n        } else if (stream.match(/\\s*\\(/, false)) {\n          // 'put' and 'erlang:put' are bifs, 'foo:put' is not\n          if (is_member(w, bifWords) && (peekToken(state).token != \":\" || peekToken(state, 2).token == \"erlang\")) {\n            return rval(state, stream, \"builtin\");\n          } else if (is_member(w, guardWords)) {\n            return rval(state, stream, \"guard\");\n          } else {\n            return rval(state, stream, \"function\");\n          }\n        } else if (lookahead(stream) == \":\") {\n          if (w == \"erlang\") {\n            return rval(state, stream, \"builtin\");\n          } else {\n            return rval(state, stream, \"function\");\n          }\n        } else if (is_member(w, [\"true\", \"false\"])) {\n          return rval(state, stream, \"boolean\");\n        } else {\n          return rval(state, stream, \"atom\");\n        }\n      } // number\n\n\n      var digitRE = /[0-9]/;\n      var radixRE = /[0-9a-zA-Z]/; // 36#zZ style int\n\n      if (digitRE.test(ch)) {\n        stream.eatWhile(digitRE);\n\n        if (stream.eat('#')) {\n          // 36#aZ  style integer\n          if (!stream.eatWhile(radixRE)) {\n            stream.backUp(1); //\"36#\" - syntax error\n          }\n        } else if (stream.eat('.')) {\n          // float\n          if (!stream.eatWhile(digitRE)) {\n            stream.backUp(1); // \"3.\" - probably end of function\n          } else {\n            if (stream.eat(/[eE]/)) {\n              // float with exponent\n              if (stream.eat(/[-+]/)) {\n                if (!stream.eatWhile(digitRE)) {\n                  stream.backUp(2); // \"2e-\" - syntax error\n                }\n              } else {\n                if (!stream.eatWhile(digitRE)) {\n                  stream.backUp(1); // \"2e\" - syntax error\n                }\n              }\n            }\n          }\n        }\n\n        return rval(state, stream, \"number\"); // normal integer\n      } // open parens\n\n\n      if (nongreedy(stream, openParenRE, openParenWords)) {\n        return rval(state, stream, \"open_paren\");\n      } // close parens\n\n\n      if (nongreedy(stream, closeParenRE, closeParenWords)) {\n        return rval(state, stream, \"close_paren\");\n      } // separators\n\n\n      if (greedy(stream, separatorRE, separatorWords)) {\n        return rval(state, stream, \"separator\");\n      } // operators\n\n\n      if (greedy(stream, operatorSymbolRE, operatorSymbolWords)) {\n        return rval(state, stream, \"operator\");\n      }\n\n      return rval(state, stream, null);\n    } /////////////////////////////////////////////////////////////////////////////\n    // utilities\n\n\n    function nongreedy(stream, re, words) {\n      if (stream.current().length == 1 && re.test(stream.current())) {\n        stream.backUp(1);\n\n        while (re.test(stream.peek())) {\n          stream.next();\n\n          if (is_member(stream.current(), words)) {\n            return true;\n          }\n        }\n\n        stream.backUp(stream.current().length - 1);\n      }\n\n      return false;\n    }\n\n    function greedy(stream, re, words) {\n      if (stream.current().length == 1 && re.test(stream.current())) {\n        while (re.test(stream.peek())) {\n          stream.next();\n        }\n\n        while (0 < stream.current().length) {\n          if (is_member(stream.current(), words)) {\n            return true;\n          } else {\n            stream.backUp(1);\n          }\n        }\n\n        stream.next();\n      }\n\n      return false;\n    }\n\n    function doubleQuote(stream) {\n      return quote(stream, '\"', '\\\\');\n    }\n\n    function singleQuote(stream) {\n      return quote(stream, '\\'', '\\\\');\n    }\n\n    function quote(stream, quoteChar, escapeChar) {\n      while (!stream.eol()) {\n        var ch = stream.next();\n\n        if (ch == quoteChar) {\n          return true;\n        } else if (ch == escapeChar) {\n          stream.next();\n        }\n      }\n\n      return false;\n    }\n\n    function lookahead(stream) {\n      var m = stream.match(/^\\s*([^\\s%])/, false);\n      return m ? m[1] : \"\";\n    }\n\n    function is_member(element, list) {\n      return -1 < list.indexOf(element);\n    }\n\n    function rval(state, stream, type) {\n      // parse stack\n      pushToken(state, realToken(type, stream)); // map erlang token type to CodeMirror style class\n      //     erlang             -> CodeMirror tag\n\n      switch (type) {\n        case \"atom\":\n          return \"atom\";\n\n        case \"attribute\":\n          return \"attribute\";\n\n        case \"boolean\":\n          return \"atom\";\n\n        case \"builtin\":\n          return \"builtin\";\n\n        case \"close_paren\":\n          return null;\n\n        case \"colon\":\n          return null;\n\n        case \"comment\":\n          return \"comment\";\n\n        case \"dot\":\n          return null;\n\n        case \"error\":\n          return \"error\";\n\n        case \"fun\":\n          return \"meta\";\n\n        case \"function\":\n          return \"tag\";\n\n        case \"guard\":\n          return \"property\";\n\n        case \"keyword\":\n          return \"keyword\";\n\n        case \"macro\":\n          return \"variable-2\";\n\n        case \"number\":\n          return \"number\";\n\n        case \"open_paren\":\n          return null;\n\n        case \"operator\":\n          return \"operator\";\n\n        case \"record\":\n          return \"bracket\";\n\n        case \"separator\":\n          return null;\n\n        case \"string\":\n          return \"string\";\n\n        case \"type\":\n          return \"def\";\n\n        case \"variable\":\n          return \"variable\";\n\n        default:\n          return null;\n      }\n    }\n\n    function aToken(tok, col, ind, typ) {\n      return {\n        token: tok,\n        column: col,\n        indent: ind,\n        type: typ\n      };\n    }\n\n    function realToken(type, stream) {\n      return aToken(stream.current(), stream.column(), stream.indentation(), type);\n    }\n\n    function fakeToken(type) {\n      return aToken(type, 0, 0, type);\n    }\n\n    function peekToken(state, depth) {\n      var len = state.tokenStack.length;\n      var dep = depth ? depth : 1;\n\n      if (len < dep) {\n        return false;\n      } else {\n        return state.tokenStack[len - dep];\n      }\n    }\n\n    function pushToken(state, token) {\n      if (!(token.type == \"comment\" || token.type == \"whitespace\")) {\n        state.tokenStack = maybe_drop_pre(state.tokenStack, token);\n        state.tokenStack = maybe_drop_post(state.tokenStack);\n      }\n    }\n\n    function maybe_drop_pre(s, token) {\n      var last = s.length - 1;\n\n      if (0 < last && s[last].type === \"record\" && token.type === \"dot\") {\n        s.pop();\n      } else if (0 < last && s[last].type === \"group\") {\n        s.pop();\n        s.push(token);\n      } else {\n        s.push(token);\n      }\n\n      return s;\n    }\n\n    function maybe_drop_post(s) {\n      if (!s.length) return s;\n      var last = s.length - 1;\n\n      if (s[last].type === \"dot\") {\n        return [];\n      }\n\n      if (last > 1 && s[last].type === \"fun\" && s[last - 1].token === \"fun\") {\n        return s.slice(0, last - 1);\n      }\n\n      switch (s[last].token) {\n        case \"}\":\n          return d(s, {\n            g: [\"{\"]\n          });\n\n        case \"]\":\n          return d(s, {\n            i: [\"[\"]\n          });\n\n        case \")\":\n          return d(s, {\n            i: [\"(\"]\n          });\n\n        case \">>\":\n          return d(s, {\n            i: [\"<<\"]\n          });\n\n        case \"end\":\n          return d(s, {\n            i: [\"begin\", \"case\", \"fun\", \"if\", \"receive\", \"try\"]\n          });\n\n        case \",\":\n          return d(s, {\n            e: [\"begin\", \"try\", \"when\", \"->\", \",\", \"(\", \"[\", \"{\", \"<<\"]\n          });\n\n        case \"->\":\n          return d(s, {\n            r: [\"when\"],\n            m: [\"try\", \"if\", \"case\", \"receive\"]\n          });\n\n        case \";\":\n          return d(s, {\n            E: [\"case\", \"fun\", \"if\", \"receive\", \"try\", \"when\"]\n          });\n\n        case \"catch\":\n          return d(s, {\n            e: [\"try\"]\n          });\n\n        case \"of\":\n          return d(s, {\n            e: [\"case\"]\n          });\n\n        case \"after\":\n          return d(s, {\n            e: [\"receive\", \"try\"]\n          });\n\n        default:\n          return s;\n      }\n    }\n\n    function d(stack, tt) {\n      // stack is a stack of Token objects.\n      // tt is an object; {type:tokens}\n      // type is a char, tokens is a list of token strings.\n      // The function returns (possibly truncated) stack.\n      // It will descend the stack, looking for a Token such that Token.token\n      //  is a member of tokens. If it does not find that, it will normally (but\n      //  see \"E\" below) return stack. If it does find a match, it will remove\n      //  all the Tokens between the top and the matched Token.\n      // If type is \"m\", that is all it does.\n      // If type is \"i\", it will also remove the matched Token and the top Token.\n      // If type is \"g\", like \"i\", but add a fake \"group\" token at the top.\n      // If type is \"r\", it will remove the matched Token, but not the top Token.\n      // If type is \"e\", it will keep the matched Token but not the top Token.\n      // If type is \"E\", it behaves as for type \"e\", except if there is no match,\n      //  in which case it will return an empty stack.\n      for (var type in tt) {\n        var len = stack.length - 1;\n        var tokens = tt[type];\n\n        for (var i = len - 1; -1 < i; i--) {\n          if (is_member(stack[i].token, tokens)) {\n            var ss = stack.slice(0, i);\n\n            switch (type) {\n              case \"m\":\n                return ss.concat(stack[i]).concat(stack[len]);\n\n              case \"r\":\n                return ss.concat(stack[len]);\n\n              case \"i\":\n                return ss;\n\n              case \"g\":\n                return ss.concat(fakeToken(\"group\"));\n\n              case \"E\":\n                return ss.concat(stack[i]);\n\n              case \"e\":\n                return ss.concat(stack[i]);\n            }\n          }\n        }\n      }\n\n      return type == \"E\" ? [] : stack;\n    } /////////////////////////////////////////////////////////////////////////////\n    // indenter\n\n\n    function indenter(state, textAfter) {\n      var t;\n      var unit = cmCfg.indentUnit;\n      var wordAfter = wordafter(textAfter);\n      var currT = peekToken(state, 1);\n      var prevT = peekToken(state, 2);\n\n      if (state.in_string || state.in_atom) {\n        return CodeMirror.Pass;\n      } else if (!prevT) {\n        return 0;\n      } else if (currT.token == \"when\") {\n        return currT.column + unit;\n      } else if (wordAfter === \"when\" && prevT.type === \"function\") {\n        return prevT.indent + unit;\n      } else if (wordAfter === \"(\" && currT.token === \"fun\") {\n        return currT.column + 3;\n      } else if (wordAfter === \"catch\" && (t = getToken(state, [\"try\"]))) {\n        return t.column;\n      } else if (is_member(wordAfter, [\"end\", \"after\", \"of\"])) {\n        t = getToken(state, [\"begin\", \"case\", \"fun\", \"if\", \"receive\", \"try\"]);\n        return t ? t.column : CodeMirror.Pass;\n      } else if (is_member(wordAfter, closeParenWords)) {\n        t = getToken(state, openParenWords);\n        return t ? t.column : CodeMirror.Pass;\n      } else if (is_member(currT.token, [\",\", \"|\", \"||\"]) || is_member(wordAfter, [\",\", \"|\", \"||\"])) {\n        t = postcommaToken(state);\n        return t ? t.column + t.token.length : unit;\n      } else if (currT.token == \"->\") {\n        if (is_member(prevT.token, [\"receive\", \"case\", \"if\", \"try\"])) {\n          return prevT.column + unit + unit;\n        } else {\n          return prevT.column + unit;\n        }\n      } else if (is_member(currT.token, openParenWords)) {\n        return currT.column + currT.token.length;\n      } else {\n        t = defaultToken(state);\n        return truthy(t) ? t.column + unit : 0;\n      }\n    }\n\n    function wordafter(str) {\n      var m = str.match(/,|[a-z]+|\\}|\\]|\\)|>>|\\|+|\\(/);\n      return truthy(m) && m.index === 0 ? m[0] : \"\";\n    }\n\n    function postcommaToken(state) {\n      var objs = state.tokenStack.slice(0, -1);\n      var i = getTokenIndex(objs, \"type\", [\"open_paren\"]);\n      return truthy(objs[i]) ? objs[i] : false;\n    }\n\n    function defaultToken(state) {\n      var objs = state.tokenStack;\n      var stop = getTokenIndex(objs, \"type\", [\"open_paren\", \"separator\", \"keyword\"]);\n      var oper = getTokenIndex(objs, \"type\", [\"operator\"]);\n\n      if (truthy(stop) && truthy(oper) && stop < oper) {\n        return objs[stop + 1];\n      } else if (truthy(stop)) {\n        return objs[stop];\n      } else {\n        return false;\n      }\n    }\n\n    function getToken(state, tokens) {\n      var objs = state.tokenStack;\n      var i = getTokenIndex(objs, \"token\", tokens);\n      return truthy(objs[i]) ? objs[i] : false;\n    }\n\n    function getTokenIndex(objs, propname, propvals) {\n      for (var i = objs.length - 1; -1 < i; i--) {\n        if (is_member(objs[i][propname], propvals)) {\n          return i;\n        }\n      }\n\n      return false;\n    }\n\n    function truthy(x) {\n      return x !== false && x != null;\n    } /////////////////////////////////////////////////////////////////////////////\n    // this object defines the mode\n\n\n    return {\n      startState: function startState() {\n        return {\n          tokenStack: [],\n          in_string: false,\n          in_atom: false\n        };\n      },\n      token: function token(stream, state) {\n        return tokenizer(stream, state);\n      },\n      indent: function indent(state, textAfter) {\n        return indenter(state, textAfter);\n      },\n      lineComment: \"%\"\n    };\n  });\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMIME","defineMode","cmCfg","typeWords","keywordWords","separatorRE","separatorWords","operatorAtomWords","operatorSymbolRE","operatorSymbolWords","openParenRE","openParenWords","closeParenRE","closeParenWords","guardWords","bifWords","anumRE","escapesRE","tokenizer","stream","state","in_string","doubleQuote","rval","in_atom","singleQuote","eatSpace","peekToken","match","is_member","current","ch","next","skipToEnd","eatWhile","test","w","token","lookahead","digitRE","radixRE","eat","backUp","nongreedy","greedy","re","words","length","peek","quote","quoteChar","escapeChar","eol","m","element","list","indexOf","type","pushToken","realToken","aToken","tok","col","ind","typ","column","indent","indentation","fakeToken","depth","len","tokenStack","dep","maybe_drop_pre","maybe_drop_post","s","last","pop","push","slice","d","g","i","e","r","E","stack","tt","tokens","ss","concat","indenter","textAfter","t","unit","indentUnit","wordAfter","wordafter","currT","prevT","Pass","getToken","postcommaToken","defaultToken","truthy","str","index","objs","getTokenIndex","stop","oper","propname","propvals","x","startState","lineComment"],"sources":["/mnt/Datengrab/python/Zero-tier/frontend/node_modules/codemirror/mode/erlang/erlang.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*jshint unused:true, eqnull:true, curly:true, bitwise:true */\n/*jshint undef:true, latedef:true, trailing:true */\n/*global CodeMirror:true */\n\n// erlang mode.\n// tokenizer -> token types -> CodeMirror styles\n// tokenizer maintains a parse stack\n// indenter uses the parse stack\n\n// TODO indenter:\n//   bit syntax\n//   old guard/bif/conversion clashes (e.g. \"float/1\")\n//   type/spec/opaque\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMIME(\"text/x-erlang\", \"erlang\");\n\nCodeMirror.defineMode(\"erlang\", function(cmCfg) {\n  \"use strict\";\n\n/////////////////////////////////////////////////////////////////////////////\n// constants\n\n  var typeWords = [\n    \"-type\", \"-spec\", \"-export_type\", \"-opaque\"];\n\n  var keywordWords = [\n    \"after\",\"begin\",\"catch\",\"case\",\"cond\",\"end\",\"fun\",\"if\",\n    \"let\",\"of\",\"query\",\"receive\",\"try\",\"when\"];\n\n  var separatorRE    = /[\\->,;]/;\n  var separatorWords = [\n    \"->\",\";\",\",\"];\n\n  var operatorAtomWords = [\n    \"and\",\"andalso\",\"band\",\"bnot\",\"bor\",\"bsl\",\"bsr\",\"bxor\",\n    \"div\",\"not\",\"or\",\"orelse\",\"rem\",\"xor\"];\n\n  var operatorSymbolRE    = /[\\+\\-\\*\\/<>=\\|:!]/;\n  var operatorSymbolWords = [\n    \"=\",\"+\",\"-\",\"*\",\"/\",\">\",\">=\",\"<\",\"=<\",\"=:=\",\"==\",\"=/=\",\"/=\",\"||\",\"<-\",\"!\"];\n\n  var openParenRE    = /[<\\(\\[\\{]/;\n  var openParenWords = [\n    \"<<\",\"(\",\"[\",\"{\"];\n\n  var closeParenRE    = /[>\\)\\]\\}]/;\n  var closeParenWords = [\n    \"}\",\"]\",\")\",\">>\"];\n\n  var guardWords = [\n    \"is_atom\",\"is_binary\",\"is_bitstring\",\"is_boolean\",\"is_float\",\n    \"is_function\",\"is_integer\",\"is_list\",\"is_number\",\"is_pid\",\n    \"is_port\",\"is_record\",\"is_reference\",\"is_tuple\",\n    \"atom\",\"binary\",\"bitstring\",\"boolean\",\"function\",\"integer\",\"list\",\n    \"number\",\"pid\",\"port\",\"record\",\"reference\",\"tuple\"];\n\n  var bifWords = [\n    \"abs\",\"adler32\",\"adler32_combine\",\"alive\",\"apply\",\"atom_to_binary\",\n    \"atom_to_list\",\"binary_to_atom\",\"binary_to_existing_atom\",\n    \"binary_to_list\",\"binary_to_term\",\"bit_size\",\"bitstring_to_list\",\n    \"byte_size\",\"check_process_code\",\"contact_binary\",\"crc32\",\n    \"crc32_combine\",\"date\",\"decode_packet\",\"delete_module\",\n    \"disconnect_node\",\"element\",\"erase\",\"exit\",\"float\",\"float_to_list\",\n    \"garbage_collect\",\"get\",\"get_keys\",\"group_leader\",\"halt\",\"hd\",\n    \"integer_to_list\",\"internal_bif\",\"iolist_size\",\"iolist_to_binary\",\n    \"is_alive\",\"is_atom\",\"is_binary\",\"is_bitstring\",\"is_boolean\",\n    \"is_float\",\"is_function\",\"is_integer\",\"is_list\",\"is_number\",\"is_pid\",\n    \"is_port\",\"is_process_alive\",\"is_record\",\"is_reference\",\"is_tuple\",\n    \"length\",\"link\",\"list_to_atom\",\"list_to_binary\",\"list_to_bitstring\",\n    \"list_to_existing_atom\",\"list_to_float\",\"list_to_integer\",\n    \"list_to_pid\",\"list_to_tuple\",\"load_module\",\"make_ref\",\"module_loaded\",\n    \"monitor_node\",\"node\",\"node_link\",\"node_unlink\",\"nodes\",\"notalive\",\n    \"now\",\"open_port\",\"pid_to_list\",\"port_close\",\"port_command\",\n    \"port_connect\",\"port_control\",\"pre_loaded\",\"process_flag\",\n    \"process_info\",\"processes\",\"purge_module\",\"put\",\"register\",\n    \"registered\",\"round\",\"self\",\"setelement\",\"size\",\"spawn\",\"spawn_link\",\n    \"spawn_monitor\",\"spawn_opt\",\"split_binary\",\"statistics\",\n    \"term_to_binary\",\"time\",\"throw\",\"tl\",\"trunc\",\"tuple_size\",\n    \"tuple_to_list\",\"unlink\",\"unregister\",\"whereis\"];\n\n// upper case: [A-Z] [Ø-Þ] [À-Ö]\n// lower case: [a-z] [ß-ö] [ø-ÿ]\n  var anumRE       = /[\\w@Ø-ÞÀ-Öß-öø-ÿ]/;\n  var escapesRE    =\n    /[0-7]{1,3}|[bdefnrstv\\\\\"']|\\^[a-zA-Z]|x[0-9a-zA-Z]{2}|x{[0-9a-zA-Z]+}/;\n\n/////////////////////////////////////////////////////////////////////////////\n// tokenizer\n\n  function tokenizer(stream,state) {\n    // in multi-line string\n    if (state.in_string) {\n      state.in_string = (!doubleQuote(stream));\n      return rval(state,stream,\"string\");\n    }\n\n    // in multi-line atom\n    if (state.in_atom) {\n      state.in_atom = (!singleQuote(stream));\n      return rval(state,stream,\"atom\");\n    }\n\n    // whitespace\n    if (stream.eatSpace()) {\n      return rval(state,stream,\"whitespace\");\n    }\n\n    // attributes and type specs\n    if (!peekToken(state) &&\n        stream.match(/-\\s*[a-zß-öø-ÿ][\\wØ-ÞÀ-Öß-öø-ÿ]*/)) {\n      if (is_member(stream.current(),typeWords)) {\n        return rval(state,stream,\"type\");\n      }else{\n        return rval(state,stream,\"attribute\");\n      }\n    }\n\n    var ch = stream.next();\n\n    // comment\n    if (ch == '%') {\n      stream.skipToEnd();\n      return rval(state,stream,\"comment\");\n    }\n\n    // colon\n    if (ch == \":\") {\n      return rval(state,stream,\"colon\");\n    }\n\n    // macro\n    if (ch == '?') {\n      stream.eatSpace();\n      stream.eatWhile(anumRE);\n      return rval(state,stream,\"macro\");\n    }\n\n    // record\n    if (ch == \"#\") {\n      stream.eatSpace();\n      stream.eatWhile(anumRE);\n      return rval(state,stream,\"record\");\n    }\n\n    // dollar escape\n    if (ch == \"$\") {\n      if (stream.next() == \"\\\\\" && !stream.match(escapesRE)) {\n        return rval(state,stream,\"error\");\n      }\n      return rval(state,stream,\"number\");\n    }\n\n    // dot\n    if (ch == \".\") {\n      return rval(state,stream,\"dot\");\n    }\n\n    // quoted atom\n    if (ch == '\\'') {\n      if (!(state.in_atom = (!singleQuote(stream)))) {\n        if (stream.match(/\\s*\\/\\s*[0-9]/,false)) {\n          stream.match(/\\s*\\/\\s*[0-9]/,true);\n          return rval(state,stream,\"fun\");      // 'f'/0 style fun\n        }\n        if (stream.match(/\\s*\\(/,false) || stream.match(/\\s*:/,false)) {\n          return rval(state,stream,\"function\");\n        }\n      }\n      return rval(state,stream,\"atom\");\n    }\n\n    // string\n    if (ch == '\"') {\n      state.in_string = (!doubleQuote(stream));\n      return rval(state,stream,\"string\");\n    }\n\n    // variable\n    if (/[A-Z_Ø-ÞÀ-Ö]/.test(ch)) {\n      stream.eatWhile(anumRE);\n      return rval(state,stream,\"variable\");\n    }\n\n    // atom/keyword/BIF/function\n    if (/[a-z_ß-öø-ÿ]/.test(ch)) {\n      stream.eatWhile(anumRE);\n\n      if (stream.match(/\\s*\\/\\s*[0-9]/,false)) {\n        stream.match(/\\s*\\/\\s*[0-9]/,true);\n        return rval(state,stream,\"fun\");      // f/0 style fun\n      }\n\n      var w = stream.current();\n\n      if (is_member(w,keywordWords)) {\n        return rval(state,stream,\"keyword\");\n      }else if (is_member(w,operatorAtomWords)) {\n        return rval(state,stream,\"operator\");\n      }else if (stream.match(/\\s*\\(/,false)) {\n        // 'put' and 'erlang:put' are bifs, 'foo:put' is not\n        if (is_member(w,bifWords) &&\n            ((peekToken(state).token != \":\") ||\n             (peekToken(state,2).token == \"erlang\"))) {\n          return rval(state,stream,\"builtin\");\n        }else if (is_member(w,guardWords)) {\n          return rval(state,stream,\"guard\");\n        }else{\n          return rval(state,stream,\"function\");\n        }\n      }else if (lookahead(stream) == \":\") {\n        if (w == \"erlang\") {\n          return rval(state,stream,\"builtin\");\n        } else {\n          return rval(state,stream,\"function\");\n        }\n      }else if (is_member(w,[\"true\",\"false\"])) {\n        return rval(state,stream,\"boolean\");\n      }else{\n        return rval(state,stream,\"atom\");\n      }\n    }\n\n    // number\n    var digitRE      = /[0-9]/;\n    var radixRE      = /[0-9a-zA-Z]/;         // 36#zZ style int\n    if (digitRE.test(ch)) {\n      stream.eatWhile(digitRE);\n      if (stream.eat('#')) {                // 36#aZ  style integer\n        if (!stream.eatWhile(radixRE)) {\n          stream.backUp(1);                 //\"36#\" - syntax error\n        }\n      } else if (stream.eat('.')) {       // float\n        if (!stream.eatWhile(digitRE)) {\n          stream.backUp(1);        // \"3.\" - probably end of function\n        } else {\n          if (stream.eat(/[eE]/)) {        // float with exponent\n            if (stream.eat(/[-+]/)) {\n              if (!stream.eatWhile(digitRE)) {\n                stream.backUp(2);            // \"2e-\" - syntax error\n              }\n            } else {\n              if (!stream.eatWhile(digitRE)) {\n                stream.backUp(1);            // \"2e\" - syntax error\n              }\n            }\n          }\n        }\n      }\n      return rval(state,stream,\"number\");   // normal integer\n    }\n\n    // open parens\n    if (nongreedy(stream,openParenRE,openParenWords)) {\n      return rval(state,stream,\"open_paren\");\n    }\n\n    // close parens\n    if (nongreedy(stream,closeParenRE,closeParenWords)) {\n      return rval(state,stream,\"close_paren\");\n    }\n\n    // separators\n    if (greedy(stream,separatorRE,separatorWords)) {\n      return rval(state,stream,\"separator\");\n    }\n\n    // operators\n    if (greedy(stream,operatorSymbolRE,operatorSymbolWords)) {\n      return rval(state,stream,\"operator\");\n    }\n\n    return rval(state,stream,null);\n  }\n\n/////////////////////////////////////////////////////////////////////////////\n// utilities\n  function nongreedy(stream,re,words) {\n    if (stream.current().length == 1 && re.test(stream.current())) {\n      stream.backUp(1);\n      while (re.test(stream.peek())) {\n        stream.next();\n        if (is_member(stream.current(),words)) {\n          return true;\n        }\n      }\n      stream.backUp(stream.current().length-1);\n    }\n    return false;\n  }\n\n  function greedy(stream,re,words) {\n    if (stream.current().length == 1 && re.test(stream.current())) {\n      while (re.test(stream.peek())) {\n        stream.next();\n      }\n      while (0 < stream.current().length) {\n        if (is_member(stream.current(),words)) {\n          return true;\n        }else{\n          stream.backUp(1);\n        }\n      }\n      stream.next();\n    }\n    return false;\n  }\n\n  function doubleQuote(stream) {\n    return quote(stream, '\"', '\\\\');\n  }\n\n  function singleQuote(stream) {\n    return quote(stream,'\\'','\\\\');\n  }\n\n  function quote(stream,quoteChar,escapeChar) {\n    while (!stream.eol()) {\n      var ch = stream.next();\n      if (ch == quoteChar) {\n        return true;\n      }else if (ch == escapeChar) {\n        stream.next();\n      }\n    }\n    return false;\n  }\n\n  function lookahead(stream) {\n    var m = stream.match(/^\\s*([^\\s%])/, false)\n    return m ? m[1] : \"\";\n  }\n\n  function is_member(element,list) {\n    return (-1 < list.indexOf(element));\n  }\n\n  function rval(state,stream,type) {\n\n    // parse stack\n    pushToken(state,realToken(type,stream));\n\n    // map erlang token type to CodeMirror style class\n    //     erlang             -> CodeMirror tag\n    switch (type) {\n      case \"atom\":        return \"atom\";\n      case \"attribute\":   return \"attribute\";\n      case \"boolean\":     return \"atom\";\n      case \"builtin\":     return \"builtin\";\n      case \"close_paren\": return null;\n      case \"colon\":       return null;\n      case \"comment\":     return \"comment\";\n      case \"dot\":         return null;\n      case \"error\":       return \"error\";\n      case \"fun\":         return \"meta\";\n      case \"function\":    return \"tag\";\n      case \"guard\":       return \"property\";\n      case \"keyword\":     return \"keyword\";\n      case \"macro\":       return \"variable-2\";\n      case \"number\":      return \"number\";\n      case \"open_paren\":  return null;\n      case \"operator\":    return \"operator\";\n      case \"record\":      return \"bracket\";\n      case \"separator\":   return null;\n      case \"string\":      return \"string\";\n      case \"type\":        return \"def\";\n      case \"variable\":    return \"variable\";\n      default:            return null;\n    }\n  }\n\n  function aToken(tok,col,ind,typ) {\n    return {token:  tok,\n            column: col,\n            indent: ind,\n            type:   typ};\n  }\n\n  function realToken(type,stream) {\n    return aToken(stream.current(),\n                 stream.column(),\n                 stream.indentation(),\n                 type);\n  }\n\n  function fakeToken(type) {\n    return aToken(type,0,0,type);\n  }\n\n  function peekToken(state,depth) {\n    var len = state.tokenStack.length;\n    var dep = (depth ? depth : 1);\n\n    if (len < dep) {\n      return false;\n    }else{\n      return state.tokenStack[len-dep];\n    }\n  }\n\n  function pushToken(state,token) {\n\n    if (!(token.type == \"comment\" || token.type == \"whitespace\")) {\n      state.tokenStack = maybe_drop_pre(state.tokenStack,token);\n      state.tokenStack = maybe_drop_post(state.tokenStack);\n    }\n  }\n\n  function maybe_drop_pre(s,token) {\n    var last = s.length-1;\n\n    if (0 < last && s[last].type === \"record\" && token.type === \"dot\") {\n      s.pop();\n    }else if (0 < last && s[last].type === \"group\") {\n      s.pop();\n      s.push(token);\n    }else{\n      s.push(token);\n    }\n    return s;\n  }\n\n  function maybe_drop_post(s) {\n    if (!s.length) return s\n    var last = s.length-1;\n\n    if (s[last].type === \"dot\") {\n      return [];\n    }\n    if (last > 1 && s[last].type === \"fun\" && s[last-1].token === \"fun\") {\n      return s.slice(0,last-1);\n    }\n    switch (s[last].token) {\n      case \"}\":    return d(s,{g:[\"{\"]});\n      case \"]\":    return d(s,{i:[\"[\"]});\n      case \")\":    return d(s,{i:[\"(\"]});\n      case \">>\":   return d(s,{i:[\"<<\"]});\n      case \"end\":  return d(s,{i:[\"begin\",\"case\",\"fun\",\"if\",\"receive\",\"try\"]});\n      case \",\":    return d(s,{e:[\"begin\",\"try\",\"when\",\"->\",\n                                  \",\",\"(\",\"[\",\"{\",\"<<\"]});\n      case \"->\":   return d(s,{r:[\"when\"],\n                               m:[\"try\",\"if\",\"case\",\"receive\"]});\n      case \";\":    return d(s,{E:[\"case\",\"fun\",\"if\",\"receive\",\"try\",\"when\"]});\n      case \"catch\":return d(s,{e:[\"try\"]});\n      case \"of\":   return d(s,{e:[\"case\"]});\n      case \"after\":return d(s,{e:[\"receive\",\"try\"]});\n      default:     return s;\n    }\n  }\n\n  function d(stack,tt) {\n    // stack is a stack of Token objects.\n    // tt is an object; {type:tokens}\n    // type is a char, tokens is a list of token strings.\n    // The function returns (possibly truncated) stack.\n    // It will descend the stack, looking for a Token such that Token.token\n    //  is a member of tokens. If it does not find that, it will normally (but\n    //  see \"E\" below) return stack. If it does find a match, it will remove\n    //  all the Tokens between the top and the matched Token.\n    // If type is \"m\", that is all it does.\n    // If type is \"i\", it will also remove the matched Token and the top Token.\n    // If type is \"g\", like \"i\", but add a fake \"group\" token at the top.\n    // If type is \"r\", it will remove the matched Token, but not the top Token.\n    // If type is \"e\", it will keep the matched Token but not the top Token.\n    // If type is \"E\", it behaves as for type \"e\", except if there is no match,\n    //  in which case it will return an empty stack.\n\n    for (var type in tt) {\n      var len = stack.length-1;\n      var tokens = tt[type];\n      for (var i = len-1; -1 < i ; i--) {\n        if (is_member(stack[i].token,tokens)) {\n          var ss = stack.slice(0,i);\n          switch (type) {\n              case \"m\": return ss.concat(stack[i]).concat(stack[len]);\n              case \"r\": return ss.concat(stack[len]);\n              case \"i\": return ss;\n              case \"g\": return ss.concat(fakeToken(\"group\"));\n              case \"E\": return ss.concat(stack[i]);\n              case \"e\": return ss.concat(stack[i]);\n          }\n        }\n      }\n    }\n    return (type == \"E\" ? [] : stack);\n  }\n\n/////////////////////////////////////////////////////////////////////////////\n// indenter\n\n  function indenter(state,textAfter) {\n    var t;\n    var unit = cmCfg.indentUnit;\n    var wordAfter = wordafter(textAfter);\n    var currT = peekToken(state,1);\n    var prevT = peekToken(state,2);\n\n    if (state.in_string || state.in_atom) {\n      return CodeMirror.Pass;\n    }else if (!prevT) {\n      return 0;\n    }else if (currT.token == \"when\") {\n      return currT.column+unit;\n    }else if (wordAfter === \"when\" && prevT.type === \"function\") {\n      return prevT.indent+unit;\n    }else if (wordAfter === \"(\" && currT.token === \"fun\") {\n      return  currT.column+3;\n    }else if (wordAfter === \"catch\" && (t = getToken(state,[\"try\"]))) {\n      return t.column;\n    }else if (is_member(wordAfter,[\"end\",\"after\",\"of\"])) {\n      t = getToken(state,[\"begin\",\"case\",\"fun\",\"if\",\"receive\",\"try\"]);\n      return t ? t.column : CodeMirror.Pass;\n    }else if (is_member(wordAfter,closeParenWords)) {\n      t = getToken(state,openParenWords);\n      return t ? t.column : CodeMirror.Pass;\n    }else if (is_member(currT.token,[\",\",\"|\",\"||\"]) ||\n              is_member(wordAfter,[\",\",\"|\",\"||\"])) {\n      t = postcommaToken(state);\n      return t ? t.column+t.token.length : unit;\n    }else if (currT.token == \"->\") {\n      if (is_member(prevT.token, [\"receive\",\"case\",\"if\",\"try\"])) {\n        return prevT.column+unit+unit;\n      }else{\n        return prevT.column+unit;\n      }\n    }else if (is_member(currT.token,openParenWords)) {\n      return currT.column+currT.token.length;\n    }else{\n      t = defaultToken(state);\n      return truthy(t) ? t.column+unit : 0;\n    }\n  }\n\n  function wordafter(str) {\n    var m = str.match(/,|[a-z]+|\\}|\\]|\\)|>>|\\|+|\\(/);\n\n    return truthy(m) && (m.index === 0) ? m[0] : \"\";\n  }\n\n  function postcommaToken(state) {\n    var objs = state.tokenStack.slice(0,-1);\n    var i = getTokenIndex(objs,\"type\",[\"open_paren\"]);\n\n    return truthy(objs[i]) ? objs[i] : false;\n  }\n\n  function defaultToken(state) {\n    var objs = state.tokenStack;\n    var stop = getTokenIndex(objs,\"type\",[\"open_paren\",\"separator\",\"keyword\"]);\n    var oper = getTokenIndex(objs,\"type\",[\"operator\"]);\n\n    if (truthy(stop) && truthy(oper) && stop < oper) {\n      return objs[stop+1];\n    } else if (truthy(stop)) {\n      return objs[stop];\n    } else {\n      return false;\n    }\n  }\n\n  function getToken(state,tokens) {\n    var objs = state.tokenStack;\n    var i = getTokenIndex(objs,\"token\",tokens);\n\n    return truthy(objs[i]) ? objs[i] : false;\n  }\n\n  function getTokenIndex(objs,propname,propvals) {\n\n    for (var i = objs.length-1; -1 < i ; i--) {\n      if (is_member(objs[i][propname],propvals)) {\n        return i;\n      }\n    }\n    return false;\n  }\n\n  function truthy(x) {\n    return (x !== false) && (x != null);\n  }\n\n/////////////////////////////////////////////////////////////////////////////\n// this object defines the mode\n\n  return {\n    startState:\n      function() {\n        return {tokenStack: [],\n                in_string:  false,\n                in_atom:    false};\n      },\n\n    token:\n      function(stream, state) {\n        return tokenizer(stream, state);\n      },\n\n    indent:\n      function(state, textAfter) {\n        return indenter(state,textAfter);\n      },\n\n    lineComment: \"%\"\n  };\n});\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}