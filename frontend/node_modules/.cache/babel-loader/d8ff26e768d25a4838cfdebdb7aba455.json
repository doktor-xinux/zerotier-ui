{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"turtle\", function (config) {\n    var indentUnit = config.indentUnit;\n    var curPunc;\n\n    function wordRegexp(words) {\n      return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n    }\n\n    var ops = wordRegexp([]);\n    var keywords = wordRegexp([\"@prefix\", \"@base\", \"a\"]);\n    var operatorChars = /[*+\\-<>=&|]/;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      curPunc = null;\n\n      if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n        stream.match(/^[^\\s\\u00a0>]*>?/);\n        return \"atom\";\n      } else if (ch == \"\\\"\" || ch == \"'\") {\n        state.tokenize = tokenLiteral(ch);\n        return state.tokenize(stream, state);\n      } else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n        curPunc = ch;\n        return null;\n      } else if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (operatorChars.test(ch)) {\n        stream.eatWhile(operatorChars);\n        return null;\n      } else if (ch == \":\") {\n        return \"operator\";\n      } else {\n        stream.eatWhile(/[_\\w\\d]/);\n\n        if (stream.peek() == \":\") {\n          return \"variable-3\";\n        } else {\n          var word = stream.current();\n\n          if (keywords.test(word)) {\n            return \"meta\";\n          }\n\n          if (ch >= \"A\" && ch <= \"Z\") {\n            return \"comment\";\n          } else {\n            return \"keyword\";\n          }\n        }\n\n        var word = stream.current();\n        if (ops.test(word)) return null;else if (keywords.test(word)) return \"meta\";else return \"variable\";\n      }\n    }\n\n    function tokenLiteral(quote) {\n      return function (stream, state) {\n        var escaped = false,\n            ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && !escaped) {\n            state.tokenize = tokenBase;\n            break;\n          }\n\n          escaped = !escaped && ch == \"\\\\\";\n        }\n\n        return \"string\";\n      };\n    }\n\n    function pushContext(state, type, col) {\n      state.context = {\n        prev: state.context,\n        indent: state.indent,\n        col: col,\n        type: type\n      };\n    }\n\n    function popContext(state) {\n      state.indent = state.context.indent;\n      state.context = state.context.prev;\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          tokenize: tokenBase,\n          context: null,\n          indent: 0,\n          col: 0\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          if (state.context && state.context.align == null) state.context.align = false;\n          state.indent = stream.indentation();\n        }\n\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n\n        if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n          state.context.align = true;\n        }\n\n        if (curPunc == \"(\") pushContext(state, \")\", stream.column());else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());else if (/[\\]\\}\\)]/.test(curPunc)) {\n          while (state.context && state.context.type == \"pattern\") {\n            popContext(state);\n          }\n\n          if (state.context && curPunc == state.context.type) popContext(state);\n        } else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);else if (/atom|string|variable/.test(style) && state.context) {\n          if (/[\\}\\]]/.test(state.context.type)) pushContext(state, \"pattern\", stream.column());else if (state.context.type == \"pattern\" && !state.context.align) {\n            state.context.align = true;\n            state.context.col = stream.column();\n          }\n        }\n        return style;\n      },\n      indent: function indent(state, textAfter) {\n        var firstChar = textAfter && textAfter.charAt(0);\n        var context = state.context;\n        if (/[\\]\\}]/.test(firstChar)) while (context && context.type == \"pattern\") {\n          context = context.prev;\n        }\n        var closing = context && firstChar == context.type;\n        if (!context) return 0;else if (context.type == \"pattern\") return context.col;else if (context.align) return context.col + (closing ? 0 : 1);else return context.indent + (closing ? 0 : indentUnit);\n      },\n      lineComment: \"#\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/turtle\", \"turtle\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","indentUnit","curPunc","wordRegexp","words","RegExp","join","ops","keywords","operatorChars","tokenBase","stream","state","ch","next","match","tokenize","tokenLiteral","test","skipToEnd","eatWhile","peek","word","current","quote","escaped","pushContext","type","col","context","prev","indent","popContext","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","firstChar","charAt","closing","lineComment","defineMIME"],"sources":["/mnt/Datengrab/python/Zero-tier/frontend/node_modules/codemirror/mode/turtle/turtle.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"turtle\", function(config) {\n  var indentUnit = config.indentUnit;\n  var curPunc;\n\n  function wordRegexp(words) {\n    return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n  }\n  var ops = wordRegexp([]);\n  var keywords = wordRegexp([\"@prefix\", \"@base\", \"a\"]);\n  var operatorChars = /[*+\\-<>=&|]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    curPunc = null;\n    if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n      stream.match(/^[^\\s\\u00a0>]*>?/);\n      return \"atom\";\n    }\n    else if (ch == \"\\\"\" || ch == \"'\") {\n      state.tokenize = tokenLiteral(ch);\n      return state.tokenize(stream, state);\n    }\n    else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    else if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    else if (operatorChars.test(ch)) {\n      stream.eatWhile(operatorChars);\n      return null;\n    }\n    else if (ch == \":\") {\n          return \"operator\";\n        } else {\n      stream.eatWhile(/[_\\w\\d]/);\n      if(stream.peek() == \":\") {\n        return \"variable-3\";\n      } else {\n             var word = stream.current();\n\n             if(keywords.test(word)) {\n                        return \"meta\";\n             }\n\n             if(ch >= \"A\" && ch <= \"Z\") {\n                    return \"comment\";\n                 } else {\n                        return \"keyword\";\n                 }\n      }\n      var word = stream.current();\n      if (ops.test(word))\n        return null;\n      else if (keywords.test(word))\n        return \"meta\";\n      else\n        return \"variable\";\n    }\n  }\n\n  function tokenLiteral(quote) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      return \"string\";\n    };\n  }\n\n  function pushContext(state, type, col) {\n    state.context = {prev: state.context, indent: state.indent, col: col, type: type};\n  }\n  function popContext(state) {\n    state.indent = state.context.indent;\n    state.context = state.context.prev;\n  }\n\n  return {\n    startState: function() {\n      return {tokenize: tokenBase,\n              context: null,\n              indent: 0,\n              col: 0};\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (state.context && state.context.align == null) state.context.align = false;\n        state.indent = stream.indentation();\n      }\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n\n      if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n        state.context.align = true;\n      }\n\n      if (curPunc == \"(\") pushContext(state, \")\", stream.column());\n      else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\n      else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\n      else if (/[\\]\\}\\)]/.test(curPunc)) {\n        while (state.context && state.context.type == \"pattern\") popContext(state);\n        if (state.context && curPunc == state.context.type) popContext(state);\n      }\n      else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\n      else if (/atom|string|variable/.test(style) && state.context) {\n        if (/[\\}\\]]/.test(state.context.type))\n          pushContext(state, \"pattern\", stream.column());\n        else if (state.context.type == \"pattern\" && !state.context.align) {\n          state.context.align = true;\n          state.context.col = stream.column();\n        }\n      }\n\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      var firstChar = textAfter && textAfter.charAt(0);\n      var context = state.context;\n      if (/[\\]\\}]/.test(firstChar))\n        while (context && context.type == \"pattern\") context = context.prev;\n\n      var closing = context && firstChar == context.type;\n      if (!context)\n        return 0;\n      else if (context.type == \"pattern\")\n        return context.col;\n      else if (context.align)\n        return context.col + (closing ? 0 : 1);\n      else\n        return context.indent + (closing ? 0 : indentUnit);\n    },\n\n    lineComment: \"#\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/turtle\", \"turtle\");\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}