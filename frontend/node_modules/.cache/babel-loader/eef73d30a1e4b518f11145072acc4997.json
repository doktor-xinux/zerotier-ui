{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode(\"rust\", {\n    start: [// string and byte string\n    {\n      regex: /b?\"/,\n      token: \"string\",\n      next: \"string\"\n    }, // raw string and raw byte string\n    {\n      regex: /b?r\"/,\n      token: \"string\",\n      next: \"string_raw\"\n    }, {\n      regex: /b?r#+\"/,\n      token: \"string\",\n      next: \"string_raw_hash\"\n    }, // character\n    {\n      regex: /'(?:[^'\\\\]|\\\\(?:[nrt0'\"]|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{6}\\}))'/,\n      token: \"string-2\"\n    }, // byte\n    {\n      regex: /b'(?:[^']|\\\\(?:['\\\\nrt0]|x[\\da-fA-F]{2}))'/,\n      token: \"string-2\"\n    }, {\n      regex: /(?:(?:[0-9][0-9_]*)(?:(?:[Ee][+-]?[0-9_]+)|\\.[0-9_]+(?:[Ee][+-]?[0-9_]+)?)(?:f32|f64)?)|(?:0(?:b[01_]+|(?:o[0-7_]+)|(?:x[0-9a-fA-F_]+))|(?:[0-9][0-9_]*))(?:u8|u16|u32|u64|i8|i16|i32|i64|isize|usize)?/,\n      token: \"number\"\n    }, {\n      regex: /(let(?:\\s+mut)?|fn|enum|mod|struct|type|union)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,\n      token: [\"keyword\", null, \"def\"]\n    }, {\n      regex: /(?:abstract|alignof|as|async|await|box|break|continue|const|crate|do|dyn|else|enum|extern|fn|for|final|if|impl|in|loop|macro|match|mod|move|offsetof|override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,\n      token: \"keyword\"\n    }, {\n      regex: /\\b(?:Self|isize|usize|char|bool|u8|u16|u32|u64|f16|f32|f64|i8|i16|i32|i64|str|Option)\\b/,\n      token: \"atom\"\n    }, {\n      regex: /\\b(?:true|false|Some|None|Ok|Err)\\b/,\n      token: \"builtin\"\n    }, {\n      regex: /\\b(fn)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,\n      token: [\"keyword\", null, \"def\"]\n    }, {\n      regex: /#!?\\[.*\\]/,\n      token: \"meta\"\n    }, {\n      regex: /\\/\\/.*/,\n      token: \"comment\"\n    }, {\n      regex: /\\/\\*/,\n      token: \"comment\",\n      next: \"comment\"\n    }, {\n      regex: /[-+\\/*=<>!]+/,\n      token: \"operator\"\n    }, {\n      regex: /[a-zA-Z_]\\w*!/,\n      token: \"variable-3\"\n    }, {\n      regex: /[a-zA-Z_]\\w*/,\n      token: \"variable\"\n    }, {\n      regex: /[\\{\\[\\(]/,\n      indent: true\n    }, {\n      regex: /[\\}\\]\\)]/,\n      dedent: true\n    }],\n    string: [{\n      regex: /\"/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /(?:[^\\\\\"]|\\\\(?:.|$))*/,\n      token: \"string\"\n    }],\n    string_raw: [{\n      regex: /\"/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /[^\"]*/,\n      token: \"string\"\n    }],\n    string_raw_hash: [{\n      regex: /\"#+/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /(?:[^\"]|\"(?!#))*/,\n      token: \"string\"\n    }],\n    comment: [{\n      regex: /.*?\\*\\//,\n      token: \"comment\",\n      next: \"start\"\n    }, {\n      regex: /.*/,\n      token: \"comment\"\n    }],\n    meta: {\n      dontIndentStates: [\"comment\"],\n      electricInput: /^\\s*\\}$/,\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\",\n      fold: \"brace\"\n    }\n  });\n  CodeMirror.defineMIME(\"text/x-rustsrc\", \"rust\");\n  CodeMirror.defineMIME(\"text/rust\", \"rust\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineSimpleMode","start","regex","token","next","indent","dedent","string","string_raw","string_raw_hash","comment","meta","dontIndentStates","electricInput","blockCommentStart","blockCommentEnd","lineComment","fold","defineMIME"],"sources":["/mnt/Datengrab/python/Zero-tier/frontend/node_modules/codemirror/mode/rust/rust.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineSimpleMode(\"rust\",{\n  start: [\n    // string and byte string\n    {regex: /b?\"/, token: \"string\", next: \"string\"},\n    // raw string and raw byte string\n    {regex: /b?r\"/, token: \"string\", next: \"string_raw\"},\n    {regex: /b?r#+\"/, token: \"string\", next: \"string_raw_hash\"},\n    // character\n    {regex: /'(?:[^'\\\\]|\\\\(?:[nrt0'\"]|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{6}\\}))'/, token: \"string-2\"},\n    // byte\n    {regex: /b'(?:[^']|\\\\(?:['\\\\nrt0]|x[\\da-fA-F]{2}))'/, token: \"string-2\"},\n\n    {regex: /(?:(?:[0-9][0-9_]*)(?:(?:[Ee][+-]?[0-9_]+)|\\.[0-9_]+(?:[Ee][+-]?[0-9_]+)?)(?:f32|f64)?)|(?:0(?:b[01_]+|(?:o[0-7_]+)|(?:x[0-9a-fA-F_]+))|(?:[0-9][0-9_]*))(?:u8|u16|u32|u64|i8|i16|i32|i64|isize|usize)?/,\n     token: \"number\"},\n    {regex: /(let(?:\\s+mut)?|fn|enum|mod|struct|type|union)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/, token: [\"keyword\", null, \"def\"]},\n    {regex: /(?:abstract|alignof|as|async|await|box|break|continue|const|crate|do|dyn|else|enum|extern|fn|for|final|if|impl|in|loop|macro|match|mod|move|offsetof|override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/, token: \"keyword\"},\n    {regex: /\\b(?:Self|isize|usize|char|bool|u8|u16|u32|u64|f16|f32|f64|i8|i16|i32|i64|str|Option)\\b/, token: \"atom\"},\n    {regex: /\\b(?:true|false|Some|None|Ok|Err)\\b/, token: \"builtin\"},\n    {regex: /\\b(fn)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,\n     token: [\"keyword\", null ,\"def\"]},\n    {regex: /#!?\\[.*\\]/, token: \"meta\"},\n    {regex: /\\/\\/.*/, token: \"comment\"},\n    {regex: /\\/\\*/, token: \"comment\", next: \"comment\"},\n    {regex: /[-+\\/*=<>!]+/, token: \"operator\"},\n    {regex: /[a-zA-Z_]\\w*!/,token: \"variable-3\"},\n    {regex: /[a-zA-Z_]\\w*/, token: \"variable\"},\n    {regex: /[\\{\\[\\(]/, indent: true},\n    {regex: /[\\}\\]\\)]/, dedent: true}\n  ],\n  string: [\n    {regex: /\"/, token: \"string\", next: \"start\"},\n    {regex: /(?:[^\\\\\"]|\\\\(?:.|$))*/, token: \"string\"}\n  ],\n  string_raw: [\n    {regex: /\"/, token: \"string\", next: \"start\"},\n    {regex: /[^\"]*/, token: \"string\"}\n  ],\n  string_raw_hash: [\n    {regex: /\"#+/, token: \"string\", next: \"start\"},\n    {regex: /(?:[^\"]|\"(?!#))*/, token: \"string\"}\n  ],\n  comment: [\n    {regex: /.*?\\*\\//, token: \"comment\", next: \"start\"},\n    {regex: /.*/, token: \"comment\"}\n  ],\n  meta: {\n    dontIndentStates: [\"comment\"],\n    electricInput: /^\\s*\\}$/,\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\",\n    fold: \"brace\"\n  }\n});\n\n\nCodeMirror.defineMIME(\"text/x-rustsrc\", \"rust\");\nCodeMirror.defineMIME(\"text/rust\", \"rust\");\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}