{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"), require(\"../../addon/mode/multiplex\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\", \"../../addon/mode/multiplex\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode(\"handlebars-tags\", {\n    start: [{\n      regex: /\\{\\{\\{/,\n      push: \"handlebars_raw\",\n      token: \"tag\"\n    }, {\n      regex: /\\{\\{!--/,\n      push: \"dash_comment\",\n      token: \"comment\"\n    }, {\n      regex: /\\{\\{!/,\n      push: \"comment\",\n      token: \"comment\"\n    }, {\n      regex: /\\{\\{/,\n      push: \"handlebars\",\n      token: \"tag\"\n    }],\n    handlebars_raw: [{\n      regex: /\\}\\}\\}/,\n      pop: true,\n      token: \"tag\"\n    }],\n    handlebars: [{\n      regex: /\\}\\}/,\n      pop: true,\n      token: \"tag\"\n    }, // Double and single quotes\n    {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n      token: \"string\"\n    }, {\n      regex: /'(?:[^\\\\']|\\\\.)*'?/,\n      token: \"string\"\n    }, // Handlebars keywords\n    {\n      regex: />|[#\\/]([A-Za-z_]\\w*)/,\n      token: \"keyword\"\n    }, {\n      regex: /(?:else|this)\\b/,\n      token: \"keyword\"\n    }, // Numeral\n    {\n      regex: /\\d+/i,\n      token: \"number\"\n    }, // Atoms like = and .\n    {\n      regex: /=|~|@|true|false/,\n      token: \"atom\"\n    }, // Paths\n    {\n      regex: /(?:\\.\\.\\/)*(?:[A-Za-z_][\\w\\.]*)+/,\n      token: \"variable-2\"\n    }],\n    dash_comment: [{\n      regex: /--\\}\\}/,\n      pop: true,\n      token: \"comment\"\n    }, // Commented code\n    {\n      regex: /./,\n      token: \"comment\"\n    }],\n    comment: [{\n      regex: /\\}\\}/,\n      pop: true,\n      token: \"comment\"\n    }, {\n      regex: /./,\n      token: \"comment\"\n    }],\n    meta: {\n      blockCommentStart: \"{{--\",\n      blockCommentEnd: \"--}}\"\n    }\n  });\n  CodeMirror.defineMode(\"handlebars\", function (config, parserConfig) {\n    var handlebars = CodeMirror.getMode(config, \"handlebars-tags\");\n    if (!parserConfig || !parserConfig.base) return handlebars;\n    return CodeMirror.multiplexingMode(CodeMirror.getMode(config, parserConfig.base), {\n      open: \"{{\",\n      close: /\\}\\}\\}?/,\n      mode: handlebars,\n      parseDelimiters: true\n    });\n  });\n  CodeMirror.defineMIME(\"text/x-handlebars-template\", \"handlebars\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineSimpleMode","start","regex","push","token","handlebars_raw","pop","handlebars","dash_comment","comment","meta","blockCommentStart","blockCommentEnd","defineMode","config","parserConfig","getMode","base","multiplexingMode","open","close","mode","parseDelimiters","defineMIME"],"sources":["/mnt/Datengrab/python/Zero-tier/frontend/node_modules/codemirror/mode/handlebars/handlebars.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"), require(\"../../addon/mode/multiplex\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\", \"../../addon/mode/multiplex\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode(\"handlebars-tags\", {\n    start: [\n      { regex: /\\{\\{\\{/, push: \"handlebars_raw\", token: \"tag\" },\n      { regex: /\\{\\{!--/, push: \"dash_comment\", token: \"comment\" },\n      { regex: /\\{\\{!/,   push: \"comment\", token: \"comment\" },\n      { regex: /\\{\\{/,    push: \"handlebars\", token: \"tag\" }\n    ],\n    handlebars_raw: [\n      { regex: /\\}\\}\\}/, pop: true, token: \"tag\" },\n    ],\n    handlebars: [\n      { regex: /\\}\\}/, pop: true, token: \"tag\" },\n\n      // Double and single quotes\n      { regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/, token: \"string\" },\n      { regex: /'(?:[^\\\\']|\\\\.)*'?/, token: \"string\" },\n\n      // Handlebars keywords\n      { regex: />|[#\\/]([A-Za-z_]\\w*)/, token: \"keyword\" },\n      { regex: /(?:else|this)\\b/, token: \"keyword\" },\n\n      // Numeral\n      { regex: /\\d+/i, token: \"number\" },\n\n      // Atoms like = and .\n      { regex: /=|~|@|true|false/, token: \"atom\" },\n\n      // Paths\n      { regex: /(?:\\.\\.\\/)*(?:[A-Za-z_][\\w\\.]*)+/, token: \"variable-2\" }\n    ],\n    dash_comment: [\n      { regex: /--\\}\\}/, pop: true, token: \"comment\" },\n\n      // Commented code\n      { regex: /./, token: \"comment\"}\n    ],\n    comment: [\n      { regex: /\\}\\}/, pop: true, token: \"comment\" },\n      { regex: /./, token: \"comment\" }\n    ],\n    meta: {\n      blockCommentStart: \"{{--\",\n      blockCommentEnd: \"--}}\"\n    }\n  });\n\n  CodeMirror.defineMode(\"handlebars\", function(config, parserConfig) {\n    var handlebars = CodeMirror.getMode(config, \"handlebars-tags\");\n    if (!parserConfig || !parserConfig.base) return handlebars;\n    return CodeMirror.multiplexingMode(\n      CodeMirror.getMode(config, parserConfig.base),\n      {open: \"{{\", close: /\\}\\}\\}?/, mode: handlebars, parseDelimiters: true}\n    );\n  });\n\n  CodeMirror.defineMIME(\"text/x-handlebars-template\", \"handlebars\");\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}