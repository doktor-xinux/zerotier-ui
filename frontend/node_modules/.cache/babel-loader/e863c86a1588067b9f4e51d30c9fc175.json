{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"haxe\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit; // Tokenizer\n\n    function kw(type) {\n      return {\n        type: type,\n        style: \"keyword\"\n      };\n    }\n\n    var A = kw(\"keyword a\"),\n        B = kw(\"keyword b\"),\n        C = kw(\"keyword c\");\n    var operator = kw(\"operator\"),\n        atom = {\n      type: \"atom\",\n      style: \"atom\"\n    },\n        attribute = {\n      type: \"attribute\",\n      style: \"attribute\"\n    };\n    var type = kw(\"typedef\");\n    var keywords = {\n      \"if\": A,\n      \"while\": A,\n      \"else\": B,\n      \"do\": B,\n      \"try\": B,\n      \"return\": C,\n      \"break\": C,\n      \"continue\": C,\n      \"new\": C,\n      \"throw\": C,\n      \"var\": kw(\"var\"),\n      \"inline\": attribute,\n      \"static\": attribute,\n      \"using\": kw(\"import\"),\n      \"public\": attribute,\n      \"private\": attribute,\n      \"cast\": kw(\"cast\"),\n      \"import\": kw(\"import\"),\n      \"macro\": kw(\"macro\"),\n      \"function\": kw(\"function\"),\n      \"catch\": kw(\"catch\"),\n      \"untyped\": kw(\"untyped\"),\n      \"callback\": kw(\"cb\"),\n      \"for\": kw(\"for\"),\n      \"switch\": kw(\"switch\"),\n      \"case\": kw(\"case\"),\n      \"default\": kw(\"default\"),\n      \"in\": operator,\n      \"never\": kw(\"property_access\"),\n      \"trace\": kw(\"trace\"),\n      \"class\": type,\n      \"abstract\": type,\n      \"enum\": type,\n      \"interface\": type,\n      \"typedef\": type,\n      \"extends\": type,\n      \"implements\": type,\n      \"dynamic\": type,\n      \"true\": atom,\n      \"false\": atom,\n      \"null\": atom\n    };\n    var isOperatorChar = /[+\\-*&%=<>!?|]/;\n\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n\n    function toUnescaped(stream, end) {\n      var escaped = false,\n          next;\n\n      while ((next = stream.next()) != null) {\n        if (next == end && !escaped) return true;\n        escaped = !escaped && next == \"\\\\\";\n      }\n    } // Used as scratch variables to communicate multiple values without\n    // consing up tons of objects.\n\n\n    var type, content;\n\n    function ret(tp, style, cont) {\n      type = tp;\n      content = cont;\n      return style;\n    }\n\n    function haxeTokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        return chain(stream, state, haxeTokenString(ch));\n      } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n        return ret(ch);\n      } else if (ch == \"0\" && stream.eat(/x/i)) {\n        stream.eatWhile(/[\\da-f]/i);\n        return ret(\"number\", \"number\");\n      } else if (/\\d/.test(ch) || ch == \"-\" && stream.eat(/\\d/)) {\n        stream.match(/^\\d*(?:\\.\\d*(?!\\.))?(?:[eE][+\\-]?\\d+)?/);\n        return ret(\"number\", \"number\");\n      } else if (state.reAllowed && ch == \"~\" && stream.eat(/\\//)) {\n        toUnescaped(stream, \"/\");\n        stream.eatWhile(/[gimsu]/);\n        return ret(\"regexp\", \"string-2\");\n      } else if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          return chain(stream, state, haxeTokenComment);\n        } else if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return ret(\"comment\", \"comment\");\n        } else {\n          stream.eatWhile(isOperatorChar);\n          return ret(\"operator\", null, stream.current());\n        }\n      } else if (ch == \"#\") {\n        stream.skipToEnd();\n        return ret(\"conditional\", \"meta\");\n      } else if (ch == \"@\") {\n        stream.eat(/:/);\n        stream.eatWhile(/[\\w_]/);\n        return ret(\"metadata\", \"meta\");\n      } else if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return ret(\"operator\", null, stream.current());\n      } else {\n        var word;\n\n        if (/[A-Z]/.test(ch)) {\n          stream.eatWhile(/[\\w_<>]/);\n          word = stream.current();\n          return ret(\"type\", \"variable-3\", word);\n        } else {\n          stream.eatWhile(/[\\w_]/);\n          var word = stream.current(),\n              known = keywords.propertyIsEnumerable(word) && keywords[word];\n          return known && state.kwAllowed ? ret(known.type, known.style, word) : ret(\"variable\", \"variable\", word);\n        }\n      }\n    }\n\n    function haxeTokenString(quote) {\n      return function (stream, state) {\n        if (toUnescaped(stream, quote)) state.tokenize = haxeTokenBase;\n        return ret(\"string\", \"string\");\n      };\n    }\n\n    function haxeTokenComment(stream, state) {\n      var maybeEnd = false,\n          ch;\n\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = haxeTokenBase;\n          break;\n        }\n\n        maybeEnd = ch == \"*\";\n      }\n\n      return ret(\"comment\", \"comment\");\n    } // Parser\n\n\n    var atomicTypes = {\n      \"atom\": true,\n      \"number\": true,\n      \"variable\": true,\n      \"string\": true,\n      \"regexp\": true\n    };\n\n    function HaxeLexical(indented, column, type, align, prev, info) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.prev = prev;\n      this.info = info;\n      if (align != null) this.align = align;\n    }\n\n    function inScope(state, varname) {\n      for (var v = state.localVars; v; v = v.next) {\n        if (v.name == varname) return true;\n      }\n    }\n\n    function parseHaxe(state, style, type, content, stream) {\n      var cc = state.cc; // Communicate our context to the combinators.\n      // (Less wasteful than consing up a hundred closures on every call.)\n\n      cx.state = state;\n      cx.stream = stream;\n      cx.marked = null, cx.cc = cc;\n      if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = true;\n\n      while (true) {\n        var combinator = cc.length ? cc.pop() : statement;\n\n        if (combinator(type, content)) {\n          while (cc.length && cc[cc.length - 1].lex) {\n            cc.pop()();\n          }\n\n          if (cx.marked) return cx.marked;\n          if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n          if (type == \"variable\" && imported(state, content)) return \"variable-3\";\n          return style;\n        }\n      }\n    }\n\n    function imported(state, typename) {\n      if (/[a-z]/.test(typename.charAt(0))) return false;\n      var len = state.importedtypes.length;\n\n      for (var i = 0; i < len; i++) {\n        if (state.importedtypes[i] == typename) return true;\n      }\n    }\n\n    function registerimport(importname) {\n      var state = cx.state;\n\n      for (var t = state.importedtypes; t; t = t.next) {\n        if (t.name == importname) return;\n      }\n\n      state.importedtypes = {\n        name: importname,\n        next: state.importedtypes\n      };\n    } // Combinator utils\n\n\n    var cx = {\n      state: null,\n      column: null,\n      marked: null,\n      cc: null\n    };\n\n    function pass() {\n      for (var i = arguments.length - 1; i >= 0; i--) {\n        cx.cc.push(arguments[i]);\n      }\n    }\n\n    function cont() {\n      pass.apply(null, arguments);\n      return true;\n    }\n\n    function inList(name, list) {\n      for (var v = list; v; v = v.next) {\n        if (v.name == name) return true;\n      }\n\n      return false;\n    }\n\n    function register(varname) {\n      var state = cx.state;\n\n      if (state.context) {\n        cx.marked = \"def\";\n        if (inList(varname, state.localVars)) return;\n        state.localVars = {\n          name: varname,\n          next: state.localVars\n        };\n      } else if (state.globalVars) {\n        if (inList(varname, state.globalVars)) return;\n        state.globalVars = {\n          name: varname,\n          next: state.globalVars\n        };\n      }\n    } // Combinators\n\n\n    var defaultVars = {\n      name: \"this\",\n      next: null\n    };\n\n    function pushcontext() {\n      if (!cx.state.context) cx.state.localVars = defaultVars;\n      cx.state.context = {\n        prev: cx.state.context,\n        vars: cx.state.localVars\n      };\n    }\n\n    function popcontext() {\n      cx.state.localVars = cx.state.context.vars;\n      cx.state.context = cx.state.context.prev;\n    }\n\n    popcontext.lex = true;\n\n    function pushlex(type, info) {\n      var result = function result() {\n        var state = cx.state;\n        state.lexical = new HaxeLexical(state.indented, cx.stream.column(), type, null, state.lexical, info);\n      };\n\n      result.lex = true;\n      return result;\n    }\n\n    function poplex() {\n      var state = cx.state;\n\n      if (state.lexical.prev) {\n        if (state.lexical.type == \")\") state.indented = state.lexical.indented;\n        state.lexical = state.lexical.prev;\n      }\n    }\n\n    poplex.lex = true;\n\n    function expect(wanted) {\n      function f(type) {\n        if (type == wanted) return cont();else if (wanted == \";\") return pass();else return cont(f);\n      }\n\n      return f;\n    }\n\n    function statement(type) {\n      if (type == \"@\") return cont(metadef);\n      if (type == \"var\") return cont(pushlex(\"vardef\"), vardef1, expect(\";\"), poplex);\n      if (type == \"keyword a\") return cont(pushlex(\"form\"), expression, statement, poplex);\n      if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n      if (type == \"{\") return cont(pushlex(\"}\"), pushcontext, block, poplex, popcontext);\n      if (type == \";\") return cont();\n      if (type == \"attribute\") return cont(maybeattribute);\n      if (type == \"function\") return cont(functiondef);\n      if (type == \"for\") return cont(pushlex(\"form\"), expect(\"(\"), pushlex(\")\"), forspec1, expect(\")\"), poplex, statement, poplex);\n      if (type == \"variable\") return cont(pushlex(\"stat\"), maybelabel);\n      if (type == \"switch\") return cont(pushlex(\"form\"), expression, pushlex(\"}\", \"switch\"), expect(\"{\"), block, poplex, poplex);\n      if (type == \"case\") return cont(expression, expect(\":\"));\n      if (type == \"default\") return cont(expect(\":\"));\n      if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, expect(\"(\"), funarg, expect(\")\"), statement, poplex, popcontext);\n      if (type == \"import\") return cont(importdef, expect(\";\"));\n      if (type == \"typedef\") return cont(typedef);\n      return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n    }\n\n    function expression(type) {\n      if (atomicTypes.hasOwnProperty(type)) return cont(maybeoperator);\n      if (type == \"type\") return cont(maybeoperator);\n      if (type == \"function\") return cont(functiondef);\n      if (type == \"keyword c\") return cont(maybeexpression);\n      if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeoperator);\n      if (type == \"operator\") return cont(expression);\n      if (type == \"[\") return cont(pushlex(\"]\"), commasep(maybeexpression, \"]\"), poplex, maybeoperator);\n      if (type == \"{\") return cont(pushlex(\"}\"), commasep(objprop, \"}\"), poplex, maybeoperator);\n      return cont();\n    }\n\n    function maybeexpression(type) {\n      if (type.match(/[;\\}\\)\\],]/)) return pass();\n      return pass(expression);\n    }\n\n    function maybeoperator(type, value) {\n      if (type == \"operator\" && /\\+\\+|--/.test(value)) return cont(maybeoperator);\n      if (type == \"operator\" || type == \":\") return cont(expression);\n      if (type == \";\") return;\n      if (type == \"(\") return cont(pushlex(\")\"), commasep(expression, \")\"), poplex, maybeoperator);\n      if (type == \".\") return cont(property, maybeoperator);\n      if (type == \"[\") return cont(pushlex(\"]\"), expression, expect(\"]\"), poplex, maybeoperator);\n    }\n\n    function maybeattribute(type) {\n      if (type == \"attribute\") return cont(maybeattribute);\n      if (type == \"function\") return cont(functiondef);\n      if (type == \"var\") return cont(vardef1);\n    }\n\n    function metadef(type) {\n      if (type == \":\") return cont(metadef);\n      if (type == \"variable\") return cont(metadef);\n      if (type == \"(\") return cont(pushlex(\")\"), commasep(metaargs, \")\"), poplex, statement);\n    }\n\n    function metaargs(type) {\n      if (type == \"variable\") return cont();\n    }\n\n    function importdef(type, value) {\n      if (type == \"variable\" && /[A-Z]/.test(value.charAt(0))) {\n        registerimport(value);\n        return cont();\n      } else if (type == \"variable\" || type == \"property\" || type == \".\" || value == \"*\") return cont(importdef);\n    }\n\n    function typedef(type, value) {\n      if (type == \"variable\" && /[A-Z]/.test(value.charAt(0))) {\n        registerimport(value);\n        return cont();\n      } else if (type == \"type\" && /[A-Z]/.test(value.charAt(0))) {\n        return cont();\n      }\n    }\n\n    function maybelabel(type) {\n      if (type == \":\") return cont(poplex, statement);\n      return pass(maybeoperator, expect(\";\"), poplex);\n    }\n\n    function property(type) {\n      if (type == \"variable\") {\n        cx.marked = \"property\";\n        return cont();\n      }\n    }\n\n    function objprop(type) {\n      if (type == \"variable\") cx.marked = \"property\";\n      if (atomicTypes.hasOwnProperty(type)) return cont(expect(\":\"), expression);\n    }\n\n    function commasep(what, end) {\n      function proceed(type) {\n        if (type == \",\") return cont(what, proceed);\n        if (type == end) return cont();\n        return cont(expect(end));\n      }\n\n      return function (type) {\n        if (type == end) return cont();else return pass(what, proceed);\n      };\n    }\n\n    function block(type) {\n      if (type == \"}\") return cont();\n      return pass(statement, block);\n    }\n\n    function vardef1(type, value) {\n      if (type == \"variable\") {\n        register(value);\n        return cont(typeuse, vardef2);\n      }\n\n      return cont();\n    }\n\n    function vardef2(type, value) {\n      if (value == \"=\") return cont(expression, vardef2);\n      if (type == \",\") return cont(vardef1);\n    }\n\n    function forspec1(type, value) {\n      if (type == \"variable\") {\n        register(value);\n        return cont(forin, expression);\n      } else {\n        return pass();\n      }\n    }\n\n    function forin(_type, value) {\n      if (value == \"in\") return cont();\n    }\n\n    function functiondef(type, value) {\n      //function names starting with upper-case letters are recognised as types, so cludging them together here.\n      if (type == \"variable\" || type == \"type\") {\n        register(value);\n        return cont(functiondef);\n      }\n\n      if (value == \"new\") return cont(functiondef);\n      if (type == \"(\") return cont(pushlex(\")\"), pushcontext, commasep(funarg, \")\"), poplex, typeuse, statement, popcontext);\n    }\n\n    function typeuse(type) {\n      if (type == \":\") return cont(typestring);\n    }\n\n    function typestring(type) {\n      if (type == \"type\") return cont();\n      if (type == \"variable\") return cont();\n      if (type == \"{\") return cont(pushlex(\"}\"), commasep(typeprop, \"}\"), poplex);\n    }\n\n    function typeprop(type) {\n      if (type == \"variable\") return cont(typeuse);\n    }\n\n    function funarg(type, value) {\n      if (type == \"variable\") {\n        register(value);\n        return cont(typeuse);\n      }\n    } // Interface\n\n\n    return {\n      startState: function startState(basecolumn) {\n        var defaulttypes = [\"Int\", \"Float\", \"String\", \"Void\", \"Std\", \"Bool\", \"Dynamic\", \"Array\"];\n        var state = {\n          tokenize: haxeTokenBase,\n          reAllowed: true,\n          kwAllowed: true,\n          cc: [],\n          lexical: new HaxeLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n          localVars: parserConfig.localVars,\n          importedtypes: defaulttypes,\n          context: parserConfig.localVars && {\n            vars: parserConfig.localVars\n          },\n          indented: 0\n        };\n        if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\") state.globalVars = parserConfig.globalVars;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          if (!state.lexical.hasOwnProperty(\"align\")) state.lexical.align = false;\n          state.indented = stream.indentation();\n        }\n\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        if (type == \"comment\") return style;\n        state.reAllowed = !!(type == \"operator\" || type == \"keyword c\" || type.match(/^[\\[{}\\(,;:]$/));\n        state.kwAllowed = type != '.';\n        return parseHaxe(state, style, type, content, stream);\n      },\n      indent: function indent(state, textAfter) {\n        if (state.tokenize != haxeTokenBase) return 0;\n        var firstChar = textAfter && textAfter.charAt(0),\n            lexical = state.lexical;\n        if (lexical.type == \"stat\" && firstChar == \"}\") lexical = lexical.prev;\n        var type = lexical.type,\n            closing = firstChar == type;\n        if (type == \"vardef\") return lexical.indented + 4;else if (type == \"form\" && firstChar == \"{\") return lexical.indented;else if (type == \"stat\" || type == \"form\") return lexical.indented + indentUnit;else if (lexical.info == \"switch\" && !closing) return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);else if (lexical.align) return lexical.column + (closing ? 0 : 1);else return lexical.indented + (closing ? 0 : indentUnit);\n      },\n      electricChars: \"{}\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-haxe\", \"haxe\");\n  CodeMirror.defineMode(\"hxml\", function () {\n    return {\n      startState: function startState() {\n        return {\n          define: false,\n          inString: false\n        };\n      },\n      token: function token(stream, state) {\n        var ch = stream.peek();\n        var sol = stream.sol(); ///* comments */\n\n        if (ch == \"#\") {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n\n        if (sol && ch == \"-\") {\n          var style = \"variable-2\";\n          stream.eat(/-/);\n\n          if (stream.peek() == \"-\") {\n            stream.eat(/-/);\n            style = \"keyword a\";\n          }\n\n          if (stream.peek() == \"D\") {\n            stream.eat(/[D]/);\n            style = \"keyword c\";\n            state.define = true;\n          }\n\n          stream.eatWhile(/[A-Z]/i);\n          return style;\n        }\n\n        var ch = stream.peek();\n\n        if (state.inString == false && ch == \"'\") {\n          state.inString = true;\n          stream.next();\n        }\n\n        if (state.inString == true) {\n          if (stream.skipTo(\"'\")) {} else {\n            stream.skipToEnd();\n          }\n\n          if (stream.peek() == \"'\") {\n            stream.next();\n            state.inString = false;\n          }\n\n          return \"string\";\n        }\n\n        stream.next();\n        return null;\n      },\n      lineComment: \"#\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-hxml\", \"hxml\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConfig","indentUnit","kw","type","style","A","B","C","operator","atom","attribute","keywords","isOperatorChar","chain","stream","state","f","tokenize","toUnescaped","end","escaped","next","content","ret","tp","cont","haxeTokenBase","ch","haxeTokenString","test","eat","eatWhile","match","reAllowed","haxeTokenComment","skipToEnd","current","word","known","propertyIsEnumerable","kwAllowed","quote","maybeEnd","atomicTypes","HaxeLexical","indented","column","align","prev","info","inScope","varname","v","localVars","name","parseHaxe","cc","cx","marked","lexical","hasOwnProperty","combinator","length","pop","statement","lex","imported","typename","charAt","len","importedtypes","i","registerimport","importname","t","pass","arguments","push","apply","inList","list","register","context","globalVars","defaultVars","pushcontext","vars","popcontext","pushlex","result","poplex","expect","wanted","metadef","vardef1","expression","block","maybeattribute","functiondef","forspec1","maybelabel","funarg","importdef","typedef","maybeoperator","maybeexpression","commasep","objprop","value","property","metaargs","what","proceed","typeuse","vardef2","forin","_type","typestring","typeprop","startState","basecolumn","defaulttypes","token","sol","indentation","eatSpace","indent","textAfter","firstChar","closing","electricChars","blockCommentStart","blockCommentEnd","lineComment","defineMIME","inString","peek","skipTo"],"sources":["/mnt/Datengrab/python/Zero-tier/frontend/node_modules/codemirror/mode/haxe/haxe.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"haxe\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit;\n\n  // Tokenizer\n\n  function kw(type) {return {type: type, style: \"keyword\"};}\n  var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\");\n  var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"}, attribute = {type:\"attribute\", style: \"attribute\"};\n  var type = kw(\"typedef\");\n  var keywords = {\n    \"if\": A, \"while\": A, \"else\": B, \"do\": B, \"try\": B,\n    \"return\": C, \"break\": C, \"continue\": C, \"new\": C, \"throw\": C,\n    \"var\": kw(\"var\"), \"inline\":attribute, \"static\": attribute, \"using\":kw(\"import\"),\n    \"public\": attribute, \"private\": attribute, \"cast\": kw(\"cast\"), \"import\": kw(\"import\"), \"macro\": kw(\"macro\"),\n    \"function\": kw(\"function\"), \"catch\": kw(\"catch\"), \"untyped\": kw(\"untyped\"), \"callback\": kw(\"cb\"),\n    \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n    \"in\": operator, \"never\": kw(\"property_access\"), \"trace\":kw(\"trace\"),\n    \"class\": type, \"abstract\":type, \"enum\":type, \"interface\":type, \"typedef\":type, \"extends\":type, \"implements\":type, \"dynamic\":type,\n    \"true\": atom, \"false\": atom, \"null\": atom\n  };\n\n  var isOperatorChar = /[+\\-*&%=<>!?|]/;\n\n  function chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n  }\n\n  function toUnescaped(stream, end) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (next == end && !escaped)\n        return true;\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n\n  function haxeTokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      return chain(stream, state, haxeTokenString(ch));\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"0\" && stream.eat(/x/i)) {\n      stream.eatWhile(/[\\da-f]/i);\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch) || ch == \"-\" && stream.eat(/\\d/)) {\n      stream.match(/^\\d*(?:\\.\\d*(?!\\.))?(?:[eE][+\\-]?\\d+)?/);\n      return ret(\"number\", \"number\");\n    } else if (state.reAllowed && (ch == \"~\" && stream.eat(/\\//))) {\n      toUnescaped(stream, \"/\");\n      stream.eatWhile(/[gimsu]/);\n      return ret(\"regexp\", \"string-2\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        return chain(stream, state, haxeTokenComment);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else {\n        stream.eatWhile(isOperatorChar);\n        return ret(\"operator\", null, stream.current());\n      }\n    } else if (ch == \"#\") {\n        stream.skipToEnd();\n        return ret(\"conditional\", \"meta\");\n    } else if (ch == \"@\") {\n      stream.eat(/:/);\n      stream.eatWhile(/[\\w_]/);\n      return ret (\"metadata\", \"meta\");\n    } else if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return ret(\"operator\", null, stream.current());\n    } else {\n      var word;\n      if(/[A-Z]/.test(ch)) {\n        stream.eatWhile(/[\\w_<>]/);\n        word = stream.current();\n        return ret(\"type\", \"variable-3\", word);\n      } else {\n        stream.eatWhile(/[\\w_]/);\n        var word = stream.current(), known = keywords.propertyIsEnumerable(word) && keywords[word];\n        return (known && state.kwAllowed) ? ret(known.type, known.style, word) :\n                       ret(\"variable\", \"variable\", word);\n      }\n    }\n  }\n\n  function haxeTokenString(quote) {\n    return function(stream, state) {\n      if (toUnescaped(stream, quote))\n        state.tokenize = haxeTokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function haxeTokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = haxeTokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true, \"regexp\": true};\n\n  function HaxeLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n  }\n\n  function parseHaxe(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n        if (type == \"variable\" && imported(state, content)) return \"variable-3\";\n        return style;\n      }\n    }\n  }\n\n  function imported(state, typename) {\n    if (/[a-z]/.test(typename.charAt(0)))\n      return false;\n    var len = state.importedtypes.length;\n    for (var i = 0; i<len; i++)\n      if(state.importedtypes[i]==typename) return true;\n  }\n\n  function registerimport(importname) {\n    var state = cx.state;\n    for (var t = state.importedtypes; t; t = t.next)\n      if(t.name == importname) return;\n    state.importedtypes = { name: importname, next: state.importedtypes };\n  }\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next)\n      if (v.name == name) return true;\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    if (state.context) {\n      cx.marked = \"def\";\n      if (inList(varname, state.localVars)) return;\n      state.localVars = {name: varname, next: state.localVars};\n    } else if (state.globalVars) {\n      if (inList(varname, state.globalVars)) return;\n      state.globalVars = {name: varname, next: state.globalVars};\n    }\n  }\n\n  // Combinators\n\n  var defaultVars = {name: \"this\", next: null};\n  function pushcontext() {\n    if (!cx.state.context) cx.state.localVars = defaultVars;\n    cx.state.context = {prev: cx.state.context, vars: cx.state.localVars};\n  }\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars;\n    cx.state.context = cx.state.context.prev;\n  }\n  popcontext.lex = true;\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state;\n      state.lexical = new HaxeLexical(state.indented, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function f(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\") return pass();\n      else return cont(f);\n    }\n    return f;\n  }\n\n  function statement(type) {\n    if (type == \"@\") return cont(metadef);\n    if (type == \"var\") return cont(pushlex(\"vardef\"), vardef1, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), expression, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"{\") return cont(pushlex(\"}\"), pushcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"attribute\") return cont(maybeattribute);\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), expect(\"(\"), pushlex(\")\"), forspec1, expect(\")\"),\n                                   poplex, statement, poplex);\n    if (type == \"variable\") return cont(pushlex(\"stat\"), maybelabel);\n    if (type == \"switch\") return cont(pushlex(\"form\"), expression, pushlex(\"}\", \"switch\"), expect(\"{\"),\n                                      block, poplex, poplex);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, expect(\"(\"), funarg, expect(\")\"),\n                                     statement, poplex, popcontext);\n    if (type == \"import\") return cont(importdef, expect(\";\"));\n    if (type == \"typedef\") return cont(typedef);\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function expression(type) {\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeoperator);\n    if (type == \"type\" ) return cont(maybeoperator);\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"keyword c\") return cont(maybeexpression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeoperator);\n    if (type == \"operator\") return cont(expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(maybeexpression, \"]\"), poplex, maybeoperator);\n    if (type == \"{\") return cont(pushlex(\"}\"), commasep(objprop, \"}\"), poplex, maybeoperator);\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperator(type, value) {\n    if (type == \"operator\" && /\\+\\+|--/.test(value)) return cont(maybeoperator);\n    if (type == \"operator\" || type == \":\") return cont(expression);\n    if (type == \";\") return;\n    if (type == \"(\") return cont(pushlex(\")\"), commasep(expression, \")\"), poplex, maybeoperator);\n    if (type == \".\") return cont(property, maybeoperator);\n    if (type == \"[\") return cont(pushlex(\"]\"), expression, expect(\"]\"), poplex, maybeoperator);\n  }\n\n  function maybeattribute(type) {\n    if (type == \"attribute\") return cont(maybeattribute);\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"var\") return cont(vardef1);\n  }\n\n  function metadef(type) {\n    if(type == \":\") return cont(metadef);\n    if(type == \"variable\") return cont(metadef);\n    if(type == \"(\") return cont(pushlex(\")\"), commasep(metaargs, \")\"), poplex, statement);\n  }\n  function metaargs(type) {\n    if(type == \"variable\") return cont();\n  }\n\n  function importdef (type, value) {\n    if(type == \"variable\" && /[A-Z]/.test(value.charAt(0))) { registerimport(value); return cont(); }\n    else if(type == \"variable\" || type == \"property\" || type == \".\" || value == \"*\") return cont(importdef);\n  }\n\n  function typedef (type, value)\n  {\n    if(type == \"variable\" && /[A-Z]/.test(value.charAt(0))) { registerimport(value); return cont(); }\n    else if (type == \"type\" && /[A-Z]/.test(value.charAt(0))) { return cont(); }\n  }\n\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperator, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type) {\n    if (type == \"variable\") cx.marked = \"property\";\n    if (atomicTypes.hasOwnProperty(type)) return cont(expect(\":\"), expression);\n  }\n  function commasep(what, end) {\n    function proceed(type) {\n      if (type == \",\") return cont(what, proceed);\n      if (type == end) return cont();\n      return cont(expect(end));\n    }\n    return function(type) {\n      if (type == end) return cont();\n      else return pass(what, proceed);\n    };\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function vardef1(type, value) {\n    if (type == \"variable\"){register(value); return cont(typeuse, vardef2);}\n    return cont();\n  }\n  function vardef2(type, value) {\n    if (value == \"=\") return cont(expression, vardef2);\n    if (type == \",\") return cont(vardef1);\n  }\n  function forspec1(type, value) {\n    if (type == \"variable\") {\n      register(value);\n      return cont(forin, expression)\n    } else {\n      return pass()\n    }\n  }\n  function forin(_type, value) {\n    if (value == \"in\") return cont();\n  }\n  function functiondef(type, value) {\n    //function names starting with upper-case letters are recognised as types, so cludging them together here.\n    if (type == \"variable\" || type == \"type\") {register(value); return cont(functiondef);}\n    if (value == \"new\") return cont(functiondef);\n    if (type == \"(\") return cont(pushlex(\")\"), pushcontext, commasep(funarg, \")\"), poplex, typeuse, statement, popcontext);\n  }\n  function typeuse(type) {\n    if(type == \":\") return cont(typestring);\n  }\n  function typestring(type) {\n    if(type == \"type\") return cont();\n    if(type == \"variable\") return cont();\n    if(type == \"{\") return cont(pushlex(\"}\"), commasep(typeprop, \"}\"), poplex);\n  }\n  function typeprop(type) {\n    if(type == \"variable\") return cont(typeuse);\n  }\n  function funarg(type, value) {\n    if (type == \"variable\") {register(value); return cont(typeuse);}\n  }\n\n  // Interface\n  return {\n    startState: function(basecolumn) {\n      var defaulttypes = [\"Int\", \"Float\", \"String\", \"Void\", \"Std\", \"Bool\", \"Dynamic\", \"Array\"];\n      var state = {\n        tokenize: haxeTokenBase,\n        reAllowed: true,\n        kwAllowed: true,\n        cc: [],\n        lexical: new HaxeLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        importedtypes: defaulttypes,\n        context: parserConfig.localVars && {vars: parserConfig.localVars},\n        indented: 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n      }\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.reAllowed = !!(type == \"operator\" || type == \"keyword c\" || type.match(/^[\\[{}\\(,;:]$/));\n      state.kwAllowed = type != '.';\n      return parseHaxe(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != haxeTokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical;\n      if (lexical.type == \"stat\" && firstChar == \"}\") lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n      if (type == \"vardef\") return lexical.indented + 4;\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"stat\" || type == \"form\") return lexical.indented + indentUnit;\n      else if (lexical.info == \"switch\" && !closing)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"{}\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-haxe\", \"haxe\");\n\nCodeMirror.defineMode(\"hxml\", function () {\n\n  return {\n    startState: function () {\n      return {\n        define: false,\n        inString: false\n      };\n    },\n    token: function (stream, state) {\n      var ch = stream.peek();\n      var sol = stream.sol();\n\n      ///* comments */\n      if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      if (sol && ch == \"-\") {\n        var style = \"variable-2\";\n\n        stream.eat(/-/);\n\n        if (stream.peek() == \"-\") {\n          stream.eat(/-/);\n          style = \"keyword a\";\n        }\n\n        if (stream.peek() == \"D\") {\n          stream.eat(/[D]/);\n          style = \"keyword c\";\n          state.define = true;\n        }\n\n        stream.eatWhile(/[A-Z]/i);\n        return style;\n      }\n\n      var ch = stream.peek();\n\n      if (state.inString == false && ch == \"'\") {\n        state.inString = true;\n        stream.next();\n      }\n\n      if (state.inString == true) {\n        if (stream.skipTo(\"'\")) {\n\n        } else {\n          stream.skipToEnd();\n        }\n\n        if (stream.peek() == \"'\") {\n          stream.next();\n          state.inString = false;\n        }\n\n        return \"string\";\n      }\n\n      stream.next();\n      return null;\n    },\n    lineComment: \"#\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-hxml\", \"hxml\");\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}