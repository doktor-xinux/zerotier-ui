{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n// Factor syntax highlight - simple mode\n//\n// by Dimage Sapelkin (https://github.com/kerabromsmu)\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode(\"factor\", {\n    // The start state contains the rules that are initially used\n    start: [// comments\n    {\n      regex: /#?!.*/,\n      token: \"comment\"\n    }, // strings \"\"\", multiline --> state\n    {\n      regex: /\"\"\"/,\n      token: \"string\",\n      next: \"string3\"\n    }, {\n      regex: /(STRING:)(\\s)/,\n      token: [\"keyword\", null],\n      next: \"string2\"\n    }, {\n      regex: /\\S*?\"/,\n      token: \"string\",\n      next: \"string\"\n    }, // numbers: dec, hex, unicode, bin, fractional, complex\n    {\n      regex: /(?:0x[\\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\\-?\\d+.?\\d*)(?=\\s)/,\n      token: \"number\"\n    }, //{regex: /[+-]?/} //fractional\n    // definition: defining word, defined word, etc\n    {\n      regex: /((?:GENERIC)|\\:?\\:)(\\s+)(\\S+)(\\s+)(\\()/,\n      token: [\"keyword\", null, \"def\", null, \"bracket\"],\n      next: \"stack\"\n    }, // method definition: defining word, type, defined word, etc\n    {\n      regex: /(M\\:)(\\s+)(\\S+)(\\s+)(\\S+)/,\n      token: [\"keyword\", null, \"def\", null, \"tag\"]\n    }, // vocabulary using --> state\n    {\n      regex: /USING\\:/,\n      token: \"keyword\",\n      next: \"vocabulary\"\n    }, // vocabulary definition/use\n    {\n      regex: /(USE\\:|IN\\:)(\\s+)(\\S+)(?=\\s|$)/,\n      token: [\"keyword\", null, \"tag\"]\n    }, // definition: a defining word, defined word\n    {\n      regex: /(\\S+\\:)(\\s+)(\\S+)(?=\\s|$)/,\n      token: [\"keyword\", null, \"def\"]\n    }, // \"keywords\", incl. ; t f . [ ] { } defining words\n    {\n      regex: /(?:;|\\\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\\.|\\S*\\[|\\]|\\S*\\{|\\})(?=\\s|$)/,\n      token: \"keyword\"\n    }, // <constructors> and the like\n    {\n      regex: /\\S+[\\)>\\.\\*\\?]+(?=\\s|$)/,\n      token: \"builtin\"\n    }, {\n      regex: /[\\)><]+\\S+(?=\\s|$)/,\n      token: \"builtin\"\n    }, // operators\n    {\n      regex: /(?:[\\+\\-\\=\\/\\*<>])(?=\\s|$)/,\n      token: \"keyword\"\n    }, // any id (?)\n    {\n      regex: /\\S+/,\n      token: \"variable\"\n    }, {\n      regex: /\\s+|./,\n      token: null\n    }],\n    vocabulary: [{\n      regex: /;/,\n      token: \"keyword\",\n      next: \"start\"\n    }, {\n      regex: /\\S+/,\n      token: \"tag\"\n    }, {\n      regex: /\\s+|./,\n      token: null\n    }],\n    string: [{\n      regex: /(?:[^\\\\]|\\\\.)*?\"/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /.*/,\n      token: \"string\"\n    }],\n    string2: [{\n      regex: /^;/,\n      token: \"keyword\",\n      next: \"start\"\n    }, {\n      regex: /.*/,\n      token: \"string\"\n    }],\n    string3: [{\n      regex: /(?:[^\\\\]|\\\\.)*?\"\"\"/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /.*/,\n      token: \"string\"\n    }],\n    stack: [{\n      regex: /\\)/,\n      token: \"bracket\",\n      next: \"start\"\n    }, {\n      regex: /--/,\n      token: \"bracket\"\n    }, {\n      regex: /\\S+/,\n      token: \"meta\"\n    }, {\n      regex: /\\s+|./,\n      token: null\n    }],\n    // The meta property contains global information about the mode. It\n    // can contain properties like lineComment, which are supported by\n    // all modes, and also directives like dontIndentStates, which are\n    // specific to simple modes.\n    meta: {\n      dontIndentStates: [\"start\", \"vocabulary\", \"string\", \"string3\", \"stack\"],\n      lineComment: \"!\"\n    }\n  });\n  CodeMirror.defineMIME(\"text/x-factor\", \"factor\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineSimpleMode","start","regex","token","next","vocabulary","string","string2","string3","stack","meta","dontIndentStates","lineComment","defineMIME"],"sources":["/mnt/Datengrab/python/Zero-tier/frontend/node_modules/codemirror/mode/factor/factor.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Factor syntax highlight - simple mode\n//\n// by Dimage Sapelkin (https://github.com/kerabromsmu)\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode(\"factor\", {\n    // The start state contains the rules that are initially used\n    start: [\n      // comments\n      {regex: /#?!.*/, token: \"comment\"},\n      // strings \"\"\", multiline --> state\n      {regex: /\"\"\"/, token: \"string\", next: \"string3\"},\n      {regex: /(STRING:)(\\s)/, token: [\"keyword\", null], next: \"string2\"},\n      {regex: /\\S*?\"/, token: \"string\", next: \"string\"},\n      // numbers: dec, hex, unicode, bin, fractional, complex\n      {regex: /(?:0x[\\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\\-?\\d+.?\\d*)(?=\\s)/, token: \"number\"},\n      //{regex: /[+-]?/} //fractional\n      // definition: defining word, defined word, etc\n      {regex: /((?:GENERIC)|\\:?\\:)(\\s+)(\\S+)(\\s+)(\\()/, token: [\"keyword\", null, \"def\", null, \"bracket\"], next: \"stack\"},\n      // method definition: defining word, type, defined word, etc\n      {regex: /(M\\:)(\\s+)(\\S+)(\\s+)(\\S+)/, token: [\"keyword\", null, \"def\", null, \"tag\"]},\n      // vocabulary using --> state\n      {regex: /USING\\:/, token: \"keyword\", next: \"vocabulary\"},\n      // vocabulary definition/use\n      {regex: /(USE\\:|IN\\:)(\\s+)(\\S+)(?=\\s|$)/, token: [\"keyword\", null, \"tag\"]},\n      // definition: a defining word, defined word\n      {regex: /(\\S+\\:)(\\s+)(\\S+)(?=\\s|$)/, token: [\"keyword\", null, \"def\"]},\n      // \"keywords\", incl. ; t f . [ ] { } defining words\n      {regex: /(?:;|\\\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\\.|\\S*\\[|\\]|\\S*\\{|\\})(?=\\s|$)/, token: \"keyword\"},\n      // <constructors> and the like\n      {regex: /\\S+[\\)>\\.\\*\\?]+(?=\\s|$)/, token: \"builtin\"},\n      {regex: /[\\)><]+\\S+(?=\\s|$)/, token: \"builtin\"},\n      // operators\n      {regex: /(?:[\\+\\-\\=\\/\\*<>])(?=\\s|$)/, token: \"keyword\"},\n      // any id (?)\n      {regex: /\\S+/, token: \"variable\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    vocabulary: [\n      {regex: /;/, token: \"keyword\", next: \"start\"},\n      {regex: /\\S+/, token: \"tag\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    string: [\n      {regex: /(?:[^\\\\]|\\\\.)*?\"/, token: \"string\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    string2: [\n      {regex: /^;/, token: \"keyword\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    string3: [\n      {regex: /(?:[^\\\\]|\\\\.)*?\"\"\"/, token: \"string\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    stack: [\n      {regex: /\\)/, token: \"bracket\", next: \"start\"},\n      {regex: /--/, token: \"bracket\"},\n      {regex: /\\S+/, token: \"meta\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    // The meta property contains global information about the mode. It\n    // can contain properties like lineComment, which are supported by\n    // all modes, and also directives like dontIndentStates, which are\n    // specific to simple modes.\n    meta: {\n      dontIndentStates: [\"start\", \"vocabulary\", \"string\", \"string3\", \"stack\"],\n      lineComment: \"!\"\n    }\n  });\n\n  CodeMirror.defineMIME(\"text/x-factor\", \"factor\");\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}