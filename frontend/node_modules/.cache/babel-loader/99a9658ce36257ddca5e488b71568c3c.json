{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ebnf\", function (config) {\n    var commentType = {\n      slash: 0,\n      parenthesis: 1\n    };\n    var stateType = {\n      comment: 0,\n      _string: 1,\n      characterClass: 2\n    };\n    var bracesMode = null;\n    if (config.bracesMode) bracesMode = CodeMirror.getMode(config, config.bracesMode);\n    return {\n      startState: function startState() {\n        return {\n          stringType: null,\n          commentType: null,\n          braced: 0,\n          lhs: true,\n          localState: null,\n          stack: [],\n          inDefinition: false\n        };\n      },\n      token: function token(stream, state) {\n        if (!stream) return; //check for state changes\n\n        if (state.stack.length === 0) {\n          //strings\n          if (stream.peek() == '\"' || stream.peek() == \"'\") {\n            state.stringType = stream.peek();\n            stream.next(); // Skip quote\n\n            state.stack.unshift(stateType._string);\n          } else if (stream.match('/*')) {\n            //comments starting with /*\n            state.stack.unshift(stateType.comment);\n            state.commentType = commentType.slash;\n          } else if (stream.match('(*')) {\n            //comments starting with (*\n            state.stack.unshift(stateType.comment);\n            state.commentType = commentType.parenthesis;\n          }\n        } //return state\n        //stack has\n\n\n        switch (state.stack[0]) {\n          case stateType._string:\n            while (state.stack[0] === stateType._string && !stream.eol()) {\n              if (stream.peek() === state.stringType) {\n                stream.next(); // Skip quote\n\n                state.stack.shift(); // Clear flag\n              } else if (stream.peek() === \"\\\\\") {\n                stream.next();\n                stream.next();\n              } else {\n                stream.match(/^.[^\\\\\\\"\\']*/);\n              }\n            }\n\n            return state.lhs ? \"property string\" : \"string\";\n          // Token style\n\n          case stateType.comment:\n            while (state.stack[0] === stateType.comment && !stream.eol()) {\n              if (state.commentType === commentType.slash && stream.match('*/')) {\n                state.stack.shift(); // Clear flag\n\n                state.commentType = null;\n              } else if (state.commentType === commentType.parenthesis && stream.match('*)')) {\n                state.stack.shift(); // Clear flag\n\n                state.commentType = null;\n              } else {\n                stream.match(/^.[^\\*]*/);\n              }\n            }\n\n            return \"comment\";\n\n          case stateType.characterClass:\n            while (state.stack[0] === stateType.characterClass && !stream.eol()) {\n              if (!(stream.match(/^[^\\]\\\\]+/) || stream.match('.'))) {\n                state.stack.shift();\n              }\n            }\n\n            return \"operator\";\n        }\n\n        var peek = stream.peek();\n\n        if (bracesMode !== null && (state.braced || peek === \"{\")) {\n          if (state.localState === null) state.localState = CodeMirror.startState(bracesMode);\n          var token = bracesMode.token(stream, state.localState),\n              text = stream.current();\n\n          if (!token) {\n            for (var i = 0; i < text.length; i++) {\n              if (text[i] === \"{\") {\n                if (state.braced === 0) {\n                  token = \"matchingbracket\";\n                }\n\n                state.braced++;\n              } else if (text[i] === \"}\") {\n                state.braced--;\n\n                if (state.braced === 0) {\n                  token = \"matchingbracket\";\n                }\n              }\n            }\n          }\n\n          return token;\n        } //no stack\n\n\n        switch (peek) {\n          case \"[\":\n            stream.next();\n            state.stack.unshift(stateType.characterClass);\n            return \"bracket\";\n\n          case \":\":\n          case \"|\":\n          case \";\":\n            stream.next();\n            return \"operator\";\n\n          case \"%\":\n            if (stream.match(\"%%\")) {\n              return \"header\";\n            } else if (stream.match(/[%][A-Za-z]+/)) {\n              return \"keyword\";\n            } else if (stream.match(/[%][}]/)) {\n              return \"matchingbracket\";\n            }\n\n            break;\n\n          case \"/\":\n            if (stream.match(/[\\/][A-Za-z]+/)) {\n              return \"keyword\";\n            }\n\n          case \"\\\\\":\n            if (stream.match(/[\\][a-z]+/)) {\n              return \"string-2\";\n            }\n\n          case \".\":\n            if (stream.match(\".\")) {\n              return \"atom\";\n            }\n\n          case \"*\":\n          case \"-\":\n          case \"+\":\n          case \"^\":\n            if (stream.match(peek)) {\n              return \"atom\";\n            }\n\n          case \"$\":\n            if (stream.match(\"$$\")) {\n              return \"builtin\";\n            } else if (stream.match(/[$][0-9]+/)) {\n              return \"variable-3\";\n            }\n\n          case \"<\":\n            if (stream.match(/<<[a-zA-Z_]+>>/)) {\n              return \"builtin\";\n            }\n\n        }\n\n        if (stream.match('//')) {\n          stream.skipToEnd();\n          return \"comment\";\n        } else if (stream.match('return')) {\n          return \"operator\";\n        } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {\n          if (stream.match(/(?=[\\(.])/)) {\n            return \"variable\";\n          } else if (stream.match(/(?=[\\s\\n]*[:=])/)) {\n            return \"def\";\n          }\n\n          return \"variable-2\";\n        } else if ([\"[\", \"]\", \"(\", \")\"].indexOf(stream.peek()) != -1) {\n          stream.next();\n          return \"bracket\";\n        } else if (!stream.eatSpace()) {\n          stream.next();\n        }\n\n        return null;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-ebnf\", \"ebnf\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","commentType","slash","parenthesis","stateType","comment","_string","characterClass","bracesMode","getMode","startState","stringType","braced","lhs","localState","stack","inDefinition","token","stream","state","length","peek","next","unshift","match","eol","shift","text","current","i","skipToEnd","indexOf","eatSpace","defineMIME"],"sources":["/mnt/Datengrab/python/Zero-tier/frontend/node_modules/codemirror/mode/ebnf/ebnf.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ebnf\", function (config) {\n    var commentType = {slash: 0, parenthesis: 1};\n    var stateType = {comment: 0, _string: 1, characterClass: 2};\n    var bracesMode = null;\n\n    if (config.bracesMode)\n      bracesMode = CodeMirror.getMode(config, config.bracesMode);\n\n    return {\n      startState: function () {\n        return {\n          stringType: null,\n          commentType: null,\n          braced: 0,\n          lhs: true,\n          localState: null,\n          stack: [],\n          inDefinition: false\n        };\n      },\n      token: function (stream, state) {\n        if (!stream) return;\n\n        //check for state changes\n        if (state.stack.length === 0) {\n          //strings\n          if ((stream.peek() == '\"') || (stream.peek() == \"'\")) {\n            state.stringType = stream.peek();\n            stream.next(); // Skip quote\n            state.stack.unshift(stateType._string);\n          } else if (stream.match('/*')) { //comments starting with /*\n            state.stack.unshift(stateType.comment);\n            state.commentType = commentType.slash;\n          } else if (stream.match('(*')) { //comments starting with (*\n            state.stack.unshift(stateType.comment);\n            state.commentType = commentType.parenthesis;\n          }\n        }\n\n        //return state\n        //stack has\n        switch (state.stack[0]) {\n        case stateType._string:\n          while (state.stack[0] === stateType._string && !stream.eol()) {\n            if (stream.peek() === state.stringType) {\n              stream.next(); // Skip quote\n              state.stack.shift(); // Clear flag\n            } else if (stream.peek() === \"\\\\\") {\n              stream.next();\n              stream.next();\n            } else {\n              stream.match(/^.[^\\\\\\\"\\']*/);\n            }\n          }\n          return state.lhs ? \"property string\" : \"string\"; // Token style\n\n        case stateType.comment:\n          while (state.stack[0] === stateType.comment && !stream.eol()) {\n            if (state.commentType === commentType.slash && stream.match('*/')) {\n              state.stack.shift(); // Clear flag\n              state.commentType = null;\n            } else if (state.commentType === commentType.parenthesis && stream.match('*)')) {\n              state.stack.shift(); // Clear flag\n              state.commentType = null;\n            } else {\n              stream.match(/^.[^\\*]*/);\n            }\n          }\n          return \"comment\";\n\n        case stateType.characterClass:\n          while (state.stack[0] === stateType.characterClass && !stream.eol()) {\n            if (!(stream.match(/^[^\\]\\\\]+/) || stream.match('.'))) {\n              state.stack.shift();\n            }\n          }\n          return \"operator\";\n        }\n\n        var peek = stream.peek();\n\n        if (bracesMode !== null && (state.braced || peek === \"{\")) {\n          if (state.localState === null)\n            state.localState = CodeMirror.startState(bracesMode);\n\n          var token = bracesMode.token(stream, state.localState),\n          text = stream.current();\n\n          if (!token) {\n            for (var i = 0; i < text.length; i++) {\n              if (text[i] === \"{\") {\n                if (state.braced === 0) {\n                  token = \"matchingbracket\";\n                }\n                state.braced++;\n              } else if (text[i] === \"}\") {\n                state.braced--;\n                if (state.braced === 0) {\n                  token = \"matchingbracket\";\n                }\n              }\n            }\n          }\n          return token;\n        }\n\n        //no stack\n        switch (peek) {\n        case \"[\":\n          stream.next();\n          state.stack.unshift(stateType.characterClass);\n          return \"bracket\";\n        case \":\":\n        case \"|\":\n        case \";\":\n          stream.next();\n          return \"operator\";\n        case \"%\":\n          if (stream.match(\"%%\")) {\n            return \"header\";\n          } else if (stream.match(/[%][A-Za-z]+/)) {\n            return \"keyword\";\n          } else if (stream.match(/[%][}]/)) {\n            return \"matchingbracket\";\n          }\n          break;\n        case \"/\":\n          if (stream.match(/[\\/][A-Za-z]+/)) {\n          return \"keyword\";\n        }\n        case \"\\\\\":\n          if (stream.match(/[\\][a-z]+/)) {\n            return \"string-2\";\n          }\n        case \".\":\n          if (stream.match(\".\")) {\n            return \"atom\";\n          }\n        case \"*\":\n        case \"-\":\n        case \"+\":\n        case \"^\":\n          if (stream.match(peek)) {\n            return \"atom\";\n          }\n        case \"$\":\n          if (stream.match(\"$$\")) {\n            return \"builtin\";\n          } else if (stream.match(/[$][0-9]+/)) {\n            return \"variable-3\";\n          }\n        case \"<\":\n          if (stream.match(/<<[a-zA-Z_]+>>/)) {\n            return \"builtin\";\n          }\n        }\n\n        if (stream.match('//')) {\n          stream.skipToEnd();\n          return \"comment\";\n        } else if (stream.match('return')) {\n          return \"operator\";\n        } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {\n          if (stream.match(/(?=[\\(.])/)) {\n            return \"variable\";\n          } else if (stream.match(/(?=[\\s\\n]*[:=])/)) {\n            return \"def\";\n          }\n          return \"variable-2\";\n        } else if ([\"[\", \"]\", \"(\", \")\"].indexOf(stream.peek()) != -1) {\n          stream.next();\n          return \"bracket\";\n        } else if (!stream.eatSpace()) {\n          stream.next();\n        }\n        return null;\n      }\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/x-ebnf\", \"ebnf\");\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}